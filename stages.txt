[{"_id": "65daa6ebc55b7f0042d67ca4", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/DisasterCleanedAgainTotest.csv", "in": [], "out": ["65daa6ebc55b7f0042d67ca5"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "DisasterCleanedAgainTotest", "comment": "", "pipeline_id": "65daa6ebc55b7f0042d67ca1", "sub_type": "HDFS", "stage_type": "source", "stage_attributes": {"url": "/FileStore/platform/uploadedSourceFiles/DisasterCleanedAgainTotest.csv", "filename": "DisasterCleanedAgainTotest.csv", "delimiter": ",", "file_type": "Delimeted", "dbfs_token": "", "dbfs_domain": "", "is_header": "Use Header Line", "domain": "http://172.31.59.158", "port": "40070", "dirPath": "/FileStore/platform", "server_url": "/numtraPlatform/NumtraPlatformV3/uploads/platform/"}, "status": "new", "position": {"x": -80, "y": 160}, "shape_attributes": {"image": {"refHeight": "100%", "xlinkHref": "assets/svg/source/hdfs-source.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "source", "text": "DisasterCleanedAgainTotest", "slug": "hdfs", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "Disaster", "alias": "Disaster", "type": "String", "position": 0}, {"inherited": true, "checked": true, "field": "Disaster Type", "alias": "Disaster Type", "type": "String", "position": 1}, {"inherited": true, "checked": true, "field": "Beginning Date", "alias": "Beginning Date", "type": "date", "position": 2}, {"inherited": true, "checked": true, "field": "Ending Date", "alias": "Ending Date", "type": "date", "position": 3}, {"inherited": true, "checked": true, "field": "Total CPI-Adjusted Cost (Millions of Dollars)", "alias": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "Deaths", "alias": "Deaths", "type": "numeric", "position": 5}, {"inherited": true, "checked": true, "field": "Description", "alias": "Description", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Event ID", "alias": "Event ID", "type": "String", "position": 7}], "actual_schema": [{"inherited": true, "checked": true, "field": "Disaster", "alias": "Disaster", "type": "String", "position": 0}, {"inherited": true, "checked": true, "field": "Disaster Type", "alias": "Disaster Type", "type": "String", "position": 1}, {"inherited": true, "checked": true, "field": "Beginning Date", "alias": "Beginning Date", "type": "date", "position": 2}, {"inherited": true, "checked": true, "field": "Ending Date", "alias": "Ending Date", "type": "date", "position": 3}, {"inherited": true, "checked": true, "field": "Total CPI-Adjusted Cost (Millions of Dollars)", "alias": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "Deaths", "alias": "Deaths", "type": "numeric", "position": 5}, {"inherited": true, "checked": true, "field": "Description", "alias": "Description", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Event ID", "alias": "Event ID", "type": "String", "position": 7}], "selected_schema": [], "created_at": "2024-02-25 02:33:15.200000", "joinSchema": [], "updated_at": "2024-02-25 02:33:47.074000", "__v": 0, "sampleData": [{"Disaster": "Western Wildfires (Summer-Fall 2018)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2018", "Ending Date": "9/30/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2200.0, "Deaths": 15, "Description": "California has again been impacted by a damaging and costly wildfire season. Of note, the Medincino Complex Fire was the largest wildfire on record in California burning over 450,000 acres while the Carr Fire in Northern California damaged or destroyed over 1,500 homes and businesses. Several other Western states (OR, WA, UT, WY, ID, MT, CO) have also had active and damaging wildfire seasons. In total, over 7.7 million acres has burned across the U.S. during the first 9 months of 2018, which is well above the 10-year average (2008-2017) of 5.9 million acres for the January-September period.", "Event ID": "10001"}, {"Disaster": "Southwest/Southern Plains Drought (Summer-Fall 2018)", "Disaster Type": "Drought", "Beginning Date": "6/1/2018", "Ending Date": "9/30/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2800.0, "Deaths": 0, "Description": "Drought conditions were present across numerous Southwestern and Plains states (TX, OK, KS, MO, CO, NM, AZ, UT). The most extreme drought conditions continue to persist across the Four Corners region of the Southwest. The agriculture sector has been impacted across the affected states including damage to field crops from lack of rainfall. Ranchers have also be forced to sell-off livestock early in some regions due to high feeding costs.", "Event ID": "10002"}, {"Disaster": "Hurricane Florence (September 2018)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/13/2018", "Ending Date": "9/16/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 22500.0, "Deaths": 51, "Description": "\"Hurricane Florence was a large and very slow moving hurricane that produced extreme rainfall across eastern North Carolina (up to 35.93\"\") and South Carolina (up to 23.81\"\")", "Event ID": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1"}, {"Disaster": "Colorado Hail Storm (June 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "6/18/2018", "Ending Date": "6/19/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2100.0, "Deaths": 0, "Description": "Severe hail storms cause golf ball to baseball-sized hail and widespread damage in many areas from northern Denver to Boulder and Fort Collins. Many homes, businesses and vehicles were impacted..", "Event ID": "10004"}, {"Disaster": "Texas Hail Storm (June 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2018", "Ending Date": "6/6/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1000.0, "Deaths": 0, "Description": "Large-hail impacts highly-populated area of the Dallas-Ft. Worth metroplex. Golfball to baseball-sized hail damages many homes, vehicles and businesses.", "Event ID": "10005"}, {"Disaster": "Central and Eastern Severe Weather (May 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "5/13/2018", "Ending Date": "5/15/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1383.9, "Deaths": 5, "Description": "Severe storm damage across many Central states including TX, KS, CO, OK, MO, IL, IN, IA and OH. This was followed by a derecho event across the Northeastern states of MD, NJ, NY, PA, VA, WV, MA and CT that caused widespread high wind damage. Also, there were one dozen tornadoes reported across PA, NY and CT causing further damage.", "Event ID": "10006"}, {"Disaster": "Central and Northeastern Severe Weather (May 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "5/1/2018", "Ending Date": "5/4/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1018.4, "Deaths": 0, "Description": "Numerous central states (KS, NE, OK, TX, NM, MO, IA, IL, IN, OH, WI) were impacted by large hail and tornadoes. Several northeastern states including NY, PA and VT were also impacted by high wind damage from severe storms.", "Event ID": "10007"}, {"Disaster": "Southern and Eastern Tornadoes and Severe Weather (April 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2018", "Ending Date": "4/16/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1331.4, "Deaths": 3, "Description": "Tornadoes and severe storms with large hail cause widespread damage across many Southern and Eastern states (AR, FL, GA, LA, MD, MI, MS, MO, NJ, NY, NC, PA, SC, TX, VA) over a multi-day period. There were over 70 confirmed tornadoes largely clustered in Louisiana, Mississippi, North Carolina and Virginia. This same system also caused winter storm impacts of high wind and ice accumulation in northeastern states.", "Event ID": "10008"}, {"Disaster": "Southeastern Tornadoes and Severe Weather (March 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "3/18/2018", "Ending Date": "3/21/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1378.8, "Deaths": 0, "Description": "A potent severe storm system caused over 20 tornadoes across Alabama and also widespread hail damage from Texas to Florida. Most notably this system produced an EF-3 tornado that caused extensive damage in Jacksonville, Alabama and across the campus of Jacksonville State University.", "Event ID": "10009"}, {"Disaster": "Northeast Winter Storm (March 2018)", "Disaster Type": "Winter Storm", "Beginning Date": "3/1/2018", "Ending Date": "3/3/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2216.0, "Deaths": 9, "Description": "Powerful Nor'easter impacted many Northeastern states including MD, MA, NH, NJ, NY, PA, CT, DE, RA and VA. Widespread damage resulted from the combination of high winds, heavy snow and heavy coastal erosion.", "Event ID": "10010"}, {"Disaster": "Central and Eastern Winter Storm (January 2018)", "Disaster Type": "Winter Storm", "Beginning Date": "1/3/2018", "Ending Date": "1/5/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1063.8, "Deaths": 22, "Description": "A Nor'easter caused damage across many Northeastern states including MA, NJ, NY, CT, ME, NH, PA, MD, RI, SC, TN, VA, NC and GA.", "Event ID": "10011"}, {"Disaster": "Western Wildfires, California Firestorm (Summer-Fall 2017)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2017", "Ending Date": "12/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 18365.1, "Deaths": 54, "Description": "A historic firestorm damages or destroys over 15,000 homes, businesses and other structures across California in October. The combined destruction of the Tubbs, Atlas, Nuns and Redwood Valley wildfires represent the most costly wildfire event on record, also causing 44 deaths. Extreme wildfire conditions in early December also burned hundreds of homes in Los Angeles. Numerous other wildfires across many western and northwestern states burn over 9.8 million acres exceeding the 10-year annual average of 6.5 million acres. Montana in particular was affected by wildfires that burned in excess of 1 million acres. These wildfire conditions were enhanced by the preceding drought conditions in several states.", "Event ID": "10012"}, {"Disaster": "North Dakota, South Dakota and Montana Drought (Spring-Fall 2017)", "Disaster Type": "Drought", "Beginning Date": "3/1/2017", "Ending Date": "12/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2550.0, "Deaths": 0, "Description": "Extreme drought causes extensive impacts to agriculture in North Dakota, South Dakota and Montana. Field crops including wheat were severely damaged and the lack of feed for cattle forced ranchers to sell off livestock. This drought has also contributed to the increased potential for severe wildfires.", "Event ID": "10013"}, {"Disaster": "Hurricane Maria (September 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/19/2017", "Ending Date": "9/21/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 91800.0, "Deaths": 2981, "Description": "Category 4 hurricane made landfall in southeast Puerto Rico after striking the U.S. Virgin Island of St. Croix. Maria's high winds caused widespread devastation to Puerto Rico's transportation, agriculture, communication and energy infrastructure. Extreme rainfall up to 37 inches caused widespread flooding and mudslides across the island. The interruption to commerce and standard living conditions will be sustained for a long period, as much of Puerto Rico's infrastructure is rebuilt. Maria tied Hurricane Wilma (2005) for the most rapid intensification, strengthening from tropical depression to a category 5 storm in 54 hours. Maria's landfall at Category 4 strength gives the U.S. a record three Category 4+ landfalls this year (Maria, Harvey, and Irma). Maria was one of the deadliest storms to impact the U.S., with numerous indirect deaths in the wake of the storm's devastation.", "Event ID": "10014"}, {"Disaster": "Hurricane Irma (September 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/6/2017", "Ending Date": "9/12/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 50974.5, "Deaths": 97, "Description": "Category 4 hurricane made landfall at Cudjoe Key, Florida after devastating the U.S. Virgin Islands - St John and St Thomas - as a category 5 storm. The Florida Keys were heavily impacted, as 25% of buildings were destroyed while 65% were significantly damaged. Severe wind and storm surge damage also occurred along the coasts of Florida and South Carolina. Jacksonville, FL and Charleston, SC received near-historic levels of storm surge causing significant coastal flooding. Irma maintained a maximum sustained wind of 185 mph for 37 hours, the longest in the satellite era. Irma also was a category 5 storm for longer than all other Atlantic hurricanes except Ivan in 2004.", "Event ID": "10015"}, {"Disaster": "Hurricane Harvey (August 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/25/2017", "Ending Date": "8/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 127500.0, "Deaths": 89, "Description": "Category 4 hurricane made landfall near Rockport, Texas causing widespread damage. Harvey's devastation was most pronounced due to the large region of extreme rainfall producing historic flooding across Houston and surrounding areas. More than 30 inches of rainfall fell on 6.9 million people, while 1.25 million experienced over 45 inches and 11,000 had over 50 inches, based on 7-day rainfall totals ending August 31. This historic U.S. rainfall caused massive flooding that displaced over 30,000 people and damaged or destroyed over 200,000 homes and businesses.", "Event ID": "10016"}, {"Disaster": "Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/27/2017", "Ending Date": "6/29/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1453.5, "Deaths": 0, "Description": "Severe hail and high wind damage impacting Nebraska, Illinois and Iowa. More than one dozen tornadoes touched down across parts of Iowa, in addition to other storm damage.", "Event ID": "10017"}, {"Disaster": "Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/12/2017", "Ending Date": "6/16/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1569.3, "Deaths": 0, "Description": "Severe hail, high winds and numerous tornadoes impact many states over several days including WY, TX, NE, KS, MO, IA, IL, PA, VA, NY.", "Event ID": "10018"}, {"Disaster": "Minnesota Hail Storm and Upper Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/9/2017", "Ending Date": "6/11/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2444.0, "Deaths": 0, "Description": "Severe hail and high winds cause considerable damage across Minnesota and Wisconsin. The Minneapolis metro area in particular was damaged from large, destructive hail impacting many buildings and vehicles. This damage is comparable to the May 15, 1998 Minnesota hail storm that was also very costly.", "Event ID": "10019"}, {"Disaster": "Colorado Hail Storm and Central Severe Weather (May 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "5/8/2017", "Ending Date": "5/11/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 3484.0, "Deaths": 0, "Description": "Hail storm and wind damage impacting several states including CO, OK, TX, NM, MO. The most costly impacts were in the Denver metro region where baseball-sized hail caused the most expensive hail storm in Colorado history, with insured losses exceeding 2.2 (2.3) billion.", "Event ID": "10020"}, {"Disaster": "Missouri and Arkansas Flooding and Central Severe Weather (May 2017)", "Disaster Type": "Flooding", "Beginning Date": "4/25/2017", "Ending Date": "5/7/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1725.4, "Deaths": 20, "Description": "A period of heavy rainfall up to 15 inches over a multi-state region in the Midwest caused historic levels of flooding along many rivers. The flooding was most severe in Missouri, Arkansas and southern Illinois where levees were breached and towns were flooded. There was widespread damage to homes, businesses, infrastructure and agriculture. Severe storms also caused additional impacts during the flooding event across a number of central and southern states.", "Event ID": "10021"}, {"Disaster": "South/Southeast Severe Weather (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "3/26/2017", "Ending Date": "3/28/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2802.8, "Deaths": 0, "Description": "Large hail and high winds in Texas north of the Dallas metro region caused widespread damage to structures and vehicles. Severe storms also caused damage across several other states (OK, TN, KY, MS, AL) due to the combination of high winds, hail and tornadoes.", "Event ID": "10022"}, {"Disaster": "Southeast Freeze (March 2017)", "Disaster Type": "Freeze", "Beginning Date": "3/14/2017", "Ending Date": "3/16/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1040.0, "Deaths": 0, "Description": "Severe freeze heavily damaged fruit crops across several southeastern states (SC, GA, NC, TN, AL, MS, FL, KY, VA). Mid-March freezes are not climatologically unusual in the Southeast, however many crops were blooming 3+ weeks early due to unusually warm temperatures during the preceding weeks. Damage was most severe in Georgia and South Carolina. Crops most impacted include peaches, blueberries, strawberries and apples, among others.", "Event ID": "10023"}, {"Disaster": "Midwest Tornado Outbreak (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "3/6/2017", "Ending Date": "3/8/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2263.0, "Deaths": 2, "Description": "Tornado outbreak and wind damage across many Midwestern states (AR, IA, IL, KS, MI, MN, MO, NE, NY, OH, WI). Missouri and Illinois were impacted by numerous tornadoes while Michigan and New York were affected by destructive, straight-line winds following the storm system. Nearly one million customers lost power in Michigan alone due to sustained high winds, which affected several states from Illinois to New York.", "Event ID": "10024"}, {"Disaster": "Central/Southeast Tornado Outbreak (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "2/28/2017", "Ending Date": "3/1/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1878.1, "Deaths": 6, "Description": "Over 70 tornadoes developed during a widespread outbreak across many central and southern states causing significant damage. There was also widespread straight-line wind and hail damage. This was the second largest tornado outbreak to occur early in 2017.", "Event ID": "10025"}, {"Disaster": "California Flooding (February 2017)", "Disaster Type": "Flooding", "Beginning Date": "2/8/2017", "Ending Date": "2/22/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1560.0, "Deaths": 5, "Description": "Heavy, persistent rainfall across northern and central California created substantial property and infrastructure damage from flooding, landslides and erosion. Notable impacts include severe damage to the Oroville Dam spillway, which caused a multi-day evacuation of 188,000 residents downstream. Excessive rainfall also caused flood damage in the city of San Jose, as Coyote Creek overflowed its banks and inundated neighborhoods forcing 14,000 residents to evacuate.", "Event ID": "10026"}, {"Disaster": "Southern Tornado Outbreak and Western Storms (January 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "1/20/2017", "Ending Date": "1/22/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1149.2, "Deaths": 24, "Description": "High wind damage occurred across southern California near San Diego followed by 79 confirmed tornadoes during an outbreak across many southern states including AL, FL, GA, LA, MS, SC and TX. This was the 3rd most tornadoes to occur in a single outbreak during a winter month (Dec.-Feb.) for records going back to 1950.", "Event ID": "10027"}, {"Disaster": "Western/Southeast Wildfires (Summer-Fall 2016)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2016", "Ending Date": "12/31/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2538.7, "Deaths": 21, "Description": "Western and Southern states experienced an active wildfire season with over 5.0 million acres burned nationally. Most notable was the firestorm that impacted Gatlinburg, Tennessee with hurricane-force wind gusts in extremely dry conditions creating volatile wildfire behavior. These wildfires destroyed nearly 2,500 structures and caused 14 fatalities. The drought conditions in many areas of the Southeast and California worsened the wildfire potential.", "Event ID": "10028"}, {"Disaster": "West/Northeast/Southeast Drought (2016)", "Disaster Type": "Drought", "Beginning Date": "1/1/2016", "Ending Date": "12/31/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 3660.2, "Deaths": 0, "Description": "California's 5-year drought persisted during 2016 while new areas of extreme drought developed in states across the Northeast and Southeast. The long-term impacts of the drought in California have damaged forests where 100+ million trees have perished and are a public safety hazard. The agricultural impacts were reduced in California as water prices and crop fallowing declined. However, agricultural impacts developed in Northeast and Southeast due to stressed water supplies.", "Event ID": "10029"}, {"Disaster": "Hurricane Matthew (October 2016)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/8/2016", "Ending Date": "10/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 10600.0, "Deaths": 49, "Description": "Hurricane Matthew paralleled the Southeast coast from Florida to North Carolina causing widespread damage from wind, storm surge and inland flooding. The most costly impacts were due to historic levels of river flooding in eastern North Carolina where 100,000 homes, businesses and other structures were damaged. This inland flooding was comparable to Hurricane Floyd (1999) that also impacted eastern North Carolina. Matthew narrowly missed landall on Florida's east coast as a powerful category 4 storm.", "Event ID": "10030"}, {"Disaster": "Louisiana Flooding (August 2016)", "Disaster Type": "Flooding", "Beginning Date": "8/12/2016", "Ending Date": "8/15/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 10600.0, "Deaths": 13, "Description": "A historic flood devastated a large area of southern Louisiana resulting from 20 to 30 inches of rainfall over several days. Watson, Louisiana received an astounding 31.39 inches of rain from the storm. Two-day rainfall totals in the hardest hit areas have a 0.2% chance of occurring in any given year: a 1 in 500 year event. More than 30,000 people were rescued from the floodwaters that damaged or destroyed over 50,000 homes, 100,000 vehicles and 20,000 businesses. This is the most damaging U.S. flood event since Superstorm Sandy impacted the Northeast in 2012.", "Event ID": "10031"}, {"Disaster": "Rockies and Northeast Severe Weather (July 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "7/28/2016", "Ending Date": "7/30/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1553.6, "Deaths": 0, "Description": "Severe storms across the Rockies and Northeastern states (CO, WY, VA, MD, PA, NJ, NY) caused large hail and high wind damage. Storm damage in Colorado was the most costly due to hail.", "Event ID": "10032"}, {"Disaster": "West Virginia Flooding and Ohio Valley Tornadoes (June 2016)", "Disaster Type": "Flooding", "Beginning Date": "6/22/2016", "Ending Date": "6/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1027.1, "Deaths": 23, "Description": "Torrential rainfall caused destructive flooding through many West Virginia towns, damaging thousands of homes and businesses and causing considerable loss of life. Over 1,500 roads and bridges were damaged or destroyed making the impact on infrastructure comparable to the historic 2013 Colorado flood. The storm system also produced numerous tornadoes causing damage across several Ohio Valley states.", "Event ID": "10033"}, {"Disaster": "Rockies/Central Tornadoes and Severe Weather (May 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "5/21/2016", "Ending Date": "5/26/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1215.0, "Deaths": 0, "Description": "Sustained period of severe thunderstorms and tornadoes affecting several states including Montana, Colorado, Kansas, Missouri and Texas. The most concentrated days for tornado development were on May 22 and 24. Additional damage was created by straight-line high wind and hail damage.", "Event ID": "10034"}, {"Disaster": "Plains Tornadoes and Central Severe Weather (May 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "5/8/2016", "Ending Date": "5/11/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1823.0, "Deaths": 2, "Description": "Tornadoes and severe storms cause widespread damage across the Plains and Central states (NE, MO, TX, OK, KS, CO, IL, KY, TN) over a multi-day period. The damage from tornadoes and high wind was most costly in Nebraska and Missouri.", "Event ID": "10035"}, {"Disaster": "South/Southeast Tornadoes (April 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "4/26/2016", "Ending Date": "5/2/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2538.1, "Deaths": 6, "Description": "Large outbreak of tornadoes affects numerous states across the South and Southeast. Additional damage also from large hail and straight-line wind during the multi-day thunderstorm event.", "Event ID": "10036"}, {"Disaster": "Houston Flooding (April 2016)", "Disaster Type": "Flooding", "Beginning Date": "4/17/2016", "Ending Date": "4/18/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2836.6, "Deaths": 8, "Description": "A period of extreme rainfall up to 17 inches created widespread urban flooding in Houston and surrounding suburbs. Thousands of homes and businesses were damaged and more than 1,800 high water rescues were conducted. This represents the most widespread flooding event to affect Houston since Tropical Storm Allison in 2001.", "Event ID": "10037"}, {"Disaster": "North/Central Texas Hail Storm (April 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "4/10/2016", "Ending Date": "4/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 3708.5, "Deaths": 0, "Description": "Widespread severe hail damage across north and central Texas including the cities of Plano, Wylie, Frisco, Allen and San Antonio. The damage in San Antonio was particularly severe as the National Weather Service verified reports of hail size reaching 4.5 inches in diameter. This ranks as one of the most costly hail events to affect the United States.", "Event ID": "10038"}, {"Disaster": "North Texas Hail Storm (March 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "3/23/2016", "Ending Date": "3/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2188.7, "Deaths": 0, "Description": "Large hail and strong winds caused considerable damage in heavily populated areas of north Texas. This damage was most notable in the cities of Dallas, Fort Worth and Plano.", "Event ID": "10039"}, {"Disaster": "Southern Severe Weather (March 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "3/17/2016", "Ending Date": "3/18/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1282.9, "Deaths": 1, "Description": "Severe hail impacts the Fort Worth and Arlington metro region in Texas. Additional large hail and high wind damage occurred in other locations of Texas, Louisiana and Mississippi.", "Event ID": "10040"}, {"Disaster": "Texas and Louisiana Flooding (March 2016)", "Disaster Type": "Flooding", "Beginning Date": "3/8/2016", "Ending Date": "3/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2432.5, "Deaths": 5, "Description": "Multiple days of heavy rainfall averaging 15 to 20 inches led to widespread flooding along the Sabine River basin on the Texas and Louisiana border. This prompted numerous evacuations, high-water rescues and destruction, as more than 1,000 homes and businesses were damaged or destroyed.", "Event ID": "10041"}, {"Disaster": "Southeast and Eastern Tornadoes (February 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "2/22/2016", "Ending Date": "2/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1102.3, "Deaths": 10, "Description": "Early outbreak of tornadoes and severe weather across many southern and eastern states including (AL, CT, FL, GA, LA, MA, MD, MS, NC, NJ, NY, PA, SC, TX, VA). There were at least 50 confirmed tornadoes causing widespread damage.", "Event ID": "10042"}, {"Disaster": "Western Drought (2015)", "Disaster Type": "Drought", "Beginning Date": "1/1/2015", "Ending Date": "12/31/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 4823.3, "Deaths": 0, "Description": "Drought conditions were present across numerous western states (CA, NV, OR, WA, ID, MT, UT, AZ) with the most severe conditions continuing to plague California for all of 2015. The agriculture sector was again impacted by a lack of rainfall resulting in hundreds of thousands of acres of farmland remaining fallow and requiring excess groundwater pumping to irrigate existing agriculture interests. Wildfire conditions were further enhanced by the ongoing drought. California experienced extensive damage from both drought and wildfire impacts. Drought conditions did improve dramatically across Texas and Oklahoma, in the form of several major flood events.", "Event ID": "10043"}, {"Disaster": "Texas Tornadoes and Midwest Flooding (December 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "12/26/2015", "Ending Date": "12/29/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2118.8, "Deaths": 50, "Description": "A powerful storm system packing unseasonably strong tornadoes caused widespread destruction in the Dallas metropolitan region, damaging well over 1,000 homes and businesses. This same potent system also produced intense rainfall over several Midwestern states triggering historic flooding that has approached or broken records at river gauges in several states (MO, IL, AR, TN, MS, LA). The flooding has overtopped levees and caused damage in numerous areas. This historic storm also produced high wind, snow and ice impacts from New Mexico through the Midwest and into New England. Overall, the storm caused at least 50 deaths from the combined impact of tornadoes, flooding and winter weather.", "Event ID": "10044"}, {"Disaster": "Western and Alaskan Wildfires (Summer-Fall 2015)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2015", "Ending Date": "11/30/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 3248.7, "Deaths": 12, "Description": "Wildfires burned over 10.1 million acres across the U.S. in 2015, surpassing 2006 for the highest annual total of U.S. acreage burned since record-keeping began in 1960. The most costly wildfires occurred in California where over 2,500 structures were destroyed due to the Valley and Butte wildfires with the insured losses alone exceeding 1.0 (1.1) billion. The most extensive wildfires occurred in Alaska where over 5 million acres burned within the state. There was extensive burnt acreage across other western states, most notably (OR, WA, ID, MT, ND, CO, WY, TX).", "Event ID": "10045"}, {"Disaster": "South Carolina and East Coast Flooding (October 2015)", "Disaster Type": "Flooding", "Beginning Date": "10/1/2015", "Ending Date": "10/5/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2158.1, "Deaths": 25, "Description": "Historic levels of flooding impacted South Carolina causing widespread damage to many homes, businesses, public buildings and infrastructure. This interrupted commerce and closed major transportation corridors (such as I-95) for weeks as rivers slowly receded. Locally extreme rainfall totals exceeding 20-inches were common resulting from the convergence of a powerful low pressure system / frontal boundary and copious moisture from Hurricane Joaquin in the Atlantic.", "Event ID": "10046"}, {"Disaster": "Central and Northeast Severe Weather (June 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "6/21/2015", "Ending Date": "6/25/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1265.7, "Deaths": 1, "Description": "Severe storms across numerous Central and Northeast states (CO, CT, IA, IL, MD, MI, NJ, NY, PA, SD, VA, WI) with widespread hail and high wind damage.", "Event ID": "10047"}, {"Disaster": "Texas and Oklahoma Flooding and Severe Weather (May 2015)", "Disaster Type": "Flooding", "Beginning Date": "5/23/2015", "Ending Date": "5/26/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2700.6, "Deaths": 31, "Description": "A slow-moving system caused tremendous rainfall and subsequent flooding to occur in Texas and Oklahoma. The Blanco river in Texas swelled from 5 feet to a crest of more than 40 feet over several hours causing considerable property damage and loss of life. The city of Houston also experienced flooding which resulted in hundreds of high-water rescues. The damage in Texas alone exceeded 1.0 (1.1) billion. There was also damage in other states (KS, CO, AR, OH, LA, GA, SC) from associated severe storms.", "Event ID": "10048"}, {"Disaster": "Southern Plains Tornadoes (May 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "5/6/2015", "Ending Date": "5/10/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1373.9, "Deaths": 4, "Description": "Tornado outbreak across the Southern Plain states (IA, KS, NE, OK, CO, SD, TX) with 122 tornadoes. The most costly damage occurred across Texas and Oklahoma.", "Event ID": "10049"}, {"Disaster": "South/Southeast Severe Weather (April 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "4/18/2015", "Ending Date": "4/20/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1386.4, "Deaths": 0, "Description": "Severe storms across the South and Southeastern states (AL, AR, FL, GA, KS, LA, MS, NC, OK, SC, TN, TX). High winds and severe hail created the most significant damage in Texas.", "Event ID": "10050"}, {"Disaster": "Midwest/Ohio Valley Severe Weather (April 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "4/7/2015", "Ending Date": "4/9/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1680.2, "Deaths": 2, "Description": "Severe storms across the Midwest and Ohio Valley including the states (AR, IA, IL, IN, KS, KY, MI, MO, NC, OH, OK, PA, TN, TX, WI, WV). Large hail and high winds created the most damage across Missouri and Illinois.", "Event ID": "10051"}, {"Disaster": "Central and Eastern Winter storm, Cold Wave (February 2015)", "Disaster Type": "Winter Storm", "Beginning Date": "2/14/2015", "Ending Date": "2/20/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 3199.2, "Deaths": 30, "Description": "A large winter storm and associated cold wave impacted many central, eastern and northeastern states (CT, DE, GA, IL, KY, MA, MD, ME, MI, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA). The city of Boston was particularly impacted as feet of snow continued to accumulate causing load-stress on buildings and clogging transportation corridors. Total, direct losses in Massachusetts alone exceed 1.0 (1.1) billion for this event, with considerable damage in many other states.", "Event ID": "10052"}, {"Disaster": "Western Drought (2014)", "Disaster Type": "Drought", "Beginning Date": "1/1/2014", "Ending Date": "12/31/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 4287.6, "Deaths": 0, "Description": "Historic drought conditions affected the majority of California for all of 2014 making it the worst drought on record for the state. Surrounding states and parts of Texas, Oklahoma and Kansas also experienced continued severe drought conditions. This is a continuation of drought conditions that have persisted for several years.", "Event ID": "10053"}, {"Disaster": "Rockies/Plains Severe Weather (September 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "9/29/2014", "Ending Date": "10/2/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1512.5, "Deaths": 0, "Description": "Severe storms across the Rockies and Plains states (CO, KS, TX). Large hail and high winds created significant damage across eastern Colorado and Texas, particularly in the Dallas metro area.", "Event ID": "10054"}, {"Disaster": "Michigan and Northeast Flooding (August 2014)", "Disaster Type": "Flooding", "Beginning Date": "8/11/2014", "Ending Date": "8/13/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1114.3, "Deaths": 2, "Description": "Heavy rainfall in excess of 5 inches caused significant flooding in cities across Michigan damaging thousands of cars, business, homes and other infrastructure. Flooding also occurred across Maryland and New York's Long Island, as the slow-moving storm system delivered 24-hour rainfall exceeding 6 and 12 inches, respectively, creating more flood damage. Islip, NY received 13.57 inches of rain over a 24-hour period on Aug 12-13 setting a new 24-hour precipitation record for New York.", "Event ID": "10055"}, {"Disaster": "Rockies/Central Plains Severe Weather (June 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "6/3/2014", "Ending Date": "6/5/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 2072.8, "Deaths": 2, "Description": "Severe storms across the Rockies and Central Plains states (NE, KS, WY, IA, AR). Wind gusts exceeding 90 mph and baseball to softball sized hail caused severe damage to structures and vehicles in central and eastern Nebraska.", "Event ID": "10056"}, {"Disaster": "Rockies/Midwest/Eastern Severe Weather (May 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "5/18/2014", "Ending Date": "5/23/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 4010.2, "Deaths": 0, "Description": "Severe storms across the Rockies, Midwest and Eastern states (CO, MT, IA, IL, IN, OH, SC, VA, PA, DE, NY) with the most costly damage in Colorado, Illinois and Pennsylvania.", "Event ID": "10057"}, {"Disaster": "Midwest/Southeast/Northeast Tornadoes and Flooding (April 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "4/27/2014", "Ending Date": "5/1/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1875.1, "Deaths": 33, "Description": "Tornado outbreak across the Midwest, Southeast and Northeast states (AL, AR, DE, FL, GA, KS, MD, MO, MS, NC, NJ, NY, PA, TN, VA) with 83 confirmed tornadoes. Mississippi had its 3rd greatest number of tornadoes reported for any day since 1950. Torrential rainfall in the Florida panhandle also caused major flooding, as Pensacola set new 1-day and 2-day precipitation records of 15.55 and 20.47 inches, respectively. Flooding rains were also reported in coastal Alabama, as Mobile received 11.24 inches of rain, the third greatest calendar day rainfall total for the city.", "Event ID": "10058"}, {"Disaster": "Plains Severe Weather (April 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/2014", "Ending Date": "4/3/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1537.9, "Deaths": 0, "Description": "Severe storms across the Plains states (IL, KS, MO, TX) causing considerable hail and wind damage in Texas.", "Event ID": "10059"}, {"Disaster": "Midwest/Southeast/Northeast Winter Storm (January 2014)", "Disaster Type": "Winter Storm", "Beginning Date": "1/5/2014", "Ending Date": "1/8/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 2346.5, "Deaths": 16, "Description": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "Event ID": "10060"}, {"Disaster": "Western/Plains Drought/Heatwave (Spring-Fall 2013)", "Disaster Type": "Drought", "Beginning Date": "3/1/2013", "Ending Date": "11/30/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 11364.1, "Deaths": 53, "Description": "The 2013 drought slowly dissipated from the historic levels of the 2012 drought, as conditions improved across many Midwestern and Plains states. However, moderate to extreme drought did remain or expand into western states (AZ, CA, CO, IA, ID, IL, KS, MI, MN, MO, ND, NE, NM, NV, OK, OR, SD, TX, UT, WA, WI, WY). In comparison to 2011 and 2012 drought conditions the US experienced only moderate crop losses across the central agriculture states.", "Event ID": "10061"}, {"Disaster": "Ohio Valley Tornadoes (November 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "11/17/2013", "Ending Date": "11/17/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1188.9, "Deaths": 8, "Description": "Late-season outbreak of tornadoes and severe weather over the Ohio Valley (IL, IN, KY, MI, MO, OH) with 70 confirmed tornadoes. Most severe impacts occurred across Illinois and Indiana.", "Event ID": "10062"}, {"Disaster": "Colorado Flooding (September 2013)", "Disaster Type": "Flooding", "Beginning Date": "9/10/2013", "Ending Date": "9/16/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1644.3, "Deaths": 9, "Description": "A stalled frontal boundary over Colorado led to record rainfall, as some areas received > 15 inches over several days. This resulted in historic flooding across numerous cities and towns. Destruction of residences, businesses and transportation infrastructure was widespread.", "Event ID": "10063"}, {"Disaster": "Midwest Severe Weather (August 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "8/6/2013", "Ending Date": "8/7/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1135.8, "Deaths": 0, "Description": "Severe weather and large hail causes considerable damage across Minnesota and Wisconsin.", "Event ID": "10064"}, {"Disaster": "Midwest/Plains/Northeast Tornadoes (May 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "5/27/2013", "Ending Date": "5/31/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1976.7, "Deaths": 10, "Description": "Outbreak of tornadoes and severe weather over the Midwest, Plains and Northeast (IL, IN, KS, MO, NY, OK, TX) with 92 confirmed tornadoes including the deadly tornado that struck El Reno, OK. There was also significant damage resulting from hail and straight-line wind.", "Event ID": "10065"}, {"Disaster": "Midwest/Plains/East Tornadoes (May 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "5/18/2013", "Ending Date": "5/22/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 2616.3, "Deaths": 27, "Description": "Outbreak of tornadoes and severe weather over the Midwest, Plains and Eastern states (GA, IA, IL, KS, MO, NY, OK, TX) with 59 confirmed tornadoes including the deadly tornado that impacted Moore, OK. Many destructive tornadoes remained on the ground for an extended time.", "Event ID": "10066"}, {"Disaster": "Illinois Flooding and Severe Weather (April 2013)", "Disaster Type": "Flooding", "Beginning Date": "4/16/2013", "Ending Date": "4/19/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1174.0, "Deaths": 4, "Description": "A slow-moving storm system created rainfall totals of 5 to 10 inches across northern and central Illinois including the Chicago metro. This resulted in damage to many homes and businesses. There was also severe weather damage from wind and hail across Indiana and Missouri.", "Event ID": "10067"}, {"Disaster": "Midwest/Plains Severe Weather (April 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "4/7/2013", "Ending Date": "4/11/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1574.0, "Deaths": 1, "Description": "Severe weather across the Midwest and Plains states (IN, KS, MO, NE) with a total of 26 confirmed tornadoes. Considerable damage resulting from hail and straight-line wind.", "Event ID": "10068"}, {"Disaster": "Southeast Severe Weather (March 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "3/18/2013", "Ending Date": "3/18/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 2201.8, "Deaths": 1, "Description": "Severe weather over the Southeast (MS, AL, GA, TN) with 10 confirmed tornadoes. Considerable damage resulting from large hail and straight-line wind.", "Event ID": "10069"}, {"Disaster": "U.S. Drought/Heatwave (2012)", "Disaster Type": "Drought", "Beginning Date": "1/1/2012", "Ending Date": "12/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 33304.2, "Deaths": 123, "Description": "The 2012 drought is the most extensive drought to affect the U.S. since the 1930s. Moderate to extreme drought conditions affected more than half the country for a majority of 2012. The following states were affected: CA, NV, ID, MT, WY, UT, CO, AZ, NM, TX, ND, SD, NE, KS, OK, AR, MO, IA, MN, IL, IN, GA. Costly drought impacts occurred across the central agriculture states resulting in widespread harvest failure for corn, sorghum and soybean crops, among others. The associated summer heatwave also caused 123 direct deaths, but an estimate of the excess mortality due to heat stress is still unknown.", "Event ID": "10070"}, {"Disaster": "Western Wildfires (Summer-Fall 2012)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2012", "Ending Date": "11/30/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1929.7, "Deaths": 8, "Description": "Wildfires burned over 9.2 million acres across the U.S. in 2012. This is the 3rd highest annual total since the year 2000. The most damaging wildfires occurred in the western states (CO, ID, WY, MT, CA, NV, OR, WA). Colorado experienced the most costly wildfires (e.g., Waldo Canyon fire) where several hundred residences were destroyed.", "Event ID": "10071"}, {"Disaster": "Hurricane Sandy (October 2012)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/30/2012", "Ending Date": "10/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 72193.8, "Deaths": 159, "Description": "Extensive damage across several northeastern states (MD, DE, NJ, NY, CT, MA, RI) due to high wind and coastal storm surge, particularly NY and NJ. Damage from wind, rain and heavy snow also extended more broadly to other states (NC, VA, WV, OH, PA, NH), as Sandy merged with a developing Nor'easter. Sandy's impact on major population centers caused widespread interruption to critical water / electrical services and also caused 159 deaths (72 direct, 87 indirect). Sandy also caused the New York Stock Exchange to close for two consecutive business days, which last happened in 1888 due to a major winter storm.", "Event ID": "10072"}, {"Disaster": "Hurricane Isaac (August 2012)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/26/2012", "Ending Date": "8/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3067.6, "Deaths": 9, "Description": "Category 1 hurricane made landfall over Louisiana. Isaac's slow motion and large size led to a large storm surge and flooding rains. This created damage across several southeastern states (LA, MS, AL, FL) including 9 deaths (5 direct, 4 indirect).", "Event ID": "10073"}, {"Disaster": "Plains/East/Northeast Severe Weather (June-July 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "6/29/2012", "Ending Date": "7/2/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3206.2, "Deaths": 28, "Description": "Sustained outbreak of thunderstorms / high winds from a strong derecho event over the central, eastern, and northeastern states (IL, IN, KY, OH, WV, SC, NC, VA, MD, DC, NJ).", "Event ID": "10074"}, {"Disaster": "Rockies/Southwest Severe Weather (June 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2012", "Ending Date": "6/12/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 2883.5, "Deaths": 0, "Description": "Severe storms and damaging hail over several states (CO, NM, TX) with 25 confirmed tornadoes. Colorado experienced over 1.0 (1.1) billion in damage due to hail.", "Event ID": "10075"}, {"Disaster": "Southern Plains/Midwest/Northeast Severe Weather (May 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "5/25/2012", "Ending Date": "5/30/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 2557.0, "Deaths": 1, "Description": "Severe storms over the southern plains, midwest and northeast (TX, OK, KS, MN, PA, NY) with 27 confirmed tornadoes. Significant damage also from severe hail and straight-line winds.", "Event ID": "10076"}, {"Disaster": "Midwest/Ohio Valley Severe Weather (April-May 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/28/2012", "Ending Date": "5/1/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3636.6, "Deaths": 1, "Description": "Severe weather over the midwest and Ohio Valley (TX, OK, KS, MO, IL, IN, KY) with 38 confirmed tornadoes. Considerable damage resulting from hail.", "Event ID": "10077"}, {"Disaster": "Midwest Tornadoes (April 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2012", "Ending Date": "4/14/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1247.2, "Deaths": 6, "Description": "Outbreak of tornadoes and severe weather over the midwest (OK, KS, NE, IA) with 98 confirmed tornadoes including many tornadoes that remained on the ground for an extended time - traveling tens of miles.", "Event ID": "10078"}, {"Disaster": "Texas Tornadoes (April 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/2012", "Ending Date": "4/3/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1126.9, "Deaths": 0, "Description": "Outbreak of tornadoes across the greater Dallas-Ft. Worth metropolitan area. Several moderate strength tornadoes (EF-2 and EF-3) affected towns in this area with a total of 22 confirmed tornadoes.", "Event ID": "10079"}, {"Disaster": "Southeast/Ohio Valley Tornadoes (March 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "3/2/2012", "Ending Date": "3/3/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3473.0, "Deaths": 42, "Description": "Outbreak of tornadoes and severe weather over the southeast and Ohio Valley (AL, GA, IN, OH, KY, TN) with 75 confirmed tornadoes.", "Event ID": "10080"}, {"Disaster": "Texas, New Mexico, Arizona Wildfires (Summer-Fall 2011)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2011", "Ending Date": "11/30/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2075.7, "Deaths": 5, "Description": "Continued drought conditions and periods of extreme heat provided conditions favorable for a series of historic wildfires across Texas, New Mexico and Arizona. The Bastrop Fire in Texas was the most destructive fire in Texas history destroying over 1,500 homes. The Wallow Fire consumed over 500,000 acres in Arizona making it the largest on record in Arizona. The Las Conchas Fire in New Mexico was also the state's largest wildfire on record scorching over 150,000 acres while threatening the Los Alamos National Laboratory. Over 3 million acres have burned across Texas this wildfire season.", "Event ID": "10081"}, {"Disaster": "Tropical Storm Lee (September 2011)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/1/2011", "Ending Date": "9/5/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2864.3, "Deaths": 21, "Description": "Wind and flood damage across the southeast (LA, MS, AL, GA, TN) but considerably more damage from record flooding across the northeast (PA, NY, NJ, CT, VA, MD). Pennsylvania and New York were most affected.", "Event ID": "10082"}, {"Disaster": "Southern Plains/Southwest Drought & Heat Wave (Spring-Summer 2011)", "Disaster Type": "Drought", "Beginning Date": "3/1/2011", "Ending Date": "8/31/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 13684.3, "Deaths": 95, "Description": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "Event ID": "10083"}, {"Disaster": "Hurricane Irene (August 2011)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/26/2011", "Ending Date": "8/28/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 15383.3, "Deaths": 45, "Description": "Category 1 hurricane made landfall over coastal NC and moved northward along the Mid-Atlantic Coast (NC, VA, MD, NJ, NY, CT, RI, MA, VT) causing torrential rainfall and flooding across the Northeast. Wind damage in coastal NC, VA, and MD was moderate with considerable damage resulting from falling trees and power lines, while flooding caused extensive flood damage across NJ, NY, and VT. Over seven million homes and businesses lost power during the storm. Numerous tornadoes were also reported in several states further adding to the damage.", "Event ID": "10084"}, {"Disaster": "Midwest/Southeast Severe Weather (August 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "8/17/2011", "Ending Date": "8/18/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1312.7, "Deaths": 0, "Description": "Severe weather impacts the states IA, KS, MO, NE, SD across the Midwest and Southeast.", "Event ID": "10085"}, {"Disaster": "Rockies and Midwest Severe Weather (July 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "7/10/2011", "Ending Date": "7/14/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1396.6, "Deaths": 2, "Description": "An outbreak of tornadoes, hail, and high wind caused damage east of the Rockies and across the central plains (CO, WY, IA, IL, MI, MN, OH).", "Event ID": "10086"}, {"Disaster": "Missouri River flooding (May-June 2011)", "Disaster Type": "Flooding", "Beginning Date": "5/1/2011", "Ending Date": "6/30/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2282.5, "Deaths": 5, "Description": "Melting of an above-average snow pack across the Northern Rocky Mountains combined with above-average precipitation caused the Missouri and Souris Rivers to swell beyond their banks across the Upper Midwest (MT, ND, SD, NE, IA, KS, MO). An estimated 11,000 people were forced to evacuate Minot, North Dakota due to the record high water level of the Souris River, where 4,000 homes were flooded. Numerous levees were breached along the Missouri River, flooding thousands of acres of farmland.", "Event ID": "10087"}, {"Disaster": "Midwest/Southeast Tornadoes and Severe Weather (June 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "6/18/2011", "Ending Date": "6/22/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1752.6, "Deaths": 3, "Description": "Outbreak of tornadoes over central states (OK, TX, KS, NE, MO, IA, IL) with an estimated 81 tornadoes. Additional wind and hail damage across the Southeast (TN, GA, NC, SC).", "Event ID": "10088"}, {"Disaster": "Mississippi River flooding (April-May 2011)", "Disaster Type": "Flooding", "Beginning Date": "4/1/2011", "Ending Date": "5/31/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 3404.2, "Deaths": 7, "Description": "Persistent rainfall (nearly 300 percent normal precipitation amounts in the Ohio Valley) combined with melting snowpack caused historical flooding along the Mississippi River and its tributaries. Examples of economic damage include: 500 (570.0) million to agriculture in Arkansas; 320 (364.8) million in damage to Memphis, Tennessee; 800 (912.0) million to agriculture in Mississippi; 317 (361.4) million to agriculture and property in Missouri's Birds Point-New Madrid Spillway; 80 (91.2) million for the first 30 days of flood fighting efforts in Louisiana.", "Event ID": "10089"}, {"Disaster": "Midwest/Southeast Tornadoes (May 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "5/22/2011", "Ending Date": "5/27/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 10370.5, "Deaths": 177, "Description": "Outbreak of tornadoes over central and southern states (MO, TX, OK, KS, AR, GA, TN, VA, KY, IN, IL, OH, WI, MN, PA) with an estimated 180 tornadoes. Notably, an EF-5 tornado struck Joplin, MO resulting in at least 160 deaths, making it the deadliest single tornado to strike the U.S. since modern tornado record keeping began in 1950.", "Event ID": "10090"}, {"Disaster": "Southeast/Ohio Valley/Midwest Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/25/2011", "Ending Date": "4/28/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 11653.3, "Deaths": 321, "Description": "Outbreak of tornadoes over central and southern states (AL, AR, LA, MS, GA, TN, VA, KY, IL, MO, OH, TX, OK) with an estimated 343 tornadoes. The deadliest tornado of the outbreak, an EF-5, hit northern Alabama, killing 78 people. Several major metropolitan areas were directly impacted by strong tornadoes including Tuscaloosa, Birmingham, and Huntsville in Alabama and Chattanooga, Tennessee, causing the estimated damage costs to soar.", "Event ID": "10091"}, {"Disaster": "Ohio Valley/South Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/19/2011", "Ending Date": "4/20/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1182.8, "Deaths": 0, "Description": "Dozens of tornadoes and severe storms affect the states AR, IL, IN, KY, MO, OH, TN, TX across the Ohio Valley and South.", "Event ID": "10092"}, {"Disaster": "Midwest/Southeast Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/14/2011", "Ending Date": "4/16/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2347.5, "Deaths": 38, "Description": "Outbreak of tornadoes over central and southern states (OK, TX, AR, MS, AL, GA, NC, SC, VA, PA) with an estimated 177 tornadoes.", "Event ID": "10093"}, {"Disaster": "Southeast/Midwest Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/8/2011", "Ending Date": "4/11/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2484.4, "Deaths": 0, "Description": "Outbreak of tornadoes over central and southern states (NC, SC, TN, AL, TX, OK, KS, IA, WI) with an estimated 59 tornadoes.", "Event ID": "10094"}, {"Disaster": "Midwest/Southeast Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/4/2011", "Ending Date": "4/5/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 3163.7, "Deaths": 9, "Description": "Outbreak of tornadoes over central and southern states (KS, MO, IA, IL, WI, KY, GA, TN, NC, SC) with an estimated 46 tornadoes.", "Event ID": "10095"}, {"Disaster": "Groundhog Day Blizzard (February 2011)", "Disaster Type": "Winter Storm", "Beginning Date": "2/1/2011", "Ending Date": "2/3/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2045.4, "Deaths": 36, "Description": "A large winter storm impacted many central, eastern and northeastern states. The city of Chicago was brought to a virtual standstill as between 1 and 2 feet of snow fell over the area.", "Event ID": "10096"}, {"Disaster": "Arizona Severe Weather (October 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "10/5/2010", "Ending Date": "10/6/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 4408.0, "Deaths": 0, "Description": "An unusual series of severe thunderstorms across Arizona produced numerous tornadoes and widespread, severe hail damage. Over one-hundred buildings were damaged or destroyed by tornadoes while thousands of automobiles and buildings were damaged by large hail across Phoenix and surrounding cities.", "Event ID": "10097"}, {"Disaster": "Midwest/Northeast Severe Storms and Flooding (July 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "7/20/2010", "Ending Date": "7/23/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 1100.0, "Deaths": 0, "Description": "Severe storms and flooding affect the states IA, IL, MD, NY, PA, WI across the Midwest and Northeast.", "Event ID": "10098"}, {"Disaster": "Rockies/Central/East Severe Weather (June 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "6/10/2010", "Ending Date": "6/15/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 1045.1, "Deaths": 2, "Description": "Severe storms cause high wind and hail damage across numerous states including CO, NM, KS, OK, IL, IN, GA, SC and NC.", "Event ID": "10099"}, {"Disaster": "Oklahoma, Kansas, and Texas Tornadoes and Severe Weather (May 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "5/10/2010", "Ending Date": "5/12/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 3867.2, "Deaths": 3, "Description": "An outbreak of tornadoes, hail, and severe thunderstorms occurred across Oklahoma, Kansas, and Texas in mid-May. Oklahoma was hardest hit with > 1.5 (1.7) billion in damages.", "Event ID": "10100"}, {"Disaster": "East/South Flooding and Severe Weather (May 2010)", "Disaster Type": "Flooding", "Beginning Date": "4/30/2010", "Ending Date": "5/2/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 2628.9, "Deaths": 32, "Description": "Flooding, hail, tornadoes, and severe thunderstorms occurred across many Southern states (TN, AR, AL, KY, MS, GA) on April 30-May 2. Flooding in the Nashville, TN area alone contributed > 1.0 (1.2) billion in damages. Western and Middle Tennessee were hardest hit with local rainfall amounts of 18-20 inches to the south and west of Greater Nashville.", "Event ID": "10101"}, {"Disaster": "Northeast Flooding (March 2010)", "Disaster Type": "Flooding", "Beginning Date": "3/1/2010", "Ending Date": "3/31/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 2139.3, "Deaths": 11, "Description": "Heavy rainfall over portions of the Northeast in late March caused extensive flooding across several states (RI, CT, MA, NJ, NY, PA). The event caused the worst flooding in Rhode Island's history.", "Event ID": "10102"}, {"Disaster": "Southwest/Great Plains Drought (2009)", "Disaster Type": "Drought", "Beginning Date": "1/1/2009", "Ending Date": "12/31/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 4155.4, "Deaths": 0, "Description": "Drought conditions occurred during much of the year across parts of the Southwest, Great Plains, and southern Texas causing agricultural losses in numerous states (TX, OK, KS, CA, NM, AZ). The largest agriculture losses occurred in TX and CA.", "Event ID": "10103"}, {"Disaster": "Western Wildfires (Summer-Fall 2009)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2009", "Ending Date": "11/30/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1206.6, "Deaths": 10, "Description": "\"Residual and sustained drought conditions across western and south-central states resulted in thousands of wildfires. Most affected states include CA, AZ, NM, TX, OK, and UT. National acreage burned exceeding 5.9 million. Over 200 homes and structures destroyed in the California \"\"Station\"\" fire alone.\"", "Event ID": "10104"}, {"Disaster": "Colorado Hail Storm (July 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "7/20/2009", "Ending Date": "7/20/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1190.0, "Deaths": 0, "Description": "Severe hail impacts Colorado. Jefferson County was most affected with hail at least 8 inches deep. The hail damage from this storm was comparable to the July 11, 1990 Colorado hail storm.", "Event ID": "10105"}, {"Disaster": "Midwest, South and East Severe Weather (June 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "6/9/2009", "Ending Date": "6/12/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1580.4, "Deaths": 0, "Description": "Sustained outbreak of thunderstorms and high winds from a strong derecho event over the central, southern, and eastern states (TX, OK, MO, NE, KS, AR, AL, MS, TN, NC, SC, KY, PA).", "Event ID": "10106"}, {"Disaster": "South/Southeast Severe Weather & Tornadoes (April 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "4/9/2009", "Ending Date": "4/10/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1701.8, "Deaths": 6, "Description": "Outbreak of tornadoes, hail and severe thunderstorms over the south and southeastern states (AL, AR, GA, KY, MO, SC, TN) with 85 confirmed tornadoes.", "Event ID": "10107"}, {"Disaster": "Midwest/Southeast Tornadoes (March 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "3/25/2009", "Ending Date": "3/28/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1952.3, "Deaths": 0, "Description": "Outbreak of tornadoes over central and southern states (NE, KS, OK, IA, TX, LA, MS, AL, GA, TN, KY) with 56 tornadoes confirmed.", "Event ID": "10108"}, {"Disaster": "Southeast/Ohio Valley Severe Weather (February 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "2/10/2009", "Ending Date": "2/11/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 2070.8, "Deaths": 10, "Description": "Complex of severe thunderstorms and high winds across the region (TN, KY, OK, OH, VA, WV, PA).", "Event ID": "10109"}, {"Disaster": "U.S. Drought (2008)", "Disaster Type": "Drought", "Beginning Date": "1/1/2008", "Ending Date": "12/31/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 8341.8, "Deaths": 0, "Description": "Severe drought and heat caused agricultural losses across a large portion of the U.S. Record low lake levels also occurred in areas of the southeast. The states impacted include AL, AR, CA, CO, GA, ID, IN, KS, KY, MD, MN, MS, MT, NC, ND, NJ, NM, OH, OK, OR, SC, TN, TX, UT, VA, WA and WI.", "Event ID": "10110"}, {"Disaster": "U.S. Wildfires (Fall 2008)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2008", "Ending Date": "11/30/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1468.6, "Deaths": 16, "Description": "Drought conditions across numerous western, central and southeastern states (AK, AZ, CA, NM, ID, UT, MT, NV, OR, WA, CO, TX, OK, NC, FL ) resulted in thousands of wildfires; national acreage burned exceeding 5.2 million acres (mainly in the west) and over 1,000 homes and structures destroyed in California fires alone.", "Event ID": "10111"}, {"Disaster": "Hurricane Ike (September 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/12/2008", "Ending Date": "9/14/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 35698.6, "Deaths": 112, "Description": "Category 2 hurricane makes landfall in Texas, as the largest (in size) Atlantic hurricane on record, causing considerable storm surge in coastal TX and significant wind and flooding damage in TX, LA, AR, TN, IL, IN, KY, MO, OH, MI and PA. Severe gasoline shortages occurred in the southeast U.S. due to damaged oil platforms, storage tanks, pipelines and off-line refineries.", "Event ID": "10112"}, {"Disaster": "Hurricane Gustav (September 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/31/2008", "Ending Date": "9/3/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 7136.4, "Deaths": 53, "Description": "Category 2 hurricane makes landfall in Louisiana causing significant wind, storm surge, and flooding damage in AL, AR, LA, and MS.", "Event ID": "10113"}, {"Disaster": "Hurricane Dolly (July 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/23/2008", "Ending Date": "7/25/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1508.1, "Deaths": 3, "Description": "Category 2 hurricane makes landfall in southern Texas causing considerable wind and flooding damage in TX and NM.", "Event ID": "10114"}, {"Disaster": "Midwest Flooding (Summer 2008)", "Disaster Type": "Flooding", "Beginning Date": "4/1/2008", "Ending Date": "6/30/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 11850.7, "Deaths": 24, "Description": "Heavy rain and flooding caused significant agricultural loss and property damage in IA, IL, IN, MO, MN, NE, and WI with IA being hardest hit with widespread rainfall totals ranging from 4 to over 16 inches.", "Event ID": "10115"}, {"Disaster": "Midwest/Mid-Atlantic Severe Weather (June 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2008", "Ending Date": "6/12/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1946.6, "Deaths": 18, "Description": "An outbreak of tornadoes and thunderstorms over the Midwest/Mid-Atlantic states (IA, IL, IN, KS, NE, MI, MN, MO, OK, WI, MD, VA, WV).", "Event ID": "10116"}, {"Disaster": "Midwest Tornadoes and Severe Weather (May 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "5/22/2008", "Ending Date": "5/27/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 3605.0, "Deaths": 13, "Description": "Outbreak of tornadoes over the Midwest/Ohio Valley regions (IL, IN, IA, KS, MN, NE, OK, WY, CO) with 235 tornadoes confirmed.", "Event ID": "10117"}, {"Disaster": "Southern Severe Weather (April 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "4/9/2008", "Ending Date": "4/11/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1237.2, "Deaths": 2, "Description": "Severe storms affect Arkansas, Oklahoma and Texas across the South.", "Event ID": "10118"}, {"Disaster": "Southeast Tornadoes (March 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "3/14/2008", "Ending Date": "3/15/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1345.9, "Deaths": 5, "Description": "Tornadoes and severe weather across Georgia and South Carolina. This includes an EF-2 tornado causing damage to numerous buildings in downtown Atlanta.", "Event ID": "10119"}, {"Disaster": "Southeast Tornadoes and Severe Weather (February 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "2/5/2008", "Ending Date": "2/6/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1441.8, "Deaths": 57, "Description": "Series of tornadoes and severe thunderstorms across the Southeast and Midwest states (AL, AR, IN, KY, MS, OH, TN, TX) with 87 tornadoes confirmed.", "Event ID": "10120"}, {"Disaster": "Western/Eastern Drought/Heatwave (Summer-Fall 2007)", "Disaster Type": "Drought", "Beginning Date": "6/1/2007", "Ending Date": "11/30/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 4422.9, "Deaths": 15, "Description": "Severe drought with periods of extreme heat over most of the southeast and portions of the Great Plains, Ohio Valley, and Great Lakes area, resulting in major reductions in crop yields, along with very low stream-flows and lake levels. Includes states of ND, SD, NE, KS, OK, TX, MN, WI, IA, MO, AR, LA, MS, AL, GA, NC, SC, FL, TN, VA, WV, KY, IN, IL, OH, MI, PA, NY.", "Event ID": "10121"}, {"Disaster": "Western Wildfires (Summer 2007)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2007", "Ending Date": "8/31/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 3426.6, "Deaths": 12, "Description": "Continued drought conditions and high winds over much of the western U.S. (AK, AZ, CA, ID, UT, MT, NV, OR, WA) resulting in numerous wildfires; with national acreage burned exceeding 8.9 million acres (mainly in the west) and over 3,000 homes and structures destroyed in southern California alone.", "Event ID": "10122"}, {"Disaster": "East/South Severe Weather and Flooding (April 2007)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2007", "Ending Date": "4/17/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 3135.2, "Deaths": 9, "Description": "\"Flooding, hail, tornadoes, and severe thunderstorms across numerous states (CT, DE, GA, LA, ME, MD, MA, MS, NH, NJ, NY, NC, PA, RI, SC, TX, VT, VA) in mid-April, including 3 \"\"killer\"\" tornadoes.\"", "Event ID": "10123"}, {"Disaster": "Spring Freeze (April 2007)", "Disaster Type": "Freeze", "Beginning Date": "4/4/2007", "Ending Date": "4/10/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 2555.4, "Deaths": 0, "Description": "Widespread severe freeze over much of the east and midwest (AL, AR, GA, IA, IL, IN, KS, KY, MO, MS, NC, NE, OH, OK, SC, TN, VA, WV), causing significant losses in fruit crops, field crops (especially wheat), and the ornamental industry. Temperatures in the teens/20s accompanied by rather high winds nullified typical crop-protection systems.", "Event ID": "10124"}, {"Disaster": "California Freeze (January 2007)", "Disaster Type": "Freeze", "Beginning Date": "1/11/2007", "Ending Date": "1/17/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 1750.0, "Deaths": 1, "Description": "Widespread agricultural freeze -- for nearly two weeks in January, overnight temperatures over a good portion of California dipped into the 20s, destroying numerous agricultural crops; with citrus, berry, and vegetable crops most affected.", "Event ID": "10125"}, {"Disaster": "Numerous Wildfires (2006)", "Disaster Type": "Wildfire", "Beginning Date": "1/1/2006", "Ending Date": "12/31/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1863.1, "Deaths": 28, "Description": "Numerous wildfires driven by dry weather and high winds burned over 9.8 million acres, across the western half of the country including Alaska. This is the second highest annual total behind the 10.1 million acres burned in 2015 since record-keeping began in 1960. The most affected states were AK, AZ, CA, CO, FL, ID, MT, NM, NV, OK, OR, TX, WA, WY", "Event ID": "10126"}, {"Disaster": "Central Severe Weather (October 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "10/2/2006", "Ending Date": "10/5/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1116.5, "Deaths": 1, "Description": "Severe storms cause high wind and hail damage across numerous states including OH, IL, IN, MI, MN and WI.", "Event ID": "10127"}, {"Disaster": "Midwest/Plains/Southeast Drought (Spring-Summer 2006)", "Disaster Type": "Drought", "Beginning Date": "3/1/2006", "Ending Date": "8/31/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 7617.4, "Deaths": 0, "Description": "Rather severe drought affected crops especially during the spring-summer, centered over the Great Plains region with other areas affected across portions of the south -- including states of ND, SD, NE, KS, OK, TX, MN, IA, MO, AR, LA, MS, AL, GA, FL, MT, WY, CO, NM.", "Event ID": "10128"}, {"Disaster": "Northeast Flooding (June 2006)", "Disaster Type": "Flooding", "Beginning Date": "6/25/2006", "Ending Date": "6/28/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1932.4, "Deaths": 20, "Description": "Severe flooding over portions of the northeast due to several weeks of heavy rainfall, affecting the states of NY, PA, DE, MD, NJ, and VA.", "Event ID": "10129"}, {"Disaster": "Midwest Tornadoes (April 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2006", "Ending Date": "4/16/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 3078.0, "Deaths": 27, "Description": "Tornadoes and severe weather cause significant damage in the states of IA, IL, IN, and WI. The state of Indiana was most affected with over one billion dollars in damage.", "Event ID": "10130"}, {"Disaster": "Midwest/Southeast Tornadoes (April 6-8, 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "4/6/2006", "Ending Date": "4/8/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 2037.0, "Deaths": 10, "Description": "\"Severe weather and numerous tornadoes affecting the states of OK, KS, MO, NE, KY, OH, TN, IN, MS, GA, and AL on April 6-8 with 3 \"\"killer\"\" tornadoes in TN.\"", "Event ID": "10131"}, {"Disaster": "Severe Storms and Tornadoes (March 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "3/8/2006", "Ending Date": "3/13/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1698.8, "Deaths": 10, "Description": "Outbreak of tornadoes over portions of the midwest and south during a week-long period-affecting the states of AL, AR, KY, MS, TN, TX, IN, KS, MO, and OK.", "Event ID": "10132"}, {"Disaster": "Hurricane Wilma (October 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/24/2005", "Ending Date": "10/24/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 25080.0, "Deaths": 35, "Description": "Category 3 hurricane hits SW Florida resulting in strong damaging winds and major flooding across southeastern Florida. Prior to landfall, Wilma as a Category 5 recorded the lowest pressure (882 mb) ever recorded in the Atlantic basin.", "Event ID": "10133"}, {"Disaster": "Hurricane Rita (September 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/20/2005", "Ending Date": "9/24/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 24420.1, "Deaths": 119, "Description": "Category 3 hurricane hits Texas-Louisiana border coastal region, creating significant storm surge and wind damage along the coast, and some inland flooding in the FL panhandle, AL, MS, LA, AR, and TX. Prior to landfall, Rita reached the third lowest pressure (897 mb) ever recorded in the Atlantic basin.", "Event ID": "10134"}, {"Disaster": "Midwest Drought (Spring-Summer 2005)", "Disaster Type": "Drought", "Beginning Date": "3/1/2005", "Ending Date": "8/31/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 1946.7, "Deaths": 0, "Description": "Rather severe localized drought causes significant crop losses (especially for corn and soybeans) in the states of AR, IL, IN, MO, OH, and WI.", "Event ID": "10135"}, {"Disaster": "Hurricane Katrina (August 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/25/2005", "Ending Date": "8/30/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 165012.0, "Deaths": 1833, "Description": "Category 3 hurricane initially impacts the U.S. as a Category 1 near Miami, FL, then as a strong Category 3 along the eastern LA-western MS coastlines, resulting in severe storm surge damage (maximum surge probably exceeded 30 feet) along the LA-MS-AL coasts, wind damage, and the failure of parts of the levee system in New Orleans. Inland effects included high winds and some flooding in the states of AL, MS, FL, TN, KY, IN, OH, and GA.", "Event ID": "10136"}, {"Disaster": "Hurricane Dennis (July 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/9/2005", "Ending Date": "7/11/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 3293.4, "Deaths": 15, "Description": "Category 3 hurricane makes landfall in western Florida panhandle resulting in storm surge and wind damage along the FL and AL coasts, along with scattered wind and flood damage in GA and MS.", "Event ID": "10137"}, {"Disaster": "Southeast Severe Weather (March 2005)", "Disaster Type": "Severe Storm", "Beginning Date": "3/24/2005", "Ending Date": "3/27/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 1141.8, "Deaths": 0, "Description": "Severe storms cause widespread hail damage across numerous states including TX, AL, MS, GA, FL, NC and VA.", "Event ID": "10138"}, {"Disaster": "Hurricane Jeanne (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/15/2004", "Ending Date": "9/29/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 10195.3, "Deaths": 28, "Description": "Category 3 hurricane makes landfall in east-central Florida, causing considerable wind, storm surge, and flooding damage in FL, with some flood damage also in the states of GA, SC, NC, VA, MD, DE, NJ, PA, and NY. Puerto Rico also affected.", "Event ID": "10139"}, {"Disaster": "Hurricane Ivan (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/12/2004", "Ending Date": "9/21/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 27880.6, "Deaths": 57, "Description": "Category 3 hurricane makes landfall on Gulf coast of Alabama, with significant wind, storm surge, and flooding damage in coastal AL and FL panhandle, along with wind/flood damage in the states of GA, MS, LA, SC, NC, VA, WV, MD, TN, KY, OH, DE, NJ, PA, and NY.", "Event ID": "10140"}, {"Disaster": "Hurricane Frances (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/3/2004", "Ending Date": "9/9/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 13328.0, "Deaths": 48, "Description": "Category 2 hurricane makes landfall in east-central Florida, causing significant wind, storm surge, and flooding damage in FL, along with considerable flood damage in the states of GA, SC, NC, and NY due to 5-15 inch rains.", "Event ID": "10141"}, {"Disaster": "Hurricane Charley (August 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/13/2004", "Ending Date": "8/14/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 21759.4, "Deaths": 35, "Description": "Category 4 hurricane makes landfall in southwest Florida, resulting in major wind and some storm surge damage in FL, along with some damage in the states of SC and NC.", "Event ID": "10142"}, {"Disaster": "Severe Storms, Hail, Tornadoes (May 2004)", "Disaster Type": "Severe Storm", "Beginning Date": "5/21/2004", "Ending Date": "5/27/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 1378.9, "Deaths": 4, "Description": "Severe storms including tornadoes and hail cause damage across the Midwest, South, Southeast and Northeast regions. The states impacted include IA, IL, IN, KY, MI, MO, NC, NE, NY, OK, OH and WI.", "Event ID": "10143"}, {"Disaster": "California Wildfires (Fall 2003)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2003", "Ending Date": "11/30/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 5407.6, "Deaths": 22, "Description": "Dry weather, high winds, and resulting wildfires in Southern California burned over 3,700 homes. Nearly 4.0 million acres burned across numerous western states including Alaska.", "Event ID": "10144"}, {"Disaster": "Western/Central Drought/Heatwave (Spring-Fall 2003)", "Disaster Type": "Drought", "Beginning Date": "3/1/2003", "Ending Date": "11/30/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 6945.1, "Deaths": 35, "Description": "2003 drought across western and central portions of the U.S. with losses to agriculture. The states impacted include AZ, CO, IA, ID, IL, KS, MI, MN, MO, MT, ND, NE, NM, OR, SD, WA and WI.", "Event ID": "10145"}, {"Disaster": "Hurricane Isabel (September 2003)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/18/2003", "Ending Date": "9/19/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 7622.8, "Deaths": 55, "Description": "Category 2 hurricane makes landfall in eastern North Carolina, causing considerable storm surge damage along the coasts of NC, VA, and MD, with wind damage and some flooding due to 4-12 inch rains in NC, VA, MD, DE, WV, NJ, NY, and PA.", "Event ID": "10146"}, {"Disaster": "Severe Weather (July 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "7/21/2003", "Ending Date": "7/23/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 1401.2, "Deaths": 7, "Description": "Severe storms impact states across the South, Southeast, Midwest and Northeast regions. The states most impacted include AR, AL, MS, GA, FL, SC, TN, KY, MI, NY, OH, PA and VT.", "Event ID": "10147"}, {"Disaster": "Midwest/Plains Severe Weather (July 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "7/4/2003", "Ending Date": "7/9/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 1192.6, "Deaths": 7, "Description": "Severe storms affect the states IA, IL, IN, MI, MN, OH, VA, WV across the Midwest and Plains.", "Event ID": "10148"}, {"Disaster": "Severe Storms/Tornadoes (May 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "5/3/2003", "Ending Date": "5/10/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 5738.5, "Deaths": 51, "Description": "Numerous tornadoes over the midwest, Mississippi valley, OH/TN valleys, and portions of the southeast, with a modern record one-week total of approximately 400 tornadoes reported", "Event ID": "10149"}, {"Disaster": "Severe Storms/Hail (April 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "4/4/2003", "Ending Date": "4/7/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 2788.8, "Deaths": 3, "Description": "Severe storms and large hail over the southern plains and lower MS valley, with Texas hardest hit, and much of the monetary losses due to hail.", "Event ID": "10150"}, {"Disaster": "Western Fire Season (Fall 2002)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2002", "Ending Date": "11/30/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 1878.4, "Deaths": 21, "Description": "Major wildfires over 11 western states from the Rockies to the west coast due to drought and periodic high winds, with over 7.1 million acres burned.", "Event ID": "10151"}, {"Disaster": "U.S. Drought (Spring-Fall 2002)", "Disaster Type": "Drought", "Beginning Date": "3/1/2002", "Ending Date": "11/30/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 12775.8, "Deaths": 0, "Description": "Moderate to extreme drought over large portions of 30 states, including the western states, the Great Plains, and much of the eastern U.S.", "Event ID": "10152"}, {"Disaster": "Hurricane Lili (October 2002)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/1/2002", "Ending Date": "8/5/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 1568.4, "Deaths": 2, "Description": "Category 1 hurricane makes landfall in Louisiana after causing damage across Saint Lucia, Jamaica, Haiti and Cuba.", "Event ID": "10153"}, {"Disaster": "Severe Storms and Tornadoes (April 2002)", "Disaster Type": "Severe Storm", "Beginning Date": "4/27/2002", "Ending Date": "4/28/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 2973.5, "Deaths": 7, "Description": "Numerous tornadoes and widespread hail damage over the Central and Eastern states including NC, GA, VA, TX, AR, MO, MS, TN, IL, IN, KY, PA, MD, NY, OH, WV, and KS.", "Event ID": "10154"}, {"Disaster": "Tropical Storm Allison (June 2001)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "6/5/2001", "Ending Date": "6/17/2001", "Total CPI-Adjusted Cost (Millions of Dollars)": 12271.7, "Deaths": 43, "Description": "The persistent remnants of Tropical Storm Allison produce rainfall amounts of 30-40 inches in portions of coastal Texas and Louisiana, causing severe flooding especially in the Houston area, then moves slowly northeastward; fatalities and significant damage reported in TX, LA, MS, FL, VA, and PA", "Event ID": "10155"}, {"Disaster": "Midwest/Ohio Valley Hail and Tornadoes (April 2001)", "Disaster Type": "Severe Storm", "Beginning Date": "4/6/2001", "Ending Date": "4/11/2001", "Total CPI-Adjusted Cost (Millions of Dollars)": 4456.6, "Deaths": 3, "Description": "Storms, tornadoes, and hail in the states of TX, OK, KS, NE, IA, MO, IL, IN, WI, MI, OH, KY, WV, and PA, over a 6-day period.", "Event ID": "10156"}, {"Disaster": "Western/Central/Southeast Drought/Heatwave (Spring-Fall 2000)", "Disaster Type": "Drought", "Beginning Date": "3/1/2000", "Ending Date": "11/30/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 7445.7, "Deaths": 140, "Description": "Western/Central/Southeast Drought/Heatwave. The states impacted include AZ, AL, AR, CA, CO, FL, GA, IA, KS, LA, MS, MT, NE, NM, OK, OR, SC, TN, and TX.", "Event ID": "10157"}, {"Disaster": "South Florida Flooding (October 2000)", "Disaster Type": "Flooding", "Beginning Date": "10/3/2000", "Ending Date": "10/4/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 1341.0, "Deaths": 3, "Description": "Heavy rainfall up to 15 inches affected south Florida surrounding Miami that resulted in severe flooding that damaged thousands of homes and businesses. There was also several hundred million in damage done to agriculture.", "Event ID": "10158"}, {"Disaster": "Western Fire Season (Spring-Summer 2000)", "Disaster Type": "Wildfire", "Beginning Date": "3/1/2000", "Ending Date": "8/31/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 1601.9, "Deaths": 0, "Description": "Severe wildfire season in the western states due to drought and frequent winds, with nearly 7 million acres burned.", "Event ID": "10159"}, {"Disaster": "Hurricane Floyd (September 1999)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/14/1999", "Ending Date": "9/16/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 9931.4, "Deaths": 77, "Description": "Large, category 2 hurricane makes landfall in eastern NC, causing 10-20 inch rains in 2 days, with severe flooding in NC and some flooding in SC, VA, MD, PA, NY, NJ, DE, RI, CT, MA, NH, and VT.", "Event ID": "10160"}, {"Disaster": "Eastern Drought/Heatwave (Summer 1999)", "Disaster Type": "Drought", "Beginning Date": "6/1/1999", "Ending Date": "8/31/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 3823.4, "Deaths": 502, "Description": "Very dry summer and high temperatures, mainly in eastern U.S., with extensive agricultural losses. The states impacted include AL, AR, FL, GA, KY, LA, MD, MS, NC, NJ, OH, SC, TN, VA, WV and PA.", "Event ID": "10161"}, {"Disaster": "Oklahoma and Kansas Tornadoes (May 1999)", "Disaster Type": "Severe Storm", "Beginning Date": "5/3/1999", "Ending Date": "5/6/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 3078.7, "Deaths": 55, "Description": "Outbreak of F4-F5 tornadoes hit the states of Oklahoma and Kansas, along with Texas and Tennessee, Oklahoma City area hardest hit.", "Event ID": "10162"}, {"Disaster": "Central and Eastern Winter Storm (Mid-January 1999)", "Disaster Type": "Winter Storm", "Beginning Date": "1/13/1999", "Ending Date": "1/16/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 1349.5, "Deaths": 0, "Description": "Winter storm affecting the Central and Eastern states including IL, IN, OH, MI, WV, VA, MD, PA, NJ, NY, MA, CT, VT, NH and ME.", "Event ID": "10163"}, {"Disaster": "Central and Eastern Winter Storm (January 1999)", "Disaster Type": "Winter Storm", "Beginning Date": "1/1/1999", "Ending Date": "1/4/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 1580.2, "Deaths": 25, "Description": "South, Southeast, Midwest, Northeast affected by damaging winter storm", "Event ID": "10164"}, {"Disaster": "California Freeze (December 1998)", "Disaster Type": "Freeze", "Beginning Date": "12/20/1998", "Ending Date": "12/28/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 3900.0, "Deaths": 0, "Description": "A severe freeze damaged fruit and vegetable crops in the Central and Southern San Joaquin Valley. Extended intervals of sub 27\u00b0 F temperatures occurred over an 8-day period.", "Event ID": "10165"}, {"Disaster": "Texas Flooding (October 1998)", "Disaster Type": "Flooding", "Beginning Date": "10/16/1998", "Ending Date": "10/24/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1469.7, "Deaths": 31, "Description": "Severe flooding in southeast Texas from 2 heavy rain events, with 10-20 inch rainfall totals", "Event ID": "10166"}, {"Disaster": "Hurricane Georges (September 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/20/1998", "Ending Date": "9/29/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 9336.0, "Deaths": 16, "Description": "Category 2 hurricane strikes Puerto Rico, Virgin Islands, Florida Keys, and Gulf coasts of Louisiana, Mississippi, Alabama, and Florida panhandle, 15-30 inch 2-day rain totals in parts of Alabama and Florida", "Event ID": "10167"}, {"Disaster": "Southern Drought/Heat Wave (Summer 1998)", "Disaster Type": "Drought", "Beginning Date": "6/1/1998", "Ending Date": "8/31/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 5503.9, "Deaths": 200, "Description": "Severe drought and heat wave from Texas/Oklahoma eastward to the Carolinas. The states impacted include AL, AR, FL, GA, LA, MS, NC, OK, SC, TN, TX, and VA.", "Event ID": "10168"}, {"Disaster": "Hurricane Bonnie (August 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/27/1998", "Ending Date": "8/29/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1528.8, "Deaths": 3, "Description": "Category 3 hurricane strikes eastern North Carolina and Virginia, extensive agricultural damage due to winds and flooding, with 10-inch rains in 2 days in some locations.", "Event ID": "10169"}, {"Disaster": "Tropical Storm Frances (September 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/8/1998", "Ending Date": "8/13/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1092.0, "Deaths": 2, "Description": "Tropical Storm Frances caused extensive flooding in Texas and Louisiana. The rainfall totals from Frances were 10 to 20 inches across eastern Texas into southern Louisiana.", "Event ID": "10170"}, {"Disaster": "Severe Storms, Tornadoes (June 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "5/30/1998", "Ending Date": "6/2/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1775.9, "Deaths": 20, "Description": "Severe storms in late May through early June hit the Midwest, North, Northeast, and Southeast", "Event ID": "10171"}, {"Disaster": "Minnesota Severe Storms/Hail (May 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "5/15/1998", "Ending Date": "5/15/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 2544.8, "Deaths": 1, "Description": "Very damaging severe thunderstorms with large hail over wide areas of Minnesota", "Event ID": "10172"}, {"Disaster": "Western/Eastern Severe Weather and Flooding (Winter-Spring 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "12/1/1997", "Ending Date": "2/28/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1587.0, "Deaths": 132, "Description": "Tornadoes and flooding cause damage across the West and Southeast. The states impacted include CA, TX, FL, AL, GA, LA, MS, NC and SC.", "Event ID": "10173"}, {"Disaster": "Northeast Ice Storm (January 1998)", "Disaster Type": "Winter Storm", "Beginning Date": "1/5/1998", "Ending Date": "1/9/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 2186.7, "Deaths": 16, "Description": "Intense ice storm hits Maine, New Hampshire, Vermont, and New York, with extensive forestry losses", "Event ID": "10174"}, {"Disaster": "Northern Plains Flooding (Spring 1997)", "Disaster Type": "Flooding", "Beginning Date": "2/3/1997", "Ending Date": "5/24/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 5809.0, "Deaths": 11, "Description": "Severe flooding in North Dakota, South Dakota and Minnesota due to heavy spring snow melt. This flooding caused widespread damage to agriculture, infrastructure, homes and businesses.", "Event ID": "10175"}, {"Disaster": "Mississippi and Ohio Valley Severe Weather and Flooding (March 1997)", "Disaster Type": "Severe Storm", "Beginning Date": "2/28/1997", "Ending Date": "3/5/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 1544.5, "Deaths": 67, "Description": "Tornadoes and severe flooding hit the states of AR, MO, MS, TN, IL, IN, KY, OH, and WV, with over 10 inches of rain in 24 hours in Louisville.", "Event ID": "10176"}, {"Disaster": "West Coast Flooding (December 1996-January 1997)", "Disaster Type": "Flooding", "Beginning Date": "1/1/1997", "Ending Date": "1/11/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 4766.9, "Deaths": 36, "Description": "Torrential rains (10-40 inches in 2 weeks) and snowmelt produce severe flooding over portions of CA, WA, OR, ID, NV, and MT.", "Event ID": "10177"}, {"Disaster": "Hurricane Fran (September 1996)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/5/1996", "Ending Date": "9/8/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 8161.5, "Deaths": 37, "Description": "Category 3 hurricane strikes North Carolina and Virginia, over 10-inch 24-hour rains in some locations and extensive agricultural and other losses.", "Event ID": "10178"}, {"Disaster": "Southern Plains Drought (Spring-Summer 1996)", "Disaster Type": "Drought", "Beginning Date": "3/1/1996", "Ending Date": "8/31/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 2920.1, "Deaths": 0, "Description": "Severe drought in agricultural regions of southern plains--Texas and Oklahoma most severely affected", "Event ID": "10179"}, {"Disaster": "Pacific Northwest Severe Flooding (February 1996)", "Disaster Type": "Flooding", "Beginning Date": "2/7/1996", "Ending Date": "2/12/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 1643.5, "Deaths": 9, "Description": "Very heavy, persistent rains (10-30 inches) and melting snow over OR, WA, ID, and western MT.", "Event ID": "10180"}, {"Disaster": "Blizzard/Floods (January 1996)", "Disaster Type": "Winter Storm", "Beginning Date": "1/1/1996", "Ending Date": "1/31/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 4895.1, "Deaths": 187, "Description": "Very heavy snowstorm (1-4 feet) over Appalachians, Mid-Atlantic, and Northeast; followed by severe flooding in parts of same area due to rain and snowmelt.", "Event ID": "10181"}, {"Disaster": "Hurricane Opal (October 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/4/1995", "Ending Date": "10/6/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 7877.5, "Deaths": 27, "Description": "Category 3 hurricane strikes Florida panhandle, Alabama, western Georgia, eastern Tennessee, and the western Carolinas, causing storm surge, wind, and flooding damage.", "Event ID": "10182"}, {"Disaster": "Hurricane Marilyn (September 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/15/1995", "Ending Date": "9/17/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 3528.0, "Deaths": 13, "Description": "Category 2 hurricane impacts the U.S. Virgin Islands and Puerto Rico with maximum sustained winds of 110 mph.", "Event ID": "10183"}, {"Disaster": "Hurricane Erin (August 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/1/1995", "Ending Date": "8/7/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 1428.0, "Deaths": 6, "Description": "Hurricane Erin impacted Florida as a category 1 hurricane. Most of the damage resulted from heavy rainfall and flooding in Florida, Alabama and Mississippi.", "Event ID": "10184"}, {"Disaster": "South Plains Severe Weather (May 1995)", "Disaster Type": "Severe Storm", "Beginning Date": "5/5/1995", "Ending Date": "5/7/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 9217.2, "Deaths": 32, "Description": "Torrential rains, hail, and tornadoes across Texas-Oklahoma and southeast Louisiana-southern Mississippi, with Dallas and New Orleans areas (10-25 inch rains in 5 days) hardest hit.", "Event ID": "10185"}, {"Disaster": "California Flooding (January-March 1995)", "Disaster Type": "Flooding", "Beginning Date": "1/1/1995", "Ending Date": "3/31/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 4200.0, "Deaths": 27, "Description": "Frequent winter storms cause 20-70 inch rainfall and periodic flooding across much of California", "Event ID": "10186"}, {"Disaster": "Western Fire Season (Summer-Fall 1994)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/1994", "Ending Date": "11/30/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1247.0, "Deaths": 0, "Description": "Severe wildfire season in the western states due to dry weather conditions. The states most impacted include CA, AZ, OR, WA, CO, UT, NV, NM and TX.", "Event ID": "10187"}, {"Disaster": "Texas Flooding (October 1994)", "Disaster Type": "Flooding", "Beginning Date": "10/16/1994", "Ending Date": "10/25/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1720.0, "Deaths": 19, "Description": "Torrential rain (10-25 inches in 5 days) and thunderstorms cause flooding across much of southeast Texas", "Event ID": "10188"}, {"Disaster": "Tropical Storm Alberto (July 1994)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/7/1994", "Ending Date": "7/10/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1717.4, "Deaths": 32, "Description": "Remnants of slow-moving Alberto bring torrential 10-25 inch rains in 3 days, widespread flooding and agricultural damage in parts of Georgia, Alabama, and panhandle of Florida.", "Event ID": "10189"}, {"Disaster": "Midwest/Plains Tornadoes (April 1994)", "Disaster Type": "Severe Storm", "Beginning Date": "4/25/1994", "Ending Date": "4/27/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1694.6, "Deaths": 3, "Description": "Tornadoes and severe storms cause damage in states across the South, Southeast and Midwest. The states impacted include TX, OK, AR, CO, KS, NE, IA, SD, IL, IN, MN and MO.", "Event ID": "10190"}, {"Disaster": "Southeast Ice Storm (February 1994)", "Disaster Type": "Winter Storm", "Beginning Date": "2/8/1994", "Ending Date": "2/13/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 5155.5, "Deaths": 9, "Description": "Intense ice storm with extensive damage in portions of TX, OK, AR, LA, MS, AL, TN, GA, SC, NC, and VA.", "Event ID": "10191"}, {"Disaster": "Winter Storm, Cold Wave (January 1994)", "Disaster Type": "Winter Storm", "Beginning Date": "1/17/1994", "Ending Date": "1/20/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1788.7, "Deaths": 70, "Description": "Winter storm affects the Southeast and Northeast regions. The states impacted include CT, DE, IL, IN, KY, MA, MD, ME, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA, VT and WV.", "Event ID": "10192"}, {"Disaster": "California Wildfires (Fall 1993)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/1993", "Ending Date": "11/30/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 2427.6, "Deaths": 4, "Description": "Dry weather, high winds and wildfires in Southern California", "Event ID": "10193"}, {"Disaster": "Southeast Drought/Heat Wave (Summer 1993)", "Disaster Type": "Drought", "Beginning Date": "6/1/1993", "Ending Date": "8/31/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 2226.6, "Deaths": 16, "Description": "Drought and heat wave across Southeastern U.S. The states most impacted include AL, FL, GA, MD, NC, SC, TN, and VA.", "Event ID": "10194"}, {"Disaster": "Midwest Flooding (Summer 1993)", "Disaster Type": "Flooding", "Beginning Date": "6/27/1993", "Ending Date": "8/15/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 37100.8, "Deaths": 48, "Description": "Severe, widespread flooding in central U.S. due to persistent heavy rains and thunderstorms. There was extensive damage to agriculture, infrastructure, homes and businesses in many areas across several states. Many river stations also established new records for historical flood heights. This is the most costly non-tropical, inland flood event to affect the United States on record.", "Event ID": "10195"}, {"Disaster": "East Coast Blizzard and Severe Weather (March 1993)", "Disaster Type": "Winter Storm", "Beginning Date": "3/11/1993", "Ending Date": "3/14/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 9782.7, "Deaths": 270, "Description": "\"The \"\"Storm of the Century\"\" impacts the entire Eastern seaboard from Florida to Maine. This historic storm dumped 2-4 feet of snow and caused hurricane force winds across many Eastern and Northeastern states. This caused power outages to over 10 million households. Additional impacts included numerous tornadoes across Florida causing substantial damage. This is the most destructive and costly winter storm to affect the United States since at least 1980.\"", "Event ID": "10196"}, {"Disaster": "Northeast Winter Storm (December 1992)", "Disaster Type": "Winter Storm", "Beginning Date": "12/10/1992", "Ending Date": "12/13/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 4544.0, "Deaths": 19, "Description": "Slow-moving winter storm batters northeast U.S. coast, with the New England region hardest hit. The states impacted include VA, MD, DE, PA, NJ, NY, CT, RI, MA and WV.", "Event ID": "10197"}, {"Disaster": "Southeast Severe Weather (November 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "11/21/1992", "Ending Date": "11/23/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1202.3, "Deaths": 26, "Description": "Three-day tornado outbreak strikes many Central and Eastern states including TX, LA, AL, MS, GA, AR, IN, OH, KY, TN, and NC. Major damage was reported across many areas, as more than 100 tornadoes were reported. This event remains one of the most prolific Fall season tornado outbreaks on record.", "Event ID": "10198"}, {"Disaster": "Hurricane Iniki (September 1992)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/11/1992", "Ending Date": "9/12/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 5673.0, "Deaths": 7, "Description": "Category 4 hurricane causes severe damage to the Hawaiian island of Kauai. Hurricane Iniki is the costliest and deadliest hurricane to affect Hawaii since 1900.", "Event ID": "10199"}, {"Disaster": "Hurricane Andrew (August 1992)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/23/1992", "Ending Date": "8/27/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 49410.0, "Deaths": 61, "Description": "Category 5 hurricane hits Florida and later impacts Louisiana as a category 3. High winds damage or destroy over 125,000 homes and leave at least 160,000 people homeless in Dade County, Florida alone. Initially rated as a category 4, Andrew was later upgraded to a category 5 upon further analysis. Andrew joins Hurricane Camille (1969) and the Labor Day Hurricane (1935), as the only land falling category 5 hurricanes on record to affect the U.S. mainland. Adjusted to present-day dollars, Andrew is the 6th most costly hurricane to impact the U.S. since 1980, after Katrina (2005), Harvey (2017), Maria (2017), Sandy (2012) and Irma (2017).", "Event ID": "10200"}, {"Disaster": "Severe Storms, Hail (June 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "6/19/1992", "Ending Date": "6/20/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1368.9, "Deaths": 0, "Description": "Severe storms with hail hit Kansas and Oklahoma", "Event ID": "10201"}, {"Disaster": "Hail, Tornadoes (April 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "4/28/1992", "Ending Date": "4/29/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1746.6, "Deaths": 0, "Description": "Severe Storms hit Oklahoma and Texas with tornadoes and hail", "Event ID": "10202"}, {"Disaster": "Severe Storms (March 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "3/24/1992", "Ending Date": "3/25/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1471.9, "Deaths": 0, "Description": "Severe storms affect the South, Southeast. The states most impacted include Texas, Louisiana and Florida.", "Event ID": "10203"}, {"Disaster": "Oakland Firestorm (October 1991)", "Disaster Type": "Wildfire", "Beginning Date": "10/1/1991", "Ending Date": "10/31/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 6171.0, "Deaths": 25, "Description": "Oakland, California firestorm due to low humidity and high winds burned over 3,000 homes. This is the costliest urban wildfire to affect the United States since 1980.", "Event ID": "10204"}, {"Disaster": "U.S. Drought (Spring-Summer 1991)", "Disaster Type": "Drought", "Beginning Date": "3/1/1991", "Ending Date": "8/31/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 5625.9, "Deaths": 0, "Description": "Drought conditions over parts of the West, Central and eastern U.S. most affected the states IL, IN, KS, MN, OH, OR, PA, SD, and WA.", "Event ID": "10205"}, {"Disaster": "Hurricane Bob (August 1991)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/18/1991", "Ending Date": "8/20/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 2810.4, "Deaths": 18, "Description": "Category 2 hurricane brushes the Outer Banks of North Carolina before making landfall in Rhode Island. Its impacts were felt from North Carolina to Long Island and into New England.", "Event ID": "10206"}, {"Disaster": "Severe Storms, Tornadoes (March 1991)", "Disaster Type": "Severe Storm", "Beginning Date": "3/26/1991", "Ending Date": "3/29/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 1206.0, "Deaths": 0, "Description": "Severe storms hit the Midwest, Southeast, Northeast. The states impacted include KS, IL, MI, IN, MS, TN, KY, OH, AL, PA, NY, GA, SC and NC.", "Event ID": "10207"}, {"Disaster": "California Freeze (December 1990)", "Disaster Type": "Freeze", "Beginning Date": "12/18/1990", "Ending Date": "12/25/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 6732.0, "Deaths": 0, "Description": "Severe freeze in the Central and Southern San Joaquin Valley caused the loss of citrus, avocado trees, and other crops in many areas. Several days of subfreezing temperatures occurred, with some valley locations in the teens.", "Event ID": "10208"}, {"Disaster": "Colorado Hail Storm (July 1990)", "Disaster Type": "Severe Storm", "Beginning Date": "7/11/1990", "Ending Date": "7/11/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 1623.7, "Deaths": 0, "Description": "Denver, CO (including airport) hit by severe hail storm. This was the costliest hail storm on record for Colorado when it occurred.", "Event ID": "10209"}, {"Disaster": "Southern Flooding (May 1990)", "Disaster Type": "Flooding", "Beginning Date": "5/11/1990", "Ending Date": "5/19/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 1993.6, "Deaths": 13, "Description": "Torrential rains cause flooding along the Trinity, Red, and Arkansas Rivers in TX, OK, LA, and AR", "Event ID": "10210"}, {"Disaster": "Winter Storm, Cold Wave (December 1989)", "Disaster Type": "Winter Storm", "Beginning Date": "12/21/1989", "Ending Date": "12/26/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 1414.1, "Deaths": 100, "Description": "Winter storm and deep cold impacts the Northeast, South and Southeast. The states impacted include AL, AR, CT, FL, GA, IL, IN, KY, LA, ME, MO, MS, NC, NH, NY, OH, OK, PA, SC, TN, TX, VA, VT and WV.", "Event ID": "10211"}, {"Disaster": "Florida Freeze (December 1989)", "Disaster Type": "Freeze", "Beginning Date": "12/23/1989", "Ending Date": "12/25/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 4160.0, "Deaths": 10, "Description": "Severe freeze damages citrus crops across central/northern Florida.", "Event ID": "10212"}, {"Disaster": "Northern Plains Drought (Summer-Fall 1989)", "Disaster Type": "Drought", "Beginning Date": "6/1/1989", "Ending Date": "11/30/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 6246.5, "Deaths": 0, "Description": "Severe summer drought over much of the northern plains with significant losses to agriculture. The states impacted include CO, IA, IL, KS, MO, ND, NE, NV, SD, TX and UT.", "Event ID": "10213"}, {"Disaster": "Hurricane Hugo (September 1989)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/21/1989", "Ending Date": "9/22/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 18719.8, "Deaths": 86, "Description": "Category 4 hurricane devastates South and North Carolina with ~20 foot storm surge and severe wind damage after hitting Puerto Rico and the U.S. Virgin Islands", "Event ID": "10214"}, {"Disaster": "Severe Storms (May 1989)", "Disaster Type": "Severe Storm", "Beginning Date": "5/1/1989", "Ending Date": "5/6/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 1147.0, "Deaths": 21, "Description": "Severe storms cause damage in states across the South and Southeast. The states impacted include OK, TX, LA, MS, GA, SC, NC and VA.", "Event ID": "10215"}, {"Disaster": "U.S. Drought/Heatwave (Summer 1988)", "Disaster Type": "Drought", "Beginning Date": "6/1/1988", "Ending Date": "8/31/1988", "Total CPI-Adjusted Cost (Millions of Dollars)": 43608.7, "Deaths": 454, "Description": "1988 drought across a large portion of the U.S. with very severe losses to agriculture and related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 5,000.", "Event ID": "10216"}, {"Disaster": "Southeast Drought/Heatwave (Summer 1986)", "Disaster Type": "Drought", "Beginning Date": "6/1/1986", "Ending Date": "8/31/1986", "Total CPI-Adjusted Cost (Millions of Dollars)": 4148.3, "Deaths": 100, "Description": "Severe summer drought in parts of the southeastern U.S. with severe losses to agriculture. The states impacted include AL, AR, GA, LA, MS, NC, SC, TN and VA.", "Event ID": "10217"}, {"Disaster": "Western Severe Storms and Flooding (February 1986)", "Disaster Type": "Severe Storm", "Beginning Date": "2/14/1986", "Ending Date": "2/16/1986", "Total CPI-Adjusted Cost (Millions of Dollars)": 1218.4, "Deaths": 13, "Description": "Severe storms and flooding affect the states CA, CO, NV, OR, WY across the West.", "Event ID": "10218"}, {"Disaster": "Hurricane Juan (October 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/27/1985", "Ending Date": "10/31/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 3577.1, "Deaths": 63, "Description": "Category 1 hurricane makes landfall near Morgan City, Louisiana. Hurricane Juan's slow movement causes severe flooding in Louisiana, Mississippi, Alabama and Florida. Southern Louisiana was most severely affected due to widespread rainfall of 10-15 inches that caused substantial flooding.", "Event ID": "10219"}, {"Disaster": "Hurricane Gloria (September 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/26/1985", "Ending Date": "9/28/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2046.2, "Deaths": 11, "Description": "Category 2 hurricane makes several landfalls along the eastern seaboard, affecting states from North Carolina to Maine.", "Event ID": "10220"}, {"Disaster": "Hurricane Elena (September 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/30/1985", "Ending Date": "9/3/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 3100.8, "Deaths": 4, "Description": "Category 3 hurricane approaches the Florida Panhandle prior to landfall near Biloxi, Mississippi. Considerable wind and rain impacts were felt from Florida to Louisiana.", "Event ID": "10221"}, {"Disaster": "Florida Freeze (January 1985)", "Disaster Type": "Freeze", "Beginning Date": "1/20/1985", "Ending Date": "1/22/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2868.0, "Deaths": 0, "Description": "Severe freeze over central/northern Florida damages citrus crops.", "Event ID": "10222"}, {"Disaster": "Winter Storm, Cold Wave (January 1985)", "Disaster Type": "Winter Storm", "Beginning Date": "1/19/1985", "Ending Date": "1/22/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2000.5, "Deaths": 150, "Description": "Extreme cold and winter storms in the Southeast, South, Southwest, Northeast, Midwest, and North", "Event ID": "10223"}, {"Disaster": "Severe Storms and Hail (June 1984)", "Disaster Type": "Severe Storm", "Beginning Date": "6/13/1984", "Ending Date": "6/17/1984", "Total CPI-Adjusted Cost (Millions of Dollars)": 1102.1, "Deaths": 1, "Description": "Severe storms and hail impact Colorado, South Dakota and Nebraska.", "Event ID": "10224"}, {"Disaster": "Tornadoes, Severe Storms, Floods (Spring 1984)", "Disaster Type": "Severe Storm", "Beginning Date": "3/27/1984", "Ending Date": "4/7/1984", "Total CPI-Adjusted Cost (Millions of Dollars)": 1489.6, "Deaths": 80, "Description": "States in the Southeast and Northeast regions are impacted by tornadoes, severe storms, and flooding. The states impacted include GA, FL, SC, NC, VA, MD, DE, NJ, NY, PA, CT, MA and RI.", "Event ID": "10225"}, {"Disaster": "Freeze, Cold Wave (December 1983)", "Disaster Type": "Freeze", "Beginning Date": "12/15/1983", "Ending Date": "12/25/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 5175.0, "Deaths": 151, "Description": "Severe freeze damages citrus crops across central/northern Florida. Associated cold wave over much of the U.S. causes over 100 deaths and additional damages.", "Event ID": "10226"}, {"Disaster": "Southeast Drought (Summer 1983)", "Disaster Type": "Drought", "Beginning Date": "6/1/1983", "Ending Date": "8/31/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 7647.4, "Deaths": 0, "Description": "1983 flash drought in the southeastern U.S. with losses to agriculture, most notably corn and soybeans. The states impacted include AL, AR, GA, KY, LA, MO, MS, NC, SC, TN and VA.", "Event ID": "10227"}, {"Disaster": "Hurricane Alicia (August 1983)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/17/1983", "Ending Date": "8/20/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 7740.0, "Deaths": 21, "Description": "Category 3 hurricane makes landfall near Galveston, Texas with maximum sustained winds 115 mph. Hurricane Alicia was the first hurricane to hit the United States mainland since Hurricane Allen in August 1980.", "Event ID": "10228"}, {"Disaster": "Western Storms & Flooding (December 1982-March 1983)", "Disaster Type": "Flooding", "Beginning Date": "12/13/1982", "Ending Date": "3/31/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 4004.0, "Deaths": 50, "Description": "Severe storms and flooding, especially in the states of WA, OR, CA, AZ, NV, ID, UT, and MT", "Event ID": "10229"}, {"Disaster": "Gulf States Storms and Flooding (December 1982-January 1983)", "Disaster Type": "Flooding", "Beginning Date": "12/1/1982", "Ending Date": "1/15/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 4101.3, "Deaths": 45, "Description": "Severe storms and flooding, especially in the states of TX, AR, LA, MS, AL, GA, and FL", "Event ID": "10230"}, {"Disaster": "Severe storms (June 1982)", "Disaster Type": "Severe Storm", "Beginning Date": "5/31/1982", "Ending Date": "6/10/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1281.7, "Deaths": 30, "Description": "Severe storms cause damage across the South, Southeast and Central regions. The states impacted include AR, IL, KY, IN, SC, GA and OH.", "Event ID": "10231"}, {"Disaster": "Midwest/Plains/Southeast Tornadoes (April 1982)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/1982", "Ending Date": "4/4/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1290.3, "Deaths": 33, "Description": "Tornadoes and severe weather affect the states (AL, AR, CO, IA, IL, IN, KS, KY, LA, MI, MN, MO, MS, NE, OH, OK, PA, TN, TX, WI, WV) across the Midwest, Plains and Southeast.", "Event ID": "10232"}, {"Disaster": "Midwest/Southeast/Northeast Winter Storm, Cold Wave (January 1982)", "Disaster Type": "Winter Storm", "Beginning Date": "1/8/1982", "Ending Date": "1/16/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1767.6, "Deaths": 85, "Description": "Winter storm and coldwave affect numerous states (AL, AR, CT, DE, FL, GA, IA, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MO, MS, NC, ND, NH, NJ, NY, OH, OK, PA, RI, SC, TN, TX, VA, VT, WI, WV) across the Midwest, Southeast and Northeast.", "Event ID": "10233"}, {"Disaster": "Severe Storms, Flash Floods, Hail, Tornadoes (May 1981)", "Disaster Type": "Severe Storm", "Beginning Date": "5/5/1981", "Ending Date": "5/10/1981", "Total CPI-Adjusted Cost (Millions of Dollars)": 1164.2, "Deaths": 20, "Description": "Severe storms cause damage across the Midwest and South. The states most impacted include TX, OK, KS, AL and LA.", "Event ID": "10234"}, {"Disaster": "Florida Freeze (January 1981)", "Disaster Type": "Freeze", "Beginning Date": "1/12/1981", "Ending Date": "1/14/1981", "Total CPI-Adjusted Cost (Millions of Dollars)": 1658.8, "Deaths": 0, "Description": "Severe freeze heavily damaged fruit crops across Florida. Over 25,000 Florida farms were impacted and sustained losses.", "Event ID": "10235"}, {"Disaster": "Central/Eastern Drought/Heatwave (Summer-Fall 1980)", "Disaster Type": "Drought", "Beginning Date": "6/1/1980", "Ending Date": "11/30/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 32464.8, "Deaths": 1260, "Description": "Central and eastern U.S. drought/heat wave caused damage to agriculture and other related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 10,000.", "Event ID": "10236"}, {"Disaster": "Hurricane Allen (August 1980)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/7/1980", "Ending Date": "8/11/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 1911.6, "Deaths": 13, "Description": "Category 3 hurricane makes landfall north of Brownsville, Texas with maximum sustained winds of 115 mph. Hurricane Allen causes rainfall up to 20 inches in southern Texas and storm surge as high as 12 feet along the coast.", "Event ID": "10237"}, {"Disaster": "Southern Severe Storms and Flooding (April 1980)", "Disaster Type": "Flooding", "Beginning Date": "4/10/1980", "Ending Date": "4/17/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 2289.9, "Deaths": 7, "Description": "Severe storms and flooding affect several states (AR, LA, MS) across the South.", "Event ID": "10238"}], "stage_runningstate": "executed", "datacache": 0, "originalcount": 238, "samplecount": 238, "samplefile": "/FileStore/platform/sampleData/65daa6ebc55b7f0042d67ca4/part-00000-84c46422-b3f8-4c91-9701-47a5d45a96e1-c000.csv", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "65daa6ebc55b7f0042d67ca5", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/DisasterCleanedAgainTotest.csv", "in": ["65daa6ebc55b7f0042d67ca4"], "out": ["65daa6ebc55b7f0042d67ca6"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "RegressioModel_AutoFE", "dataPercentage": "10", "comment": "", "pipeline_id": "65daa6ebc55b7f0042d67ca1", "sub_type": "Feature", "stage_type": "transformation", "stage_attributes": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10", "sampledata": [{"Disaster": "Western Wildfires (Summer-Fall 2018)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2018", "Ending Date": "9/30/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2200.0, "Deaths": 15, "Description": "California has again been impacted by a damaging and costly wildfire season. Of note, the Medincino Complex Fire was the largest wildfire on record in California burning over 450,000 acres while the Carr Fire in Northern California damaged or destroyed over 1,500 homes and businesses. Several other Western states (OR, WA, UT, WY, ID, MT, CO) have also had active and damaging wildfire seasons. In total, over 7.7 million acres has burned across the U.S. during the first 9 months of 2018, which is well above the 10-year average (2008-2017) of 5.9 million acres for the January-September period.", "Event ID": "10001", "Disaster_stringindexer_transform": 200.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 0.0, "Ending Date_stringindexer_transform": 5.0, "Description_stringindexer_transform": 190.0, "Event ID_stringindexer_transform": 59.0}, {"Disaster": "Southwest/Southern Plains Drought (Summer-Fall 2018)", "Disaster Type": "Drought", "Beginning Date": "6/1/2018", "Ending Date": "9/30/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2800.0, "Deaths": 0, "Description": "Drought conditions were present across numerous Southwestern and Plains states (TX, OK, KS, MO, CO, NM, AZ, UT). The most extreme drought conditions continue to persist across the Four Corners region of the Southwest. The agriculture sector has been impacted across the affected states including damage to field crops from lack of rainfall. Ranchers have also be forced to sell-off livestock early in some regions due to high feeding costs.", "Event ID": "10002", "Disaster_stringindexer_transform": 128.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 0.0, "Ending Date_stringindexer_transform": 5.0, "Description_stringindexer_transform": 168.0, "Event ID_stringindexer_transform": 19.0}, {"Disaster": "Hurricane Florence (September 2018)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/13/2018", "Ending Date": "9/16/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 22500.0, "Deaths": 51, "Description": "\"Hurricane Florence was a large and very slow moving hurricane that produced extreme rainfall across eastern North Carolina (up to 35.93\"\") and South Carolina (up to 23.81\"\")", "Event ID": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "Disaster_stringindexer_transform": 140.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 15.0, "Ending Date_stringindexer_transform": 16.0, "Description_stringindexer_transform": 237.0, "Event ID_stringindexer_transform": 175.0}, {"Disaster": "Colorado Hail Storm (June 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "6/18/2018", "Ending Date": "6/19/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2100.0, "Deaths": 0, "Description": "Severe hail storms cause golf ball to baseball-sized hail and widespread damage in many areas from northern Denver to Boulder and Fort Collins. Many homes, businesses and vehicles were impacted..", "Event ID": "10004", "Disaster_stringindexer_transform": 134.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 75.0, "Ending Date_stringindexer_transform": 8.0, "Description_stringindexer_transform": 222.0, "Event ID_stringindexer_transform": 154.0}, {"Disaster": "Texas Hail Storm (June 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2018", "Ending Date": "6/6/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1000.0, "Deaths": 0, "Description": "Large-hail impacts highly-populated area of the Dallas-Ft. Worth metroplex. Golfball to baseball-sized hail damages many homes, vehicles and businesses.", "Event ID": "10005", "Disaster_stringindexer_transform": 56.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 23.0, "Ending Date_stringindexer_transform": 25.0, "Description_stringindexer_transform": 110.0, "Event ID_stringindexer_transform": 106.0}, {"Disaster": "Central and Eastern Severe Weather (May 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "5/13/2018", "Ending Date": "5/15/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1383.0, "Deaths": 5, "Description": "Severe storm damage across many Central states including TX, KS, CO, OK, MO, IL, IN, IA and OH. This was followed by a derecho event across the Northeastern states of MD, NJ, NY, PA, VA, WV, MA and CT that caused widespread high wind damage. Also, there were one dozen tornadoes reported across PA, NY and CT causing further damage.", "Event ID": "10006", "Disaster_stringindexer_transform": 30.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 88.0, "Ending Date_stringindexer_transform": 55.0, "Description_stringindexer_transform": 159.0, "Event ID_stringindexer_transform": 43.0}, {"Disaster": "Central and Northeastern Severe Weather (May 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "5/1/2018", "Ending Date": "5/4/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1018.0, "Deaths": 0, "Description": "Numerous central states (KS, NE, OK, TX, NM, MO, IA, IL, IN, OH, WI) were impacted by large hail and tornadoes. Several northeastern states including NY, PA and VT were also impacted by high wind damage from severe storms.", "Event ID": "10007", "Disaster_stringindexer_transform": 165.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 7.0, "Ending Date_stringindexer_transform": 192.0, "Description_stringindexer_transform": 108.0, "Event ID_stringindexer_transform": 219.0}, {"Disaster": "Southern and Eastern Tornadoes and Severe Weather (April 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2018", "Ending Date": "4/16/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1331.0, "Deaths": 3, "Description": "Tornadoes and severe storms with large hail cause widespread damage across many Southern and Eastern states (AR, FL, GA, LA, MD, MI, MS, MO, NJ, NY, NC, PA, SC, TX, VA) over a multi-day period. There were over 70 confirmed tornadoes largely clustered in Louisiana, Mississippi, North Carolina and Virginia. This same system also caused winter storm impacts of high wind and ice accumulation in northeastern states.", "Event ID": "10008", "Disaster_stringindexer_transform": 48.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 139.0, "Ending Date_stringindexer_transform": 87.0, "Description_stringindexer_transform": 26.0, "Event ID_stringindexer_transform": 199.0}, {"Disaster": "Southeastern Tornadoes and Severe Weather (March 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "3/18/2018", "Ending Date": "3/21/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1378.0, "Deaths": 0, "Description": "A potent severe storm system caused over 20 tornadoes across Alabama and also widespread hail damage from Texas to Florida. Most notably this system produced an EF-3 tornado that caused extensive damage in Jacksonville, Alabama and across the campus of Jacksonville State University.", "Event ID": "10009", "Disaster_stringindexer_transform": 145.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 45.0, "Ending Date_stringindexer_transform": 67.0, "Description_stringindexer_transform": 200.0, "Event ID_stringindexer_transform": 22.0}, {"Disaster": "Northeast Winter Storm (March 2018)", "Disaster Type": "Winter Storm", "Beginning Date": "3/1/2018", "Ending Date": "3/3/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2216.0, "Deaths": 9, "Description": "Powerful Nor'easter impacted many Northeastern states including MD, MA, NH, NJ, NY, PA, CT, DE, RA and VA. Widespread damage resulted from the combination of high winds, heavy snow and heavy coastal erosion.", "Event ID": "10010", "Disaster_stringindexer_transform": 209.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 61.0, "Ending Date_stringindexer_transform": 130.0, "Description_stringindexer_transform": 188.0, "Event ID_stringindexer_transform": 32.0}, {"Disaster": "Central and Eastern Winter Storm (January 2018)", "Disaster Type": "Winter Storm", "Beginning Date": "1/3/2018", "Ending Date": "1/5/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1063.0, "Deaths": 22, "Description": "A Nor'easter caused damage across many Northeastern states including MA, NJ, NY, CT, ME, NH, PA, MD, RI, SC, TN, VA, NC and GA.", "Event ID": "10011", "Disaster_stringindexer_transform": 148.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 91.0, "Ending Date_stringindexer_transform": 225.0, "Description_stringindexer_transform": 232.0, "Event ID_stringindexer_transform": 137.0}, {"Disaster": "Western Wildfires, California Firestorm (Summer-Fall 2017)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2017", "Ending Date": "12/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 18365.0, "Deaths": 54, "Description": "A historic firestorm damages or destroys over 15,000 homes, businesses and other structures across California in October. The combined destruction of the Tubbs, Atlas, Nuns and Redwood Valley wildfires represent the most costly wildfire event on record, also causing 44 deaths. Extreme wildfire conditions in early December also burned hundreds of homes in Los Angeles. Numerous other wildfires across many western and northwestern states burn over 9.8 million acres exceeding the 10-year annual average of 6.5 million acres. Montana in particular was affected by wildfires that burned in excess of 1 million acres. These wildfire conditions were enhanced by the preceding drought conditions in several states.", "Event ID": "10012", "Disaster_stringindexer_transform": 84.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 126.0, "Ending Date_stringindexer_transform": 3.0, "Description_stringindexer_transform": 112.0, "Event ID_stringindexer_transform": 65.0}, {"Disaster": "North Dakota, South Dakota and Montana Drought (Spring-Fall 2017)", "Disaster Type": "Drought", "Beginning Date": "3/1/2017", "Ending Date": "12/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2550.0, "Deaths": 0, "Description": "Extreme drought causes extensive impacts to agriculture in North Dakota, South Dakota and Montana. Field crops including wheat were severely damaged and the lack of feed for cattle forced ranchers to sell off livestock. This drought has also contributed to the increased potential for severe wildfires.", "Event ID": "10013", "Disaster_stringindexer_transform": 23.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 90.0, "Ending Date_stringindexer_transform": 3.0, "Description_stringindexer_transform": 54.0, "Event ID_stringindexer_transform": 7.0}, {"Disaster": "Hurricane Maria (September 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/19/2017", "Ending Date": "9/21/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 91800.0, "Deaths": 2981, "Description": "Category 4 hurricane made landfall in southeast Puerto Rico after striking the U.S. Virgin Island of St. Croix. Maria's high winds caused widespread devastation to Puerto Rico's transportation, agriculture, communication and energy infrastructure. Extreme rainfall up to 37 inches caused widespread flooding and mudslides across the island. The interruption to commerce and standard living conditions will be sustained for a long period, as much of Puerto Rico's infrastructure is rebuilt. Maria tied Hurricane Wilma (2005) for the most rapid intensification, strengthening from tropical depression to a category 5 storm in 54 hours. Maria's landfall at Category 4 strength gives the U.S. a record three Category 4+ landfalls this year (Maria, Harvey, and Irma). Maria was one of the deadliest storms to impact the U.S., with numerous indirect deaths in the wake of the storm's devastation.", "Event ID": "10014", "Disaster_stringindexer_transform": 212.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 37.0, "Ending Date_stringindexer_transform": 63.0, "Description_stringindexer_transform": 191.0, "Event ID_stringindexer_transform": 195.0}, {"Disaster": "Hurricane Irma (September 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/6/2017", "Ending Date": "9/12/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 50974.0, "Deaths": 97, "Description": "Category 4 hurricane made landfall at Cudjoe Key, Florida after devastating the U.S. Virgin Islands - St John and St Thomas - as a category 5 storm. The Florida Keys were heavily impacted, as 25% of buildings were destroyed while 65% were significantly damaged. Severe wind and storm surge damage also occurred along the coasts of Florida and South Carolina. Jacksonville, FL and Charleston, SC received near-historic levels of storm surge causing significant coastal flooding. Irma maintained a maximum sustained wind of 185 mph for 37 hours, the longest in the satellite era. Irma also was a category 5 storm for longer than all other Atlantic hurricanes except Ivan in 2004.", "Event ID": "10015", "Disaster_stringindexer_transform": 64.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 188.0, "Ending Date_stringindexer_transform": 119.0, "Description_stringindexer_transform": 146.0, "Event ID_stringindexer_transform": 150.0}, {"Disaster": "Hurricane Harvey (August 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/25/2017", "Ending Date": "8/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 127500.0, "Deaths": 89, "Description": "Category 4 hurricane made landfall near Rockport, Texas causing widespread damage. Harvey's devastation was most pronounced due to the large region of extreme rainfall producing historic flooding across Houston and surrounding areas. More than 30 inches of rainfall fell on 6.9 million people, while 1.25 million experienced over 45 inches and 11,000 had over 50 inches, based on 7-day rainfall totals ending August 31. This historic U.S. rainfall caused massive flooding that displaced over 30,000 people and damaged or destroyed over 200,000 homes and businesses.", "Event ID": "10016", "Disaster_stringindexer_transform": 126.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 85.0, "Ending Date_stringindexer_transform": 203.0, "Description_stringindexer_transform": 51.0, "Event ID_stringindexer_transform": 80.0}, {"Disaster": "Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/27/2017", "Ending Date": "6/29/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1453.0, "Deaths": 0, "Description": "Severe hail and high wind damage impacting Nebraska, Illinois and Iowa. More than one dozen tornadoes touched down across parts of Iowa, in addition to other storm damage.", "Event ID": "10017", "Disaster_stringindexer_transform": 1.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 110.0, "Ending Date_stringindexer_transform": 92.0, "Description_stringindexer_transform": 40.0, "Event ID_stringindexer_transform": 55.0}, {"Disaster": "Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/12/2017", "Ending Date": "6/16/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1569.0, "Deaths": 0, "Description": "Severe hail, high winds and numerous tornadoes impact many states over several days including WY, TX, NE, KS, MO, IA, IL, PA, VA, NY.", "Event ID": "10018", "Disaster_stringindexer_transform": 1.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 56.0, "Ending Date_stringindexer_transform": 126.0, "Description_stringindexer_transform": 231.0, "Event ID_stringindexer_transform": 178.0}, {"Disaster": "Minnesota Hail Storm and Upper Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/9/2017", "Ending Date": "6/11/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2444.0, "Deaths": 0, "Description": "Severe hail and high winds cause considerable damage across Minnesota and Wisconsin. The Minneapolis metro area in particular was damaged from large, destructive hail impacting many buildings and vehicles. This damage is comparable to the May 15, 1998 Minnesota hail storm that was also very costly.", "Event ID": "10019", "Disaster_stringindexer_transform": 202.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 167.0, "Ending Date_stringindexer_transform": 64.0, "Description_stringindexer_transform": 134.0, "Event ID_stringindexer_transform": 228.0}, {"Disaster": "Colorado Hail Storm and Central Severe Weather (May 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "5/8/2017", "Ending Date": "5/11/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 3484.0, "Deaths": 0, "Description": "Hail storm and wind damage impacting several states including CO, OK, TX, NM, MO. The most costly impacts were in the Denver metro region where baseball-sized hail caused the most expensive hail storm in Colorado history, with insured losses exceeding 2.2 (2.3) billion.", "Event ID": "10020", "Disaster_stringindexer_transform": 170.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 168.0, "Ending Date_stringindexer_transform": 89.0, "Description_stringindexer_transform": 87.0, "Event ID_stringindexer_transform": 135.0}, {"Disaster": "Missouri and Arkansas Flooding and Central Severe Weather (May 2017)", "Disaster Type": "Flooding", "Beginning Date": "4/25/2017", "Ending Date": "5/7/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1725.0, "Deaths": 20, "Description": "A period of heavy rainfall up to 15 inches over a multi-state region in the Midwest caused historic levels of flooding along many rivers. The flooding was most severe in Missouri, Arkansas and southern Illinois where levees were breached and towns were flooded. There was widespread damage to homes, businesses, infrastructure and agriculture. Severe storms also caused additional impacts during the flooding event across a number of central and southern states.", "Event ID": "10021", "Disaster_stringindexer_transform": 216.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 92.0, "Ending Date_stringindexer_transform": 216.0, "Description_stringindexer_transform": 164.0, "Event ID_stringindexer_transform": 34.0}, {"Disaster": "South/Southeast Severe Weather (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "3/26/2017", "Ending Date": "3/28/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2802.0, "Deaths": 0, "Description": "Large hail and high winds in Texas north of the Dallas metro region caused widespread damage to structures and vehicles. Severe storms also caused damage across several other states (OK, TN, KY, MS, AL) due to the combination of high winds, hail and tornadoes.", "Event ID": "10022", "Disaster_stringindexer_transform": 89.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 25.0, "Ending Date_stringindexer_transform": 54.0, "Description_stringindexer_transform": 196.0, "Event ID_stringindexer_transform": 142.0}, {"Disaster": "Southeast Freeze (March 2017)", "Disaster Type": "Freeze", "Beginning Date": "3/14/2017", "Ending Date": "3/16/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1040.0, "Deaths": 0, "Description": "Severe freeze heavily damaged fruit crops across several southeastern states (SC, GA, NC, TN, AL, MS, FL, KY, VA). Mid-March freezes are not climatologically unusual in the Southeast, however many crops were blooming 3+ weeks early due to unusually warm temperatures during the preceding weeks. Damage was most severe in Georgia and South Carolina. Crops most impacted include peaches, blueberries, strawberries and apples, among others.", "Event ID": "10023", "Disaster_stringindexer_transform": 20.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 186.0, "Ending Date_stringindexer_transform": 84.0, "Description_stringindexer_transform": 39.0, "Event ID_stringindexer_transform": 86.0}, {"Disaster": "Midwest Tornado Outbreak (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "3/6/2017", "Ending Date": "3/8/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2263.0, "Deaths": 2, "Description": "Tornado outbreak and wind damage across many Midwestern states (AR, IA, IL, KS, MI, MN, MO, NE, NY, OH, WI). Missouri and Illinois were impacted by numerous tornadoes while Michigan and New York were affected by destructive, straight-line winds following the storm system. Nearly one million customers lost power in Michigan alone due to sustained high winds, which affected several states from Illinois to New York.", "Event ID": "10024", "Disaster_stringindexer_transform": 109.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 124.0, "Ending Date_stringindexer_transform": 66.0, "Description_stringindexer_transform": 115.0, "Event ID_stringindexer_transform": 1.0}, {"Disaster": "Central/Southeast Tornado Outbreak (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "2/28/2017", "Ending Date": "3/1/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1878.0, "Deaths": 6, "Description": "Over 70 tornadoes developed during a widespread outbreak across many central and southern states causing significant damage. There was also widespread straight-line wind and hail damage. This was the second largest tornado outbreak to occur early in 2017.", "Event ID": "10025", "Disaster_stringindexer_transform": 218.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 18.0, "Ending Date_stringindexer_transform": 78.0, "Description_stringindexer_transform": 68.0, "Event ID_stringindexer_transform": 201.0}, {"Disaster": "California Flooding (February 2017)", "Disaster Type": "Flooding", "Beginning Date": "2/8/2017", "Ending Date": "2/22/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1560.0, "Deaths": 5, "Description": "Heavy, persistent rainfall across northern and central California created substantial property and infrastructure damage from flooding, landslides and erosion. Notable impacts include severe damage to the Oroville Dam spillway, which caused a multi-day evacuation of 188,000 residents downstream. Excessive rainfall also caused flood damage in the city of San Jose, as Coyote Creek overflowed its banks and inundated neighborhoods forcing 14,000 residents to evacuate.", "Event ID": "10026", "Disaster_stringindexer_transform": 65.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 55.0, "Ending Date_stringindexer_transform": 70.0, "Description_stringindexer_transform": 172.0, "Event ID_stringindexer_transform": 158.0}, {"Disaster": "Southern Tornado Outbreak and Western Storms (January 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "1/20/2017", "Ending Date": "1/22/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1149.0, "Deaths": 24, "Description": "High wind damage occurred across southern California near San Diego followed by 79 confirmed tornadoes during an outbreak across many southern states including AL, FL, GA, LA, MS, SC and TX. This was the 3rd most tornadoes to occur in a single outbreak during a winter month (Dec.-Feb.) for records going back to 1950.", "Event ID": "10027", "Disaster_stringindexer_transform": 8.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 105.0, "Ending Date_stringindexer_transform": 172.0, "Description_stringindexer_transform": 66.0, "Event ID_stringindexer_transform": 104.0}, {"Disaster": "Western/Southeast Wildfires (Summer-Fall 2016)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2016", "Ending Date": "12/31/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2538.0, "Deaths": 21, "Description": "Western and Southern states experienced an active wildfire season with over 5.0 million acres burned nationally. Most notable was the firestorm that impacted Gatlinburg, Tennessee with hurricane-force wind gusts in extremely dry conditions creating volatile wildfire behavior. These wildfires destroyed nearly 2,500 structures and caused 14 fatalities. The drought conditions in many areas of the Southeast and California worsened the wildfire potential.", "Event ID": "10028", "Disaster_stringindexer_transform": 13.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 174.0, "Ending Date_stringindexer_transform": 1.0, "Description_stringindexer_transform": 34.0, "Event ID_stringindexer_transform": 45.0}, {"Disaster": "West/Northeast/Southeast Drought (2016)", "Disaster Type": "Drought", "Beginning Date": "1/1/2016", "Ending Date": "12/31/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 3660.0, "Deaths": 0, "Description": "California's 5-year drought persisted during 2016 while new areas of extreme drought developed in states across the Northeast and Southeast. The long-term impacts of the drought in California have damaged forests where 100+ million trees have perished and are a public safety hazard. The agricultural impacts were reduced in California as water prices and crop fallowing declined. However, agricultural impacts developed in Northeast and Southeast due to stressed water supplies.", "Event ID": "10029", "Disaster_stringindexer_transform": 198.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 131.0, "Ending Date_stringindexer_transform": 1.0, "Description_stringindexer_transform": 122.0, "Event ID_stringindexer_transform": 185.0}, {"Disaster": "Hurricane Matthew (October 2016)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/8/2016", "Ending Date": "10/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 10600.0, "Deaths": 49, "Description": "Hurricane Matthew paralleled the Southeast coast from Florida to North Carolina causing widespread damage from wind, storm surge and inland flooding. The most costly impacts were due to historic levels of river flooding in eastern North Carolina where 100,000 homes, businesses and other structures were damaged. This inland flooding was comparable to Hurricane Floyd (1999) that also impacted eastern North Carolina. Matthew narrowly missed landall on Florida's east coast as a powerful category 4 storm.", "Event ID": "10030", "Disaster_stringindexer_transform": 204.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 123.0, "Ending Date_stringindexer_transform": 23.0, "Description_stringindexer_transform": 170.0, "Event ID_stringindexer_transform": 191.0}, {"Disaster": "Louisiana Flooding (August 2016)", "Disaster Type": "Flooding", "Beginning Date": "8/12/2016", "Ending Date": "8/15/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 10600.0, "Deaths": 13, "Description": "A historic flood devastated a large area of southern Louisiana resulting from 20 to 30 inches of rainfall over several days. Watson, Louisiana received an astounding 31.39 inches of rain from the storm. Two-day rainfall totals in the hardest hit areas have a 0.2% chance of occurring in any given year: a 1 in 500 year event. More than 30,000 people were rescued from the floodwaters that damaged or destroyed over 50,000 homes, 100,000 vehicles and 20,000 businesses. This is the most damaging U.S. flood event since Superstorm Sandy impacted the Northeast in 2012.", "Event ID": "10031", "Disaster_stringindexer_transform": 230.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 96.0, "Ending Date_stringindexer_transform": 206.0, "Description_stringindexer_transform": 123.0, "Event ID_stringindexer_transform": 17.0}, {"Disaster": "Rockies and Northeast Severe Weather (July 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "7/28/2016", "Ending Date": "7/30/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1553.0, "Deaths": 0, "Description": "Severe storms across the Rockies and Northeastern states (CO, WY, VA, MD, PA, NJ, NY) caused large hail and high wind damage. Storm damage in Colorado was the most costly due to hail.", "Event ID": "10032", "Disaster_stringindexer_transform": 22.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 108.0, "Ending Date_stringindexer_transform": 175.0, "Description_stringindexer_transform": 230.0, "Event ID_stringindexer_transform": 73.0}, {"Disaster": "West Virginia Flooding and Ohio Valley Tornadoes (June 2016)", "Disaster Type": "Flooding", "Beginning Date": "6/22/2016", "Ending Date": "6/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1027.0, "Deaths": 23, "Description": "Torrential rainfall caused destructive flooding through many West Virginia towns, damaging thousands of homes and businesses and causing considerable loss of life. Over 1,500 roads and bridges were damaged or destroyed making the impact on infrastructure comparable to the historic 2013 Colorado flood. The storm system also produced numerous tornadoes causing damage across several Ohio Valley states.", "Event ID": "10033", "Disaster_stringindexer_transform": 40.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 130.0, "Ending Date_stringindexer_transform": 42.0, "Description_stringindexer_transform": 55.0, "Event ID_stringindexer_transform": 109.0}, {"Disaster": "Rockies/Central Tornadoes and Severe Weather (May 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "5/21/2016", "Ending Date": "5/26/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1215.0, "Deaths": 0, "Description": "Sustained period of severe thunderstorms and tornadoes affecting several states including Montana, Colorado, Kansas, Missouri and Texas. The most concentrated days for tornado development were on May 22 and 24. Additional damage was created by straight-line high wind and hail damage.", "Event ID": "10034", "Disaster_stringindexer_transform": 45.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 114.0, "Ending Date_stringindexer_transform": 136.0, "Description_stringindexer_transform": 216.0, "Event ID_stringindexer_transform": 56.0}, {"Disaster": "Plains Tornadoes and Central Severe Weather (May 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "5/8/2016", "Ending Date": "5/11/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1823.0, "Deaths": 2, "Description": "Tornadoes and severe storms cause widespread damage across the Plains and Central states (NE, MO, TX, OK, KS, CO, IL, KY, TN) over a multi-day period. The damage from tornadoes and high wind was most costly in Nebraska and Missouri.", "Event ID": "10035", "Disaster_stringindexer_transform": 92.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 93.0, "Ending Date_stringindexer_transform": 90.0, "Description_stringindexer_transform": 41.0, "Event ID_stringindexer_transform": 217.0}, {"Disaster": "South/Southeast Tornadoes (April 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "4/26/2016", "Ending Date": "5/2/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2538.0, "Deaths": 6, "Description": "Large outbreak of tornadoes affects numerous states across the South and Southeast. Additional damage also from large hail and straight-line wind during the multi-day thunderstorm event.", "Event ID": "10036", "Disaster_stringindexer_transform": 213.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 182.0, "Ending Date_stringindexer_transform": 28.0, "Description_stringindexer_transform": 194.0, "Event ID_stringindexer_transform": 153.0}, {"Disaster": "Houston Flooding (April 2016)", "Disaster Type": "Flooding", "Beginning Date": "4/17/2016", "Ending Date": "4/18/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2836.0, "Deaths": 8, "Description": "A period of extreme rainfall up to 17 inches created widespread urban flooding in Houston and surrounding suburbs. Thousands of homes and businesses were damaged and more than 1,800 high water rescues were conducted. This represents the most widespread flooding event to affect Houston since Tropical Storm Allison in 2001.", "Event ID": "10037", "Disaster_stringindexer_transform": 107.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 33.0, "Ending Date_stringindexer_transform": 193.0, "Description_stringindexer_transform": 135.0, "Event ID_stringindexer_transform": 92.0}, {"Disaster": "North/Central Texas Hail Storm (April 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "4/10/2016", "Ending Date": "4/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 3708.0, "Deaths": 0, "Description": "Widespread severe hail damage across north and central Texas including the cities of Plano, Wylie, Frisco, Allen and San Antonio. The damage in San Antonio was particularly severe as the National Weather Service verified reports of hail size reaching 4.5 inches in diameter. This ranks as one of the most costly hail events to affect the United States.", "Event ID": "10038", "Disaster_stringindexer_transform": 187.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 226.0, "Ending Date_stringindexer_transform": 125.0, "Description_stringindexer_transform": 63.0, "Event ID_stringindexer_transform": 10.0}, {"Disaster": "North Texas Hail Storm (March 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "3/23/2016", "Ending Date": "3/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2188.0, "Deaths": 0, "Description": "Large hail and strong winds caused considerable damage in heavily populated areas of north Texas. This damage was most notable in the cities of Dallas, Fort Worth and Plano.", "Event ID": "10039", "Disaster_stringindexer_transform": 18.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 136.0, "Ending Date_stringindexer_transform": 116.0, "Description_stringindexer_transform": 4.0, "Event ID_stringindexer_transform": 235.0}, {"Disaster": "Southern Severe Weather (March 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "3/17/2016", "Ending Date": "3/18/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1282.0, "Deaths": 1, "Description": "Severe hail impacts the Fort Worth and Arlington metro region in Texas. Additional large hail and high wind damage occurred in other locations of Texas, Louisiana and Mississippi.", "Event ID": "10040", "Disaster_stringindexer_transform": 118.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 163.0, "Ending Date_stringindexer_transform": 57.0, "Description_stringindexer_transform": 90.0, "Event ID_stringindexer_transform": 124.0}, {"Disaster": "Texas and Louisiana Flooding (March 2016)", "Disaster Type": "Flooding", "Beginning Date": "3/8/2016", "Ending Date": "3/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2432.0, "Deaths": 5, "Description": "Multiple days of heavy rainfall averaging 15 to 20 inches led to widespread flooding along the Sabine River basin on the Texas and Louisiana border. This prompted numerous evacuations, high-water rescues and destruction, as more than 1,000 homes and businesses were damaged or destroyed.", "Event ID": "10041", "Disaster_stringindexer_transform": 88.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 151.0, "Ending Date_stringindexer_transform": 218.0, "Description_stringindexer_transform": 46.0, "Event ID_stringindexer_transform": 176.0}, {"Disaster": "Southeast and Eastern Tornadoes (February 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "2/22/2016", "Ending Date": "2/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1102.0, "Deaths": 10, "Description": "Early outbreak of tornadoes and severe weather across many southern and eastern states including (AL, CT, FL, GA, LA, MA, MD, MS, NC, NJ, NY, PA, SC, TX, VA). There were at least 50 confirmed tornadoes causing widespread damage.", "Event ID": "10042", "Disaster_stringindexer_transform": 156.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 16.0, "Ending Date_stringindexer_transform": 147.0, "Description_stringindexer_transform": 38.0, "Event ID_stringindexer_transform": 12.0}, {"Disaster": "Western Drought (2015)", "Disaster Type": "Drought", "Beginning Date": "1/1/2015", "Ending Date": "12/31/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 4823.0, "Deaths": 0, "Description": "Drought conditions were present across numerous western states (CA, NV, OR, WA, ID, MT, UT, AZ) with the most severe conditions continuing to plague California for all of 2015. The agriculture sector was again impacted by a lack of rainfall resulting in hundreds of thousands of acres of farmland remaining fallow and requiring excess groundwater pumping to irrigate existing agriculture interests. Wildfire conditions were further enhanced by the ongoing drought. California experienced extensive damage from both drought and wildfire impacts. Drought conditions did improve dramatically across Texas and Oklahoma, in the form of several major flood events.", "Event ID": "10043", "Disaster_stringindexer_transform": 163.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 40.0, "Ending Date_stringindexer_transform": 22.0, "Description_stringindexer_transform": 10.0, "Event ID_stringindexer_transform": 77.0}, {"Disaster": "Texas Tornadoes and Midwest Flooding (December 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "12/26/2015", "Ending Date": "12/29/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2118.0, "Deaths": 50, "Description": "A powerful storm system packing unseasonably strong tornadoes caused widespread destruction in the Dallas metropolitan region, damaging well over 1,000 homes and businesses. This same potent system also produced intense rainfall over several Midwestern states triggering historic flooding that has approached or broken records at river gauges in several states (MO, IL, AR, TN, MS, LA). The flooding has overtopped levees and caused damage in numerous areas. This historic storm also produced high wind, snow and ice impacts from New Mexico through the Midwest and into New England. Overall, the storm caused at least 50 deaths from the combined impact of tornadoes, flooding and winter weather.", "Event ID": "10044", "Disaster_stringindexer_transform": 42.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 214.0, "Ending Date_stringindexer_transform": 191.0, "Description_stringindexer_transform": 150.0, "Event ID_stringindexer_transform": 87.0}, {"Disaster": "Western and Alaskan Wildfires (Summer-Fall 2015)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2015", "Ending Date": "11/30/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 3248.0, "Deaths": 12, "Description": "Wildfires burned over 10.1 million acres across the U.S. in 2015, surpassing 2006 for the highest annual total of U.S. acreage burned since record-keeping began in 1960. The most costly wildfires occurred in California where over 2,500 structures were destroyed due to the Valley and Butte wildfires with the insured losses alone exceeding 1.0 (1.1) billion. The most extensive wildfires occurred in Alaska where over 5 million acres burned within the state. There was extensive burnt acreage across other western states, most notably (OR, WA, ID, MT, ND, CO, WY, TX).", "Event ID": "10045", "Disaster_stringindexer_transform": 82.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 119.0, "Ending Date_stringindexer_transform": 33.0, "Description_stringindexer_transform": 171.0, "Event ID_stringindexer_transform": 35.0}, {"Disaster": "South Carolina and East Coast Flooding (October 2015)", "Disaster Type": "Flooding", "Beginning Date": "10/1/2015", "Ending Date": "10/5/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2158.0, "Deaths": 25, "Description": "Historic levels of flooding impacted South Carolina causing widespread damage to many homes, businesses, public buildings and infrastructure. This interrupted commerce and closed major transportation corridors (such as I-95) for weeks as rivers slowly receded. Locally extreme rainfall totals exceeding 20-inches were common resulting from the convergence of a powerful low pressure system / frontal boundary and copious moisture from Hurricane Joaquin in the Atlantic.", "Event ID": "10046", "Disaster_stringindexer_transform": 32.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 77.0, "Ending Date_stringindexer_transform": 30.0, "Description_stringindexer_transform": 104.0, "Event ID_stringindexer_transform": 212.0}, {"Disaster": "Central and Northeast Severe Weather (June 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "6/21/2015", "Ending Date": "6/25/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1265.0, "Deaths": 1, "Description": "Severe storms across numerous Central and Northeast states (CO, CT, IA, IL, MD, MI, NJ, NY, PA, SD, VA, WI) with widespread hail and high wind damage.", "Event ID": "10047", "Disaster_stringindexer_transform": 36.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 231.0, "Ending Date_stringindexer_transform": 24.0, "Description_stringindexer_transform": 226.0, "Event ID_stringindexer_transform": 156.0}, {"Disaster": "Texas and Oklahoma Flooding and Severe Weather (May 2015)", "Disaster Type": "Flooding", "Beginning Date": "5/23/2015", "Ending Date": "5/26/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2700.0, "Deaths": 31, "Description": "A slow-moving system caused tremendous rainfall and subsequent flooding to occur in Texas and Oklahoma. The Blanco river in Texas swelled from 5 feet to a crest of more than 40 feet over several hours causing considerable property damage and loss of life. The city of Houston also experienced flooding which resulted in hundreds of high-water rescues. The damage in Texas alone exceeded 1.0 (1.1) billion. There was also damage in other states (KS, CO, AR, OH, LA, GA, SC) from associated severe storms.", "Event ID": "10048", "Disaster_stringindexer_transform": 54.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 220.0, "Ending Date_stringindexer_transform": 194.0, "Description_stringindexer_transform": 2.0, "Event ID_stringindexer_transform": 71.0}, {"Disaster": "Southern Plains Tornadoes (May 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "5/6/2015", "Ending Date": "5/10/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1373.0, "Deaths": 4, "Description": "Tornado outbreak across the Southern Plain states (IA, KS, NE, OK, CO, SD, TX) with 122 tornadoes. The most costly damage occurred across Texas and Oklahoma.", "Event ID": "10049", "Disaster_stringindexer_transform": 14.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 32.0, "Ending Date_stringindexer_transform": 143.0, "Description_stringindexer_transform": 106.0, "Event ID_stringindexer_transform": 20.0}, {"Disaster": "South/Southeast Severe Weather (April 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "4/18/2015", "Ending Date": "4/20/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1386.0, "Deaths": 0, "Description": "Severe storms across the South and Southeastern states (AL, AR, FL, GA, KS, LA, MS, NC, OK, SC, TN, TX). High winds and severe hail created the most significant damage in Texas.", "Event ID": "10050", "Disaster_stringindexer_transform": 2.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 11.0, "Ending Date_stringindexer_transform": 85.0, "Description_stringindexer_transform": 142.0, "Event ID_stringindexer_transform": 95.0}, {"Disaster": "Midwest/Ohio Valley Severe Weather (April 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "4/7/2015", "Ending Date": "4/9/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1680.0, "Deaths": 2, "Description": "Severe storms across the Midwest and Ohio Valley including the states (AR, IA, IL, IN, KS, KY, MI, MO, NC, OH, OK, PA, TN, TX, WI, WV). Large hail and high winds created the most damage across Missouri and Illinois.", "Event ID": "10051", "Disaster_stringindexer_transform": 99.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 84.0, "Ending Date_stringindexer_transform": 102.0, "Description_stringindexer_transform": 235.0, "Event ID_stringindexer_transform": 143.0}, {"Disaster": "Central and Eastern Winter storm, Cold Wave (February 2015)", "Disaster Type": "Winter Storm", "Beginning Date": "2/14/2015", "Ending Date": "2/20/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 3199.0, "Deaths": 30, "Description": "A large winter storm and associated cold wave impacted many central, eastern and northeastern states (CT, DE, GA, IL, KY, MA, MD, ME, MI, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA). The city of Boston was particularly impacted as feet of snow continued to accumulate causing load-stress on buildings and clogging transportation corridors. Total, direct losses in Massachusetts alone exceed 1.0 (1.1) billion for this event, with considerable damage in many other states.", "Event ID": "10052", "Disaster_stringindexer_transform": 125.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 223.0, "Ending Date_stringindexer_transform": 181.0, "Description_stringindexer_transform": 137.0, "Event ID_stringindexer_transform": 194.0}, {"Disaster": "Western Drought (2014)", "Disaster Type": "Drought", "Beginning Date": "1/1/2014", "Ending Date": "12/31/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 4287.0, "Deaths": 0, "Description": "Historic drought conditions affected the majority of California for all of 2014 making it the worst drought on record for the state. Surrounding states and parts of Texas, Oklahoma and Kansas also experienced continued severe drought conditions. This is a continuation of drought conditions that have persisted for several years.", "Event ID": "10053", "Disaster_stringindexer_transform": 226.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 149.0, "Ending Date_stringindexer_transform": 134.0, "Description_stringindexer_transform": 197.0, "Event ID_stringindexer_transform": 14.0}, {"Disaster": "Rockies/Plains Severe Weather (September 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "9/29/2014", "Ending Date": "10/2/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1512.0, "Deaths": 0, "Description": "Severe storms across the Rockies and Plains states (CO, KS, TX). Large hail and high winds created significant damage across eastern Colorado and Texas, particularly in the Dallas metro area.", "Event ID": "10054", "Disaster_stringindexer_transform": 235.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 81.0, "Ending Date_stringindexer_transform": 182.0, "Description_stringindexer_transform": 138.0, "Event ID_stringindexer_transform": 79.0}, {"Disaster": "Michigan and Northeast Flooding (August 2014)", "Disaster Type": "Flooding", "Beginning Date": "8/11/2014", "Ending Date": "8/13/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1114.0, "Deaths": 2, "Description": "Heavy rainfall in excess of 5 inches caused significant flooding in cities across Michigan damaging thousands of cars, business, homes and other infrastructure. Flooding also occurred across Maryland and New York's Long Island, as the slow-moving storm system delivered 24-hour rainfall exceeding 6 and 12 inches, respectively, creating more flood damage. Islip, NY received 13.57 inches of rain over a 24-hour period on Aug 12-13 setting a new 24-hour precipitation record for New York.", "Event ID": "10055", "Disaster_stringindexer_transform": 4.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 189.0, "Ending Date_stringindexer_transform": 227.0, "Description_stringindexer_transform": 147.0, "Event ID_stringindexer_transform": 102.0}, {"Disaster": "Rockies/Central Plains Severe Weather (June 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "6/3/2014", "Ending Date": "6/5/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 2072.0, "Deaths": 2, "Description": "Severe storms across the Rockies and Central Plains states (NE, KS, WY, IA, AR). Wind gusts exceeding 90 mph and baseball to softball sized hail caused severe damage to structures and vehicles in central and eastern Nebraska.", "Event ID": "10056", "Disaster_stringindexer_transform": 154.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 165.0, "Ending Date_stringindexer_transform": 177.0, "Description_stringindexer_transform": 6.0, "Event ID_stringindexer_transform": 24.0}, {"Disaster": "Rockies/Midwest/Eastern Severe Weather (May 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "5/18/2014", "Ending Date": "5/23/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 4010.0, "Deaths": 0, "Description": "Severe storms across the Rockies, Midwest and Eastern states (CO, MT, IA, IL, IN, OH, SC, VA, PA, DE, NY) with the most costly damage in Colorado, Illinois and Pennsylvania.", "Event ID": "10057", "Disaster_stringindexer_transform": 37.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 198.0, "Ending Date_stringindexer_transform": 176.0, "Description_stringindexer_transform": 13.0, "Event ID_stringindexer_transform": 182.0}, {"Disaster": "Midwest/Southeast/Northeast Tornadoes and Flooding (April 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "4/27/2014", "Ending Date": "5/1/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1875.0, "Deaths": 33, "Description": "Tornado outbreak across the Midwest, Southeast and Northeast states (AL, AR, DE, FL, GA, KS, MD, MO, MS, NC, NJ, NY, PA, TN, VA) with 83 confirmed tornadoes. Mississippi had its 3rd greatest number of tornadoes reported for any day since 1950. Torrential rainfall in the Florida panhandle also caused major flooding, as Pensacola set new 1-day and 2-day precipitation records of 15.55 and 20.47 inches, respectively. Flooding rains were also reported in coastal Alabama, as Mobile received 11.24 inches of rain, the third greatest calendar day rainfall total for the city.", "Event ID": "10058", "Disaster_stringindexer_transform": 206.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 170.0, "Ending Date_stringindexer_transform": 51.0, "Description_stringindexer_transform": 201.0, "Event ID_stringindexer_transform": 122.0}, {"Disaster": "Plains Severe Weather (April 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/2014", "Ending Date": "4/3/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1537.0, "Deaths": 0, "Description": "Severe storms across the Plains states (IL, KS, MO, TX) causing considerable hail and wind damage in Texas.", "Event ID": "10059", "Disaster_stringindexer_transform": 63.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 27.0, "Ending Date_stringindexer_transform": 221.0, "Description_stringindexer_transform": 233.0, "Event ID_stringindexer_transform": 115.0}, {"Disaster": "Midwest/Southeast/Northeast Winter Storm (January 2014)", "Disaster Type": "Winter Storm", "Beginning Date": "1/5/2014", "Ending Date": "1/8/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 2346.0, "Deaths": 16, "Description": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "Event ID": "10060", "Disaster_stringindexer_transform": 131.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 107.0, "Ending Date_stringindexer_transform": 18.0, "Description_stringindexer_transform": 189.0, "Event ID_stringindexer_transform": 40.0}, {"Disaster": "Western/Plains Drought/Heatwave (Spring-Fall 2013)", "Disaster Type": "Drought", "Beginning Date": "3/1/2013", "Ending Date": "11/30/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 11364.0, "Deaths": 53, "Description": "The 2013 drought slowly dissipated from the historic levels of the 2012 drought, as conditions improved across many Midwestern and Plains states. However, moderate to extreme drought did remain or expand into western states (AZ, CA, CO, IA, ID, IL, KS, MI, MN, MO, ND, NE, NM, NV, OK, OR, SD, TX, UT, WA, WI, WY). In comparison to 2011 and 2012 drought conditions the US experienced only moderate crop losses across the central agriculture states.", "Event ID": "10061", "Disaster_stringindexer_transform": 11.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 104.0, "Ending Date_stringindexer_transform": 149.0, "Description_stringindexer_transform": 43.0, "Event ID_stringindexer_transform": 15.0}, {"Disaster": "Ohio Valley Tornadoes (November 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "11/17/2013", "Ending Date": "11/17/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1188.0, "Deaths": 8, "Description": "Late-season outbreak of tornadoes and severe weather over the Ohio Valley (IL, IN, KY, MI, MO, OH) with 70 confirmed tornadoes. Most severe impacts occurred across Illinois and Indiana.", "Event ID": "10062", "Disaster_stringindexer_transform": 106.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 80.0, "Ending Date_stringindexer_transform": 71.0, "Description_stringindexer_transform": 206.0, "Event ID_stringindexer_transform": 138.0}, {"Disaster": "Colorado Flooding (September 2013)", "Disaster Type": "Flooding", "Beginning Date": "9/10/2013", "Ending Date": "9/16/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1644.0, "Deaths": 9, "Description": "A stalled frontal boundary over Colorado led to record rainfall, as some areas received > 15 inches over several days. This resulted in historic flooding across numerous cities and towns. Destruction of residences, businesses and transportation infrastructure was widespread.", "Event ID": "10063", "Disaster_stringindexer_transform": 47.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 218.0, "Ending Date_stringindexer_transform": 38.0, "Description_stringindexer_transform": 32.0, "Event ID_stringindexer_transform": 197.0}, {"Disaster": "Midwest Severe Weather (August 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "8/6/2013", "Ending Date": "8/7/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1135.0, "Deaths": 0, "Description": "Severe weather and large hail causes considerable damage across Minnesota and Wisconsin.", "Event ID": "10064", "Disaster_stringindexer_transform": 57.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 52.0, "Ending Date_stringindexer_transform": 169.0, "Description_stringindexer_transform": 19.0, "Event ID_stringindexer_transform": 21.0}, {"Disaster": "Midwest/Plains/Northeast Tornadoes (May 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "5/27/2013", "Ending Date": "5/31/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1976.0, "Deaths": 10, "Description": "Outbreak of tornadoes and severe weather over the Midwest, Plains and Northeast (IL, IN, KS, MO, NY, OK, TX) with 92 confirmed tornadoes including the deadly tornado that struck El Reno, OK. There was also significant damage resulting from hail and straight-line wind.", "Event ID": "10065", "Disaster_stringindexer_transform": 46.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 225.0, "Ending Date_stringindexer_transform": 184.0, "Description_stringindexer_transform": 166.0, "Event ID_stringindexer_transform": 67.0}, {"Disaster": "Midwest/Plains/East Tornadoes (May 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "5/18/2013", "Ending Date": "5/22/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 2616.0, "Deaths": 27, "Description": "Outbreak of tornadoes and severe weather over the Midwest, Plains and Eastern states (GA, IA, IL, KS, MO, NY, OK, TX) with 59 confirmed tornadoes including the deadly tornado that impacted Moore, OK. Many destructive tornadoes remained on the ground for an extended time.", "Event ID": "10066", "Disaster_stringindexer_transform": 168.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 26.0, "Ending Date_stringindexer_transform": 14.0, "Description_stringindexer_transform": 209.0, "Event ID_stringindexer_transform": 94.0}, {"Disaster": "Illinois Flooding and Severe Weather (April 2013)", "Disaster Type": "Flooding", "Beginning Date": "4/16/2013", "Ending Date": "4/19/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1174.0, "Deaths": 4, "Description": "A slow-moving storm system created rainfall totals of 5 to 10 inches across northern and central Illinois including the Chicago metro. This resulted in damage to many homes and businesses. There was also severe weather damage from wind and hail across Indiana and Missouri.", "Event ID": "10067", "Disaster_stringindexer_transform": 223.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 35.0, "Ending Date_stringindexer_transform": 113.0, "Description_stringindexer_transform": 186.0, "Event ID_stringindexer_transform": 27.0}, {"Disaster": "Midwest/Plains Severe Weather (April 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "4/7/2013", "Ending Date": "4/11/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1574.0, "Deaths": 1, "Description": "Severe weather across the Midwest and Plains states (IN, KS, MO, NE) with a total of 26 confirmed tornadoes. Considerable damage resulting from hail and straight-line wind.", "Event ID": "10068", "Disaster_stringindexer_transform": 79.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 193.0, "Ending Date_stringindexer_transform": 109.0, "Description_stringindexer_transform": 97.0, "Event ID_stringindexer_transform": 193.0}, {"Disaster": "Southeast Severe Weather (March 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "3/18/2013", "Ending Date": "3/18/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 2201.0, "Deaths": 1, "Description": "Severe weather over the Southeast (MS, AL, GA, TN) with 10 confirmed tornadoes. Considerable damage resulting from large hail and straight-line wind.", "Event ID": "10069", "Disaster_stringindexer_transform": 161.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 175.0, "Ending Date_stringindexer_transform": 167.0, "Description_stringindexer_transform": 89.0, "Event ID_stringindexer_transform": 173.0}, {"Disaster": "U.S. Drought/Heatwave (2012)", "Disaster Type": "Drought", "Beginning Date": "1/1/2012", "Ending Date": "12/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 33304.0, "Deaths": 123, "Description": "The 2012 drought is the most extensive drought to affect the U.S. since the 1930s. Moderate to extreme drought conditions affected more than half the country for a majority of 2012. The following states were affected: CA, NV, ID, MT, WY, UT, CO, AZ, NM, TX, ND, SD, NE, KS, OK, AR, MO, IA, MN, IL, IN, GA. Costly drought impacts occurred across the central agriculture states resulting in widespread harvest failure for corn, sorghum and soybean crops, among others. The associated summer heatwave also caused 123 direct deaths, but an estimate of the excess mortality due to heat stress is still unknown.", "Event ID": "10070", "Disaster_stringindexer_transform": 158.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 43.0, "Ending Date_stringindexer_transform": 17.0, "Description_stringindexer_transform": 15.0, "Event ID_stringindexer_transform": 5.0}, {"Disaster": "Western Wildfires (Summer-Fall 2012)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2012", "Ending Date": "11/30/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1929.0, "Deaths": 8, "Description": "Wildfires burned over 9.2 million acres across the U.S. in 2012. This is the 3rd highest annual total since the year 2000. The most damaging wildfires occurred in the western states (CO, ID, WY, MT, CA, NV, OR, WA). Colorado experienced the most costly wildfires (e.g., Waldo Canyon fire) where several hundred residences were destroyed.", "Event ID": "10071", "Disaster_stringindexer_transform": 173.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 94.0, "Ending Date_stringindexer_transform": 45.0, "Description_stringindexer_transform": 204.0, "Event ID_stringindexer_transform": 183.0}, {"Disaster": "Hurricane Sandy (October 2012)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/30/2012", "Ending Date": "10/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 72193.0, "Deaths": 159, "Description": "Extensive damage across several northeastern states (MD, DE, NJ, NY, CT, MA, RI) due to high wind and coastal storm surge, particularly NY and NJ. Damage from wind, rain and heavy snow also extended more broadly to other states (NC, VA, WV, OH, PA, NH), as Sandy merged with a developing Nor'easter. Sandy's impact on major population centers caused widespread interruption to critical water / electrical services and also caused 159 deaths (72 direct, 87 indirect). Sandy also caused the New York Stock Exchange to close for two consecutive business days, which last happened in 1888 due to a major winter storm.", "Event ID": "10072", "Disaster_stringindexer_transform": 175.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 102.0, "Ending Date_stringindexer_transform": 133.0, "Description_stringindexer_transform": 158.0, "Event ID_stringindexer_transform": 132.0}, {"Disaster": "Hurricane Isaac (August 2012)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/26/2012", "Ending Date": "8/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3067.0, "Deaths": 9, "Description": "Category 1 hurricane made landfall over Louisiana. Isaac's slow motion and large size led to a large storm surge and flooding rains. This created damage across several southeastern states (LA, MS, AL, FL) including 9 deaths (5 direct, 4 indirect).", "Event ID": "10073", "Disaster_stringindexer_transform": 96.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 143.0, "Ending Date_stringindexer_transform": 198.0, "Description_stringindexer_transform": 1.0, "Event ID_stringindexer_transform": 116.0}, {"Disaster": "Plains/East/Northeast Severe Weather (June-July 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "6/29/2012", "Ending Date": "7/2/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3206.0, "Deaths": 28, "Description": "Sustained outbreak of thunderstorms / high winds from a strong derecho event over the central, eastern, and northeastern states (IL, IN, KY, OH, WV, SC, NC, VA, MD, DC, NJ).", "Event ID": "10074", "Disaster_stringindexer_transform": 153.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 79.0, "Ending Date_stringindexer_transform": 138.0, "Description_stringindexer_transform": 57.0, "Event ID_stringindexer_transform": 51.0}, {"Disaster": "Rockies/Southwest Severe Weather (June 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2012", "Ending Date": "6/12/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 2883.0, "Deaths": 0, "Description": "Severe storms and damaging hail over several states (CO, NM, TX) with 25 confirmed tornadoes. Colorado experienced over 1.0 (1.1) billion in damage due to hail.", "Event ID": "10075", "Disaster_stringindexer_transform": 188.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 192.0, "Ending Date_stringindexer_transform": 179.0, "Description_stringindexer_transform": 107.0, "Event ID_stringindexer_transform": 202.0}, {"Disaster": "Southern Plains/Midwest/Northeast Severe Weather (May 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "5/25/2012", "Ending Date": "5/30/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 2557.0, "Deaths": 1, "Description": "Severe storms over the southern plains, midwest and northeast (TX, OK, KS, MN, PA, NY) with 27 confirmed tornadoes. Significant damage also from severe hail and straight-line winds.", "Event ID": "10076", "Disaster_stringindexer_transform": 16.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 22.0, "Ending Date_stringindexer_transform": 150.0, "Description_stringindexer_transform": 14.0, "Event ID_stringindexer_transform": 147.0}, {"Disaster": "Midwest/Ohio Valley Severe Weather (April-May 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/28/2012", "Ending Date": "5/1/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3636.0, "Deaths": 1, "Description": "Severe weather over the midwest and Ohio Valley (TX, OK, KS, MO, IL, IN, KY) with 38 confirmed tornadoes. Considerable damage resulting from hail.", "Event ID": "10077", "Disaster_stringindexer_transform": 108.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 148.0, "Ending Date_stringindexer_transform": 59.0, "Description_stringindexer_transform": 153.0, "Event ID_stringindexer_transform": 160.0}, {"Disaster": "Midwest Tornadoes (April 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2012", "Ending Date": "4/14/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1247.0, "Deaths": 6, "Description": "Outbreak of tornadoes and severe weather over the midwest (OK, KS, NE, IA) with 98 confirmed tornadoes including many tornadoes that remained on the ground for an extended time - traveling tens of miles.", "Event ID": "10078", "Disaster_stringindexer_transform": 21.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 112.0, "Ending Date_stringindexer_transform": 123.0, "Description_stringindexer_transform": 27.0, "Event ID_stringindexer_transform": 218.0}, {"Disaster": "Texas Tornadoes (April 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/2012", "Ending Date": "4/3/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1126.0, "Deaths": 0, "Description": "Outbreak of tornadoes across the greater Dallas-Ft. Worth metropolitan area. Several moderate strength tornadoes (EF-2 and EF-3) affected towns in this area with a total of 22 confirmed tornadoes.", "Event ID": "10079", "Disaster_stringindexer_transform": 231.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 224.0, "Ending Date_stringindexer_transform": 112.0, "Description_stringindexer_transform": 7.0, "Event ID_stringindexer_transform": 30.0}, {"Disaster": "Southeast/Ohio Valley Tornadoes (March 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "3/2/2012", "Ending Date": "3/3/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3473.0, "Deaths": 42, "Description": "Outbreak of tornadoes and severe weather over the southeast and Ohio Valley (AL, GA, IN, OH, KY, TN) with 75 confirmed tornadoes.", "Event ID": "10080", "Disaster_stringindexer_transform": 169.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 145.0, "Ending Date_stringindexer_transform": 108.0, "Description_stringindexer_transform": 125.0, "Event ID_stringindexer_transform": 58.0}, {"Disaster": "Texas, New Mexico, Arizona Wildfires (Summer-Fall 2011)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2011", "Ending Date": "11/30/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2075.0, "Deaths": 5, "Description": "Continued drought conditions and periods of extreme heat provided conditions favorable for a series of historic wildfires across Texas, New Mexico and Arizona. The Bastrop Fire in Texas was the most destructive fire in Texas history destroying over 1,500 homes. The Wallow Fire consumed over 500,000 acres in Arizona making it the largest on record in Arizona. The Las Conchas Fire in New Mexico was also the state's largest wildfire on record scorching over 150,000 acres while threatening the Los Alamos National Laboratory. Over 3 million acres have burned across Texas this wildfire season.", "Event ID": "10081", "Disaster_stringindexer_transform": 68.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 100.0, "Ending Date_stringindexer_transform": 91.0, "Description_stringindexer_transform": 53.0, "Event ID_stringindexer_transform": 6.0}, {"Disaster": "Tropical Storm Lee (September 2011)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/1/2011", "Ending Date": "9/5/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2864.0, "Deaths": 21, "Description": "Wind and flood damage across the southeast (LA, MS, AL, GA, TN) but considerably more damage from record flooding across the northeast (PA, NY, NJ, CT, VA, MD). Pennsylvania and New York were most affected.", "Event ID": "10082", "Disaster_stringindexer_transform": 115.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 122.0, "Ending Date_stringindexer_transform": 9.0, "Description_stringindexer_transform": 36.0, "Event ID_stringindexer_transform": 187.0}, {"Disaster": "Southern Plains/Southwest Drought & Heat Wave (Spring-Summer 2011)", "Disaster Type": "Drought", "Beginning Date": "3/1/2011", "Ending Date": "8/31/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 13684.0, "Deaths": 95, "Description": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "Event ID": "10083", "Disaster_stringindexer_transform": 182.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 157.0, "Ending Date_stringindexer_transform": 230.0, "Description_stringindexer_transform": 72.0, "Event ID_stringindexer_transform": 119.0}, {"Disaster": "Hurricane Irene (August 2011)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/26/2011", "Ending Date": "8/28/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 15383.0, "Deaths": 45, "Description": "Category 1 hurricane made landfall over coastal NC and moved northward along the Mid-Atlantic Coast (NC, VA, MD, NJ, NY, CT, RI, MA, VT) causing torrential rainfall and flooding across the Northeast. Wind damage in coastal NC, VA, and MD was moderate with considerable damage resulting from falling trees and power lines, while flooding caused extensive flood damage across NJ, NY, and VT. Over seven million homes and businesses lost power during the storm. Numerous tornadoes were also reported in several states further adding to the damage.", "Event ID": "10084", "Disaster_stringindexer_transform": 193.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 199.0, "Ending Date_stringindexer_transform": 69.0, "Description_stringindexer_transform": 139.0, "Event ID_stringindexer_transform": 105.0}, {"Disaster": "Midwest/Southeast Severe Weather (August 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "8/17/2011", "Ending Date": "8/18/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1312.0, "Deaths": 0, "Description": "Severe weather impacts the states IA, KS, MO, NE, SD across the Midwest and Southeast.", "Event ID": "10085", "Disaster_stringindexer_transform": 74.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 83.0, "Ending Date_stringindexer_transform": 117.0, "Description_stringindexer_transform": 95.0, "Event ID_stringindexer_transform": 53.0}, {"Disaster": "Rockies and Midwest Severe Weather (July 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "7/10/2011", "Ending Date": "7/14/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1396.0, "Deaths": 2, "Description": "An outbreak of tornadoes, hail, and high wind caused damage east of the Rockies and across the central plains (CO, WY, IA, IL, MI, MN, OH).", "Event ID": "10086", "Disaster_stringindexer_transform": 166.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 117.0, "Ending Date_stringindexer_transform": 62.0, "Description_stringindexer_transform": 17.0, "Event ID_stringindexer_transform": 204.0}, {"Disaster": "Missouri River flooding (May-June 2011)", "Disaster Type": "Flooding", "Beginning Date": "5/1/2011", "Ending Date": "6/30/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2282.0, "Deaths": 5, "Description": "Melting of an above-average snow pack across the Northern Rocky Mountains combined with above-average precipitation caused the Missouri and Souris Rivers to swell beyond their banks across the Upper Midwest (MT, ND, SD, NE, IA, KS, MO). An estimated 11,000 people were forced to evacuate Minot, North Dakota due to the record high water level of the Souris River, where 4,000 homes were flooded. Numerous levees were breached along the Missouri River, flooding thousands of acres of farmland.", "Event ID": "10087", "Disaster_stringindexer_transform": 17.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 215.0, "Ending Date_stringindexer_transform": 104.0, "Description_stringindexer_transform": 117.0, "Event ID_stringindexer_transform": 136.0}, {"Disaster": "Midwest/Southeast Tornadoes and Severe Weather (June 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "6/18/2011", "Ending Date": "6/22/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1752.0, "Deaths": 3, "Description": "Outbreak of tornadoes over central states (OK, TX, KS, NE, MO, IA, IL) with an estimated 81 tornadoes. Additional wind and hail damage across the Southeast (TN, GA, NC, SC).", "Event ID": "10088", "Disaster_stringindexer_transform": 71.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 21.0, "Ending Date_stringindexer_transform": 80.0, "Description_stringindexer_transform": 132.0, "Event ID_stringindexer_transform": 149.0}, {"Disaster": "Mississippi River flooding (April-May 2011)", "Disaster Type": "Flooding", "Beginning Date": "4/1/2011", "Ending Date": "5/31/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 3404.0, "Deaths": 7, "Description": "Persistent rainfall (nearly 300 percent normal precipitation amounts in the Ohio Valley) combined with melting snowpack caused historical flooding along the Mississippi River and its tributaries. Examples of economic damage include: 500 (570.0) million to agriculture in Arkansas; 320 (364.8) million in damage to Memphis, Tennessee; 800 (912.0) million to agriculture in Mississippi; 317 (361.4) million to agriculture and property in Missouri's Birds Point-New Madrid Spillway; 80 (91.2) million for the first 30 days of flood fighting efforts in Louisiana.", "Event ID": "10089", "Disaster_stringindexer_transform": 35.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 34.0, "Ending Date_stringindexer_transform": 29.0, "Description_stringindexer_transform": 126.0, "Event ID_stringindexer_transform": 222.0}, {"Disaster": "Midwest/Southeast Tornadoes (May 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "5/22/2011", "Ending Date": "5/27/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 10370.0, "Deaths": 177, "Description": "Outbreak of tornadoes over central and southern states (MO, TX, OK, KS, AR, GA, TN, VA, KY, IN, IL, OH, WI, MN, PA) with an estimated 180 tornadoes. Notably, an EF-5 tornado struck Joplin, MO resulting in at least 160 deaths, making it the deadliest single tornado to strike the U.S. since modern tornado record keeping began in 1950.", "Event ID": "10090", "Disaster_stringindexer_transform": 143.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 95.0, "Ending Date_stringindexer_transform": 118.0, "Description_stringindexer_transform": 181.0, "Event ID_stringindexer_transform": 141.0}, {"Disaster": "Southeast/Ohio Valley/Midwest Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/25/2011", "Ending Date": "4/28/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 11653.0, "Deaths": 321, "Description": "Outbreak of tornadoes over central and southern states (AL, AR, LA, MS, GA, TN, VA, KY, IL, MO, OH, TX, OK) with an estimated 343 tornadoes. The deadliest tornado of the outbreak, an EF-5, hit northern Alabama, killing 78 people. Several major metropolitan areas were directly impacted by strong tornadoes including Tuscaloosa, Birmingham, and Huntsville in Alabama and Chattanooga, Tennessee, causing the estimated damage costs to soar.", "Event ID": "10091", "Disaster_stringindexer_transform": 133.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 19.0, "Ending Date_stringindexer_transform": 97.0, "Description_stringindexer_transform": 84.0, "Event ID_stringindexer_transform": 70.0}, {"Disaster": "Ohio Valley/South Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/19/2011", "Ending Date": "4/20/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1182.0, "Deaths": 0, "Description": "Dozens of tornadoes and severe storms affect the states AR, IL, IN, KY, MO, OH, TN, TX across the Ohio Valley and South.", "Event ID": "10092", "Disaster_stringindexer_transform": 34.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 221.0, "Ending Date_stringindexer_transform": 76.0, "Description_stringindexer_transform": 22.0, "Event ID_stringindexer_transform": 93.0}, {"Disaster": "Midwest/Southeast Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/14/2011", "Ending Date": "4/16/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2347.0, "Deaths": 38, "Description": "Outbreak of tornadoes over central and southern states (OK, TX, AR, MS, AL, GA, NC, SC, VA, PA) with an estimated 177 tornadoes.", "Event ID": "10093", "Disaster_stringindexer_transform": 0.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 46.0, "Ending Date_stringindexer_transform": 127.0, "Description_stringindexer_transform": 86.0, "Event ID_stringindexer_transform": 189.0}, {"Disaster": "Southeast/Midwest Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/8/2011", "Ending Date": "4/11/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2484.0, "Deaths": 0, "Description": "Outbreak of tornadoes over central and southern states (NC, SC, TN, AL, TX, OK, KS, IA, WI) with an estimated 59 tornadoes.", "Event ID": "10094", "Disaster_stringindexer_transform": 189.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 10.0, "Ending Date_stringindexer_transform": 190.0, "Description_stringindexer_transform": 203.0, "Event ID_stringindexer_transform": 127.0}, {"Disaster": "Midwest/Southeast Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/4/2011", "Ending Date": "4/5/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 3163.0, "Deaths": 9, "Description": "Outbreak of tornadoes over central and southern states (KS, MO, IA, IL, WI, KY, GA, TN, NC, SC) with an estimated 46 tornadoes.", "Event ID": "10095", "Disaster_stringindexer_transform": 0.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 118.0, "Ending Date_stringindexer_transform": 48.0, "Description_stringindexer_transform": 8.0, "Event ID_stringindexer_transform": 88.0}, {"Disaster": "Groundhog Day Blizzard (February 2011)", "Disaster Type": "Winter Storm", "Beginning Date": "2/1/2011", "Ending Date": "2/3/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2045.0, "Deaths": 36, "Description": "A large winter storm impacted many central, eastern and northeastern states. The city of Chicago was brought to a virtual standstill as between 1 and 2 feet of snow fell over the area.", "Event ID": "10096", "Disaster_stringindexer_transform": 85.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 233.0, "Ending Date_stringindexer_transform": 115.0, "Description_stringindexer_transform": 75.0, "Event ID_stringindexer_transform": 49.0}, {"Disaster": "Arizona Severe Weather (October 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "10/5/2010", "Ending Date": "10/6/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 4408.0, "Deaths": 0, "Description": "An unusual series of severe thunderstorms across Arizona produced numerous tornadoes and widespread, severe hail damage. Over one-hundred buildings were damaged or destroyed by tornadoes while thousands of automobiles and buildings were damaged by large hail across Phoenix and surrounding cities.", "Event ID": "10097", "Disaster_stringindexer_transform": 112.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 44.0, "Ending Date_stringindexer_transform": 73.0, "Description_stringindexer_transform": 109.0, "Event ID_stringindexer_transform": 233.0}, {"Disaster": "Midwest/Northeast Severe Storms and Flooding (July 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "7/20/2010", "Ending Date": "7/23/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 1100.0, "Deaths": 0, "Description": "Severe storms and flooding affect the states IA, IL, MD, NY, PA, WI across the Midwest and Northeast.", "Event ID": "10098", "Disaster_stringindexer_transform": 77.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 147.0, "Ending Date_stringindexer_transform": 174.0, "Description_stringindexer_transform": 234.0, "Event ID_stringindexer_transform": 177.0}, {"Disaster": "Rockies/Central/East Severe Weather (June 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "6/10/2010", "Ending Date": "6/15/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 1045.0, "Deaths": 2, "Description": "Severe storms cause high wind and hail damage across numerous states including CO, NM, KS, OK, IL, IN, GA, SC and NC.", "Event ID": "10099", "Disaster_stringindexer_transform": 91.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 50.0, "Ending Date_stringindexer_transform": 12.0, "Description_stringindexer_transform": 103.0, "Event ID_stringindexer_transform": 164.0}, {"Disaster": "Oklahoma, Kansas, and Texas Tornadoes and Severe Weather (May 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "5/10/2010", "Ending Date": "5/12/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 3867.0, "Deaths": 3, "Description": "An outbreak of tornadoes, hail, and severe thunderstorms occurred across Oklahoma, Kansas, and Texas in mid-May. Oklahoma was hardest hit with > 1.5 (1.7) billion in damages.", "Event ID": "10100", "Disaster_stringindexer_transform": 159.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 101.0, "Ending Date_stringindexer_transform": 120.0, "Description_stringindexer_transform": 44.0, "Event ID_stringindexer_transform": 60.0}, {"Disaster": "East/South Flooding and Severe Weather (May 2010)", "Disaster Type": "Flooding", "Beginning Date": "4/30/2010", "Ending Date": "5/2/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 2628.0, "Deaths": 32, "Description": "Flooding, hail, tornadoes, and severe thunderstorms occurred across many Southern states (TN, AR, AL, KY, MS, GA) on April 30-May 2. Flooding in the Nashville, TN area alone contributed > 1.0 (1.2) billion in damages. Western and Middle Tennessee were hardest hit with local rainfall amounts of 18-20 inches to the south and west of Greater Nashville.", "Event ID": "10101", "Disaster_stringindexer_transform": 33.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 64.0, "Ending Date_stringindexer_transform": 197.0, "Description_stringindexer_transform": 227.0, "Event ID_stringindexer_transform": 121.0}, {"Disaster": "Northeast Flooding (March 2010)", "Disaster Type": "Flooding", "Beginning Date": "3/1/2010", "Ending Date": "3/31/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 2139.0, "Deaths": 11, "Description": "Heavy rainfall over portions of the Northeast in late March caused extensive flooding across several states (RI, CT, MA, NJ, NY, PA). The event caused the worst flooding in Rhode Island's history.", "Event ID": "10102", "Disaster_stringindexer_transform": 176.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 86.0, "Ending Date_stringindexer_transform": 41.0, "Description_stringindexer_transform": 78.0, "Event ID_stringindexer_transform": 205.0}, {"Disaster": "Southwest/Great Plains Drought (2009)", "Disaster Type": "Drought", "Beginning Date": "1/1/2009", "Ending Date": "12/31/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 4155.0, "Deaths": 0, "Description": "Drought conditions occurred during much of the year across parts of the Southwest, Great Plains, and southern Texas causing agricultural losses in numerous states (TX, OK, KS, CA, NM, AZ). The largest agriculture losses occurred in TX and CA.", "Event ID": "10103", "Disaster_stringindexer_transform": 217.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 201.0, "Ending Date_stringindexer_transform": 100.0, "Description_stringindexer_transform": 0.0, "Event ID_stringindexer_transform": 39.0}, {"Disaster": "Western Wildfires (Summer-Fall 2009)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2009", "Ending Date": "11/30/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1206.0, "Deaths": 10, "Description": "\"Residual and sustained drought conditions across western and south-central states resulted in thousands of wildfires. Most affected states include CA, AZ, NM, TX, OK, and UT. National acreage burned exceeding 5.9 million. Over 200 homes and structures destroyed in the California \"\"Station\"\" fire alone.\"", "Event ID": "10104", "Disaster_stringindexer_transform": 29.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 181.0, "Ending Date_stringindexer_transform": 128.0, "Description_stringindexer_transform": 143.0, "Event ID_stringindexer_transform": 134.0}, {"Disaster": "Colorado Hail Storm (July 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "7/20/2009", "Ending Date": "7/20/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1190.0, "Deaths": 0, "Description": "Severe hail impacts Colorado. Jefferson County was most affected with hail at least 8 inches deep. The hail damage from this storm was comparable to the July 11, 1990 Colorado hail storm.", "Event ID": "10105", "Disaster_stringindexer_transform": 7.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 155.0, "Ending Date_stringindexer_transform": 152.0, "Description_stringindexer_transform": 62.0, "Event ID_stringindexer_transform": 167.0}, {"Disaster": "Midwest, South and East Severe Weather (June 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "6/9/2009", "Ending Date": "6/12/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1580.0, "Deaths": 0, "Description": "Sustained outbreak of thunderstorms and high winds from a strong derecho event over the central, southern, and eastern states (TX, OK, MO, NE, KS, AR, AL, MS, TN, NC, SC, KY, PA).", "Event ID": "10106", "Disaster_stringindexer_transform": 86.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 72.0, "Ending Date_stringindexer_transform": 21.0, "Description_stringindexer_transform": 28.0, "Event ID_stringindexer_transform": 4.0}, {"Disaster": "South/Southeast Severe Weather & Tornadoes (April 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "4/9/2009", "Ending Date": "4/10/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1701.0, "Deaths": 6, "Description": "Outbreak of tornadoes, hail and severe thunderstorms over the south and southeastern states (AL, AR, GA, KY, MO, SC, TN) with 85 confirmed tornadoes.", "Event ID": "10107", "Disaster_stringindexer_transform": 27.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 204.0, "Ending Date_stringindexer_transform": 132.0, "Description_stringindexer_transform": 210.0, "Event ID_stringindexer_transform": 54.0}, {"Disaster": "Midwest/Southeast Tornadoes (March 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "3/25/2009", "Ending Date": "3/28/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1952.0, "Deaths": 0, "Description": "Outbreak of tornadoes over central and southern states (NE, KS, OK, IA, TX, LA, MS, AL, GA, TN, KY) with 56 tornadoes confirmed.", "Event ID": "10108", "Disaster_stringindexer_transform": 132.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 180.0, "Ending Date_stringindexer_transform": 95.0, "Description_stringindexer_transform": 215.0, "Event ID_stringindexer_transform": 210.0}, {"Disaster": "Southeast/Ohio Valley Severe Weather (February 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "2/10/2009", "Ending Date": "2/11/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 2070.0, "Deaths": 10, "Description": "Complex of severe thunderstorms and high winds across the region (TN, KY, OK, OH, VA, WV, PA).", "Event ID": "10109", "Disaster_stringindexer_transform": 220.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 134.0, "Ending Date_stringindexer_transform": 145.0, "Description_stringindexer_transform": 214.0, "Event ID_stringindexer_transform": 151.0}, {"Disaster": "U.S. Drought (2008)", "Disaster Type": "Drought", "Beginning Date": "1/1/2008", "Ending Date": "12/31/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 8341.0, "Deaths": 0, "Description": "Severe drought and heat caused agricultural losses across a large portion of the U.S. Record low lake levels also occurred in areas of the southeast. The states impacted include AL, AR, CA, CO, GA, ID, IN, KS, KY, MD, MN, MS, MT, NC, ND, NJ, NM, OH, OK, OR, SC, TN, TX, UT, VA, WA and WI.", "Event ID": "10110", "Disaster_stringindexer_transform": 219.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 13.0, "Ending Date_stringindexer_transform": 37.0, "Description_stringindexer_transform": 124.0, "Event ID_stringindexer_transform": 112.0}, {"Disaster": "U.S. Wildfires (Fall 2008)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2008", "Ending Date": "11/30/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1468.0, "Deaths": 16, "Description": "Drought conditions across numerous western, central and southeastern states (AK, AZ, CA, NM, ID, UT, MT, NV, OR, WA, CO, TX, OK, NC, FL ) resulted in thousands of wildfires; national acreage burned exceeding 5.2 million acres (mainly in the west) and over 1,000 homes and structures destroyed in California fires alone.", "Event ID": "10111", "Disaster_stringindexer_transform": 97.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 116.0, "Ending Date_stringindexer_transform": 65.0, "Description_stringindexer_transform": 113.0, "Event ID_stringindexer_transform": 190.0}, {"Disaster": "Hurricane Ike (September 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/12/2008", "Ending Date": "9/14/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 35698.0, "Deaths": 112, "Description": "Category 2 hurricane makes landfall in Texas, as the largest (in size) Atlantic hurricane on record, causing considerable storm surge in coastal TX and significant wind and flooding damage in TX, LA, AR, TN, IL, IN, KY, MO, OH, MI and PA. Severe gasoline shortages occurred in the southeast U.S. due to damaged oil platforms, storage tanks, pipelines and off-line refineries.", "Event ID": "10112", "Disaster_stringindexer_transform": 38.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 154.0, "Ending Date_stringindexer_transform": 201.0, "Description_stringindexer_transform": 144.0, "Event ID_stringindexer_transform": 129.0}, {"Disaster": "Hurricane Gustav (September 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/31/2008", "Ending Date": "9/3/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 7136.0, "Deaths": 53, "Description": "Category 2 hurricane makes landfall in Louisiana causing significant wind, storm surge, and flooding damage in AL, AR, LA, and MS.", "Event ID": "10113", "Disaster_stringindexer_transform": 150.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 184.0, "Ending Date_stringindexer_transform": 160.0, "Description_stringindexer_transform": 24.0, "Event ID_stringindexer_transform": 75.0}, {"Disaster": "Hurricane Dolly (July 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/23/2008", "Ending Date": "7/25/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1508.0, "Deaths": 3, "Description": "Category 2 hurricane makes landfall in southern Texas causing considerable wind and flooding damage in TX and NM.", "Event ID": "10114", "Disaster_stringindexer_transform": 232.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 121.0, "Ending Date_stringindexer_transform": 217.0, "Description_stringindexer_transform": 223.0, "Event ID_stringindexer_transform": 36.0}, {"Disaster": "Midwest Flooding (Summer 2008)", "Disaster Type": "Flooding", "Beginning Date": "4/1/2008", "Ending Date": "6/30/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 11850.0, "Deaths": 24, "Description": "Heavy rain and flooding caused significant agricultural loss and property damage in IA, IL, IN, MO, MN, NE, and WI with IA being hardest hit with widespread rainfall totals ranging from 4 to over 16 inches.", "Event ID": "10115", "Disaster_stringindexer_transform": 167.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 128.0, "Ending Date_stringindexer_transform": 110.0, "Description_stringindexer_transform": 220.0, "Event ID_stringindexer_transform": 236.0}, {"Disaster": "Midwest/Mid-Atlantic Severe Weather (June 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2008", "Ending Date": "6/12/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1946.0, "Deaths": 18, "Description": "An outbreak of tornadoes and thunderstorms over the Midwest/Mid-Atlantic states (IA, IL, IN, KS, NE, MI, MN, MO, OK, WI, MD, VA, WV).", "Event ID": "10116", "Disaster_stringindexer_transform": 44.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 216.0, "Ending Date_stringindexer_transform": 202.0, "Description_stringindexer_transform": 29.0, "Event ID_stringindexer_transform": 145.0}, {"Disaster": "Midwest Tornadoes and Severe Weather (May 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "5/22/2008", "Ending Date": "5/27/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 3605.0, "Deaths": 13, "Description": "Outbreak of tornadoes over the Midwest/Ohio Valley regions (IL, IN, IA, KS, MN, NE, OK, WY, CO) with 235 tornadoes confirmed.", "Event ID": "10117", "Disaster_stringindexer_transform": 76.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 6.0, "Ending Date_stringindexer_transform": 146.0, "Description_stringindexer_transform": 42.0, "Event ID_stringindexer_transform": 90.0}, {"Disaster": "Southern Severe Weather (April 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "4/9/2008", "Ending Date": "4/11/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1237.0, "Deaths": 2, "Description": "Severe storms affect Arkansas, Oklahoma and Texas across the South.", "Event ID": "10118", "Disaster_stringindexer_transform": 66.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 99.0, "Ending Date_stringindexer_transform": 178.0, "Description_stringindexer_transform": 160.0, "Event ID_stringindexer_transform": 83.0}, {"Disaster": "Southeast Tornadoes (March 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "3/14/2008", "Ending Date": "3/15/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1345.0, "Deaths": 5, "Description": "Tornadoes and severe weather across Georgia and South Carolina. This includes an EF-2 tornado causing damage to numerous buildings in downtown Atlanta.", "Event ID": "10119", "Disaster_stringindexer_transform": 110.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 29.0, "Ending Date_stringindexer_transform": 223.0, "Description_stringindexer_transform": 79.0, "Event ID_stringindexer_transform": 161.0}, {"Disaster": "Southeast Tornadoes and Severe Weather (February 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "2/5/2008", "Ending Date": "2/6/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1441.0, "Deaths": 57, "Description": "Series of tornadoes and severe thunderstorms across the Southeast and Midwest states (AL, AR, IN, KY, MS, OH, TN, TX) with 87 tornadoes confirmed.", "Event ID": "10120", "Disaster_stringindexer_transform": 177.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 127.0, "Ending Date_stringindexer_transform": 86.0, "Description_stringindexer_transform": 30.0, "Event ID_stringindexer_transform": 165.0}, {"Disaster": "Western/Eastern Drought/Heatwave (Summer-Fall 2007)", "Disaster Type": "Drought", "Beginning Date": "6/1/2007", "Ending Date": "11/30/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 4422.0, "Deaths": 15, "Description": "Severe drought with periods of extreme heat over most of the southeast and portions of the Great Plains, Ohio Valley, and Great Lakes area, resulting in major reductions in crop yields, along with very low stream-flows and lake levels. Includes states of ND, SD, NE, KS, OK, TX, MN, WI, IA, MO, AR, LA, MS, AL, GA, NC, SC, FL, TN, VA, WV, KY, IN, IL, OH, MI, PA, NY.", "Event ID": "10121", "Disaster_stringindexer_transform": 174.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 1.0, "Ending Date_stringindexer_transform": 107.0, "Description_stringindexer_transform": 224.0, "Event ID_stringindexer_transform": 110.0}, {"Disaster": "Western Wildfires (Summer 2007)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2007", "Ending Date": "8/31/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 3426.0, "Deaths": 12, "Description": "Continued drought conditions and high winds over much of the western U.S. (AK, AZ, CA, ID, UT, MT, NV, OR, WA) resulting in numerous wildfires; with national acreage burned exceeding 8.9 million acres (mainly in the west) and over 3,000 homes and structures destroyed in southern California alone.", "Event ID": "10122", "Disaster_stringindexer_transform": 31.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 1.0, "Ending Date_stringindexer_transform": 111.0, "Description_stringindexer_transform": 82.0, "Event ID_stringindexer_transform": 188.0}, {"Disaster": "East/South Severe Weather and Flooding (April 2007)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2007", "Ending Date": "4/17/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 3135.0, "Deaths": 9, "Description": "\"Flooding, hail, tornadoes, and severe thunderstorms across numerous states (CT, DE, GA, LA, ME, MD, MA, MS, NH, NJ, NY, NC, PA, RI, SC, TX, VT, VA) in mid-April, including 3 \"\"killer\"\" tornadoes.\"", "Event ID": "10123", "Disaster_stringindexer_transform": 225.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 152.0, "Ending Date_stringindexer_transform": 161.0, "Description_stringindexer_transform": 37.0, "Event ID_stringindexer_transform": 144.0}, {"Disaster": "Spring Freeze (April 2007)", "Disaster Type": "Freeze", "Beginning Date": "4/4/2007", "Ending Date": "4/10/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 2555.0, "Deaths": 0, "Description": "Widespread severe freeze over much of the east and midwest (AL, AR, GA, IA, IL, IN, KS, KY, MO, MS, NC, NE, OH, OK, SC, TN, VA, WV), causing significant losses in fruit crops, field crops (especially wheat), and the ornamental industry. Temperatures in the teens/20s accompanied by rather high winds nullified typical crop-protection systems.", "Event ID": "10124", "Disaster_stringindexer_transform": 72.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 133.0, "Ending Date_stringindexer_transform": 27.0, "Description_stringindexer_transform": 236.0, "Event ID_stringindexer_transform": 61.0}, {"Disaster": "California Freeze (January 2007)", "Disaster Type": "Freeze", "Beginning Date": "1/11/2007", "Ending Date": "1/17/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 1750.0, "Deaths": 1, "Description": "Widespread agricultural freeze -- for nearly two weeks in January, overnight temperatures over a good portion of California dipped into the 20s, destroying numerous agricultural crops; with citrus, berry, and vegetable crops most affected.", "Event ID": "10125", "Disaster_stringindexer_transform": 141.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 31.0, "Ending Date_stringindexer_transform": 229.0, "Description_stringindexer_transform": 136.0, "Event ID_stringindexer_transform": 33.0}, {"Disaster": "Numerous Wildfires (2006)", "Disaster Type": "Wildfire", "Beginning Date": "1/1/2006", "Ending Date": "12/31/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1863.0, "Deaths": 28, "Description": "Numerous wildfires driven by dry weather and high winds burned over 9.8 million acres, across the western half of the country including Alaska. This is the second highest annual total behind the 10.1 million acres burned in 2015 since record-keeping began in 1960. The most affected states were AK, AZ, CA, CO, FL, ID, MT, NM, NV, OK, OR, TX, WA, WY", "Event ID": "10126", "Disaster_stringindexer_transform": 25.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 166.0, "Ending Date_stringindexer_transform": 44.0, "Description_stringindexer_transform": 211.0, "Event ID_stringindexer_transform": 232.0}, {"Disaster": "Central Severe Weather (October 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "10/2/2006", "Ending Date": "10/5/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1116.0, "Deaths": 1, "Description": "Severe storms cause high wind and hail damage across numerous states including OH, IL, IN, MI, MN and WI.", "Event ID": "10127", "Disaster_stringindexer_transform": 113.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 144.0, "Ending Date_stringindexer_transform": 137.0, "Description_stringindexer_transform": 81.0, "Event ID_stringindexer_transform": 162.0}, {"Disaster": "Midwest/Plains/Southeast Drought (Spring-Summer 2006)", "Disaster Type": "Drought", "Beginning Date": "3/1/2006", "Ending Date": "8/31/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 7617.0, "Deaths": 0, "Description": "Rather severe drought affected crops especially during the spring-summer, centered over the Great Plains region with other areas affected across portions of the south -- including states of ND, SD, NE, KS, OK, TX, MN, IA, MO, AR, LA, MS, AL, GA, FL, MT, WY, CO, NM.", "Event ID": "10128", "Disaster_stringindexer_transform": 6.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 125.0, "Ending Date_stringindexer_transform": 36.0, "Description_stringindexer_transform": 20.0, "Event ID_stringindexer_transform": 72.0}, {"Disaster": "Northeast Flooding (June 2006)", "Disaster Type": "Flooding", "Beginning Date": "6/25/2006", "Ending Date": "6/28/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1932.0, "Deaths": 20, "Description": "Severe flooding over portions of the northeast due to several weeks of heavy rainfall, affecting the states of NY, PA, DE, MD, NJ, and VA.", "Event ID": "10129", "Disaster_stringindexer_transform": 207.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 150.0, "Ending Date_stringindexer_transform": 101.0, "Description_stringindexer_transform": 99.0, "Event ID_stringindexer_transform": 76.0}, {"Disaster": "Midwest Tornadoes (April 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2006", "Ending Date": "4/16/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 3078.0, "Deaths": 27, "Description": "Tornadoes and severe weather cause significant damage in the states of IA, IL, IN, and WI. The state of Indiana was most affected with over one billion dollars in damage.", "Event ID": "10130", "Disaster_stringindexer_transform": 181.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 48.0, "Ending Date_stringindexer_transform": 7.0, "Description_stringindexer_transform": 76.0, "Event ID_stringindexer_transform": 8.0}, {"Disaster": "Midwest/Southeast Tornadoes (April 6-8, 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "4/6/2006", "Ending Date": "4/8/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 2037.0, "Deaths": 10, "Description": "\"Severe weather and numerous tornadoes affecting the states of OK, KS, MO, NE, KY, OH, TN, IN, MS, GA, and AL on April 6-8 with 3 \"\"killer\"\" tornadoes in TN.\"", "Event ID": "10131", "Disaster_stringindexer_transform": 70.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 53.0, "Ending Date_stringindexer_transform": 195.0, "Description_stringindexer_transform": 21.0, "Event ID_stringindexer_transform": 81.0}, {"Disaster": "Severe Storms and Tornadoes (March 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "3/8/2006", "Ending Date": "3/13/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1698.0, "Deaths": 10, "Description": "Outbreak of tornadoes over portions of the midwest and south during a week-long period-affecting the states of AL, AR, KY, MS, TN, TX, IN, KS, MO, and OK.", "Event ID": "10132", "Disaster_stringindexer_transform": 60.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 73.0, "Ending Date_stringindexer_transform": 82.0, "Description_stringindexer_transform": 140.0, "Event ID_stringindexer_transform": 89.0}, {"Disaster": "Hurricane Wilma (October 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/24/2005", "Ending Date": "10/24/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 25080.0, "Deaths": 35, "Description": "Category 3 hurricane hits SW Florida resulting in strong damaging winds and major flooding across southeastern Florida. Prior to landfall, Wilma as a Category 5 recorded the lowest pressure (882 mb) ever recorded in the Atlantic basin.", "Event ID": "10133", "Disaster_stringindexer_transform": 61.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 68.0, "Ending Date_stringindexer_transform": 61.0, "Description_stringindexer_transform": 131.0, "Event ID_stringindexer_transform": 23.0}, {"Disaster": "Hurricane Rita (September 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/20/2005", "Ending Date": "9/24/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 24420.0, "Deaths": 119, "Description": "Category 3 hurricane hits Texas-Louisiana border coastal region, creating significant storm surge and wind damage along the coast, and some inland flooding in the FL panhandle, AL, MS, LA, AR, and TX. Prior to landfall, Rita reached the third lowest pressure (897 mb) ever recorded in the Atlantic basin.", "Event ID": "10134", "Disaster_stringindexer_transform": 102.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 51.0, "Ending Date_stringindexer_transform": 93.0, "Description_stringindexer_transform": 105.0, "Event ID_stringindexer_transform": 234.0}, {"Disaster": "Midwest Drought (Spring-Summer 2005)", "Disaster Type": "Drought", "Beginning Date": "3/1/2005", "Ending Date": "8/31/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 1946.0, "Deaths": 0, "Description": "Rather severe localized drought causes significant crop losses (especially for corn and soybeans) in the states of AR, IL, IN, MO, OH, and WI.", "Event ID": "10135", "Disaster_stringindexer_transform": 100.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 178.0, "Ending Date_stringindexer_transform": 220.0, "Description_stringindexer_transform": 207.0, "Event ID_stringindexer_transform": 64.0}, {"Disaster": "Hurricane Katrina (August 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/25/2005", "Ending Date": "8/30/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 165012.0, "Deaths": 1833, "Description": "Category 3 hurricane initially impacts the U.S. as a Category 1 near Miami, FL, then as a strong Category 3 along the eastern LA-western MS coastlines, resulting in severe storm surge damage (maximum surge probably exceeded 30 feet) along the LA-MS-AL coasts, wind damage, and the failure of parts of the levee system in New Orleans. Inland effects included high winds and some flooding in the states of AL, MS, FL, TN, KY, IN, OH, and GA.", "Event ID": "10136", "Disaster_stringindexer_transform": 162.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 132.0, "Ending Date_stringindexer_transform": 156.0, "Description_stringindexer_transform": 145.0, "Event ID_stringindexer_transform": 47.0}, {"Disaster": "Hurricane Dennis (July 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/9/2005", "Ending Date": "7/11/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 3293.0, "Deaths": 15, "Description": "Category 3 hurricane makes landfall in western Florida panhandle resulting in storm surge and wind damage along the FL and AL coasts, along with scattered wind and flood damage in GA and MS.", "Event ID": "10137", "Disaster_stringindexer_transform": 196.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 203.0, "Ending Date_stringindexer_transform": 171.0, "Description_stringindexer_transform": 221.0, "Event ID_stringindexer_transform": 224.0}, {"Disaster": "Southeast Severe Weather (March 2005)", "Disaster Type": "Severe Storm", "Beginning Date": "3/24/2005", "Ending Date": "3/27/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 1141.0, "Deaths": 0, "Description": "Severe storms cause widespread hail damage across numerous states including TX, AL, MS, GA, FL, NC and VA.", "Event ID": "10138", "Disaster_stringindexer_transform": 205.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 103.0, "Ending Date_stringindexer_transform": 26.0, "Description_stringindexer_transform": 148.0, "Event ID_stringindexer_transform": 159.0}, {"Disaster": "Hurricane Jeanne (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/15/2004", "Ending Date": "9/29/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 10195.0, "Deaths": 28, "Description": "Category 3 hurricane makes landfall in east-central Florida, causing considerable wind, storm surge, and flooding damage in FL, with some flood damage also in the states of GA, SC, NC, VA, MD, DE, NJ, PA, and NY. Puerto Rico also affected.", "Event ID": "10139", "Disaster_stringindexer_transform": 124.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 106.0, "Ending Date_stringindexer_transform": 60.0, "Description_stringindexer_transform": 187.0, "Event ID_stringindexer_transform": 111.0}, {"Disaster": "Hurricane Ivan (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/12/2004", "Ending Date": "9/21/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 27880.0, "Deaths": 57, "Description": "Category 3 hurricane makes landfall on Gulf coast of Alabama, with significant wind, storm surge, and flooding damage in coastal AL and FL panhandle, along with wind/flood damage in the states of GA, MS, LA, SC, NC, VA, WV, MD, TN, KY, OH, DE, NJ, PA, and NY.", "Event ID": "10140", "Disaster_stringindexer_transform": 101.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 172.0, "Ending Date_stringindexer_transform": 231.0, "Description_stringindexer_transform": 119.0, "Event ID_stringindexer_transform": 184.0}, {"Disaster": "Hurricane Frances (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/3/2004", "Ending Date": "9/9/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 13328.0, "Deaths": 48, "Description": "Category 2 hurricane makes landfall in east-central Florida, causing significant wind, storm surge, and flooding damage in FL, along with considerable flood damage in the states of GA, SC, NC, and NY due to 5-15 inch rains.", "Event ID": "10141", "Disaster_stringindexer_transform": 152.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 5.0, "Ending Date_stringindexer_transform": 81.0, "Description_stringindexer_transform": 33.0, "Event ID_stringindexer_transform": 18.0}, {"Disaster": "Hurricane Charley (August 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/13/2004", "Ending Date": "8/14/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 21759.0, "Deaths": 35, "Description": "Category 4 hurricane makes landfall in southwest Florida, resulting in major wind and some storm surge damage in FL, along with some damage in the states of SC and NC.", "Event ID": "10142", "Disaster_stringindexer_transform": 90.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 54.0, "Ending Date_stringindexer_transform": 139.0, "Description_stringindexer_transform": 176.0, "Event ID_stringindexer_transform": 78.0}, {"Disaster": "Severe Storms, Hail, Tornadoes (May 2004)", "Disaster Type": "Severe Storm", "Beginning Date": "5/21/2004", "Ending Date": "5/27/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 1378.0, "Deaths": 4, "Description": "Severe storms including tornadoes and hail cause damage across the Midwest, South, Southeast and Northeast regions. The states impacted include IA, IL, IN, KY, MI, MO, NC, NE, NY, OK, OH and WI.", "Event ID": "10143", "Disaster_stringindexer_transform": 136.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 194.0, "Ending Date_stringindexer_transform": 68.0, "Description_stringindexer_transform": 199.0, "Event ID_stringindexer_transform": 100.0}, {"Disaster": "California Wildfires (Fall 2003)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2003", "Ending Date": "11/30/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 5407.0, "Deaths": 22, "Description": "Dry weather, high winds, and resulting wildfires in Southern California burned over 3,700 homes. Nearly 4.0 million acres burned across numerous western states including Alaska.", "Event ID": "10144", "Disaster_stringindexer_transform": 178.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 113.0, "Ending Date_stringindexer_transform": 2.0, "Description_stringindexer_transform": 52.0, "Event ID_stringindexer_transform": 203.0}, {"Disaster": "Western/Central Drought/Heatwave (Spring-Fall 2003)", "Disaster Type": "Drought", "Beginning Date": "3/1/2003", "Ending Date": "11/30/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 6945.0, "Deaths": 35, "Description": "2003 drought across western and central portions of the U.S. with losses to agriculture. The states impacted include AZ, CO, IA, ID, IL, KS, MI, MN, MO, MT, ND, NE, NM, OR, SD, WA and WI.", "Event ID": "10145", "Disaster_stringindexer_transform": 197.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 17.0, "Ending Date_stringindexer_transform": 2.0, "Description_stringindexer_transform": 155.0, "Event ID_stringindexer_transform": 227.0}, {"Disaster": "Hurricane Isabel (September 2003)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/18/2003", "Ending Date": "9/19/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 7622.0, "Deaths": 55, "Description": "Category 2 hurricane makes landfall in eastern North Carolina, causing considerable storm surge damage along the coasts of NC, VA, and MD, with wind damage and some flooding due to 4-12 inch rains in NC, VA, MD, DE, WV, NJ, NY, and PA.", "Event ID": "10146", "Disaster_stringindexer_transform": 208.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 153.0, "Ending Date_stringindexer_transform": 183.0, "Description_stringindexer_transform": 45.0, "Event ID_stringindexer_transform": 69.0}, {"Disaster": "Severe Weather (July 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "7/21/2003", "Ending Date": "7/23/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 1401.0, "Deaths": 7, "Description": "Severe storms impact states across the South, Southeast, Midwest and Northeast regions. The states most impacted include AR, AL, MS, GA, FL, SC, TN, KY, MI, NY, OH, PA and VT.", "Event ID": "10147", "Disaster_stringindexer_transform": 127.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 205.0, "Ending Date_stringindexer_transform": 35.0, "Description_stringindexer_transform": 102.0, "Event ID_stringindexer_transform": 52.0}, {"Disaster": "Midwest/Plains Severe Weather (July 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "7/4/2003", "Ending Date": "7/9/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 1192.0, "Deaths": 7, "Description": "Severe storms affect the states IA, IL, IN, MI, MN, OH, VA, WV across the Midwest and Plains.", "Event ID": "10148", "Disaster_stringindexer_transform": 19.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 142.0, "Ending Date_stringindexer_transform": 163.0, "Description_stringindexer_transform": 96.0, "Event ID_stringindexer_transform": 216.0}, {"Disaster": "Severe Storms/Tornadoes (May 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "5/3/2003", "Ending Date": "5/10/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 5738.0, "Deaths": 51, "Description": "Numerous tornadoes over the midwest, Mississippi valley, OH/TN valleys, and portions of the southeast, with a modern record one-week total of approximately 400 tornadoes reported", "Event ID": "10149", "Disaster_stringindexer_transform": 157.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 20.0, "Ending Date_stringindexer_transform": 99.0, "Description_stringindexer_transform": 151.0, "Event ID_stringindexer_transform": 148.0}, {"Disaster": "Severe Storms/Hail (April 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "4/4/2003", "Ending Date": "4/7/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 2788.0, "Deaths": 3, "Description": "Severe storms and large hail over the southern plains and lower MS valley, with Texas hardest hit, and much of the monetary losses due to hail.", "Event ID": "10150", "Disaster_stringindexer_transform": 78.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 195.0, "Ending Date_stringindexer_transform": 43.0, "Description_stringindexer_transform": 61.0, "Event ID_stringindexer_transform": 0.0}, {"Disaster": "Western Fire Season (Fall 2002)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2002", "Ending Date": "11/30/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 1878.0, "Deaths": 21, "Description": "Major wildfires over 11 western states from the Rockies to the west coast due to drought and periodic high winds, with over 7.1 million acres burned.", "Event ID": "10151", "Disaster_stringindexer_transform": 83.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 141.0, "Ending Date_stringindexer_transform": 4.0, "Description_stringindexer_transform": 156.0, "Event ID_stringindexer_transform": 48.0}, {"Disaster": "U.S. Drought (Spring-Fall 2002)", "Disaster Type": "Drought", "Beginning Date": "3/1/2002", "Ending Date": "11/30/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 12775.0, "Deaths": 0, "Description": "Moderate to extreme drought over large portions of 30 states, including the western states, the Great Plains, and much of the eastern U.S.", "Event ID": "10152", "Disaster_stringindexer_transform": 184.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 109.0, "Ending Date_stringindexer_transform": 4.0, "Description_stringindexer_transform": 116.0, "Event ID_stringindexer_transform": 140.0}, {"Disaster": "Hurricane Lili (October 2002)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/1/2002", "Ending Date": "8/5/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 1568.0, "Deaths": 2, "Description": "Category 1 hurricane makes landfall in Louisiana after causing damage across Saint Lucia, Jamaica, Haiti and Cuba.", "Event ID": "10153", "Disaster_stringindexer_transform": 227.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 222.0, "Ending Date_stringindexer_transform": 39.0, "Description_stringindexer_transform": 16.0, "Event ID_stringindexer_transform": 206.0}, {"Disaster": "Severe Storms and Tornadoes (April 2002)", "Disaster Type": "Severe Storm", "Beginning Date": "4/27/2002", "Ending Date": "4/28/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 2973.0, "Deaths": 7, "Description": "Numerous tornadoes and widespread hail damage over the Central and Eastern states including NC, GA, VA, TX, AR, MO, MS, TN, IL, IN, KY, PA, MD, NY, OH, WV, and KS.", "Event ID": "10154", "Disaster_stringindexer_transform": 87.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 78.0, "Ending Date_stringindexer_transform": 207.0, "Description_stringindexer_transform": 169.0, "Event ID_stringindexer_transform": 226.0}, {"Disaster": "Tropical Storm Allison (June 2001)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "6/5/2001", "Ending Date": "6/17/2001", "Total CPI-Adjusted Cost (Millions of Dollars)": 12271.0, "Deaths": 43, "Description": "The persistent remnants of Tropical Storm Allison produce rainfall amounts of 30-40 inches in portions of coastal Texas and Louisiana, causing severe flooding especially in the Houston area, then moves slowly northeastward; fatalities and significant damage reported in TX, LA, MS, FL, VA, and PA", "Event ID": "10155", "Disaster_stringindexer_transform": 52.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 9.0, "Ending Date_stringindexer_transform": 11.0, "Description_stringindexer_transform": 174.0, "Event ID_stringindexer_transform": 152.0}, {"Disaster": "Midwest/Ohio Valley Hail and Tornadoes (April 2001)", "Disaster Type": "Severe Storm", "Beginning Date": "4/6/2001", "Ending Date": "4/11/2001", "Total CPI-Adjusted Cost (Millions of Dollars)": 4456.0, "Deaths": 3, "Description": "Storms, tornadoes, and hail in the states of TX, OK, KS, NE, IA, MO, IL, IN, WI, MI, OH, KY, WV, and PA, over a 6-day period.", "Event ID": "10156", "Disaster_stringindexer_transform": 10.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 211.0, "Ending Date_stringindexer_transform": 154.0, "Description_stringindexer_transform": 183.0, "Event ID_stringindexer_transform": 99.0}, {"Disaster": "Western/Central/Southeast Drought/Heatwave (Spring-Fall 2000)", "Disaster Type": "Drought", "Beginning Date": "3/1/2000", "Ending Date": "11/30/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 7445.0, "Deaths": 140, "Description": "Western/Central/Southeast Drought/Heatwave. The states impacted include AZ, AL, AR, CA, CO, FL, GA, IA, KS, LA, MS, MT, NE, NM, OK, OR, SC, TN, and TX.", "Event ID": "10157", "Disaster_stringindexer_transform": 137.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 2.0, "Ending Date_stringindexer_transform": 96.0, "Description_stringindexer_transform": 94.0, "Event ID_stringindexer_transform": 41.0}, {"Disaster": "South Florida Flooding (October 2000)", "Disaster Type": "Flooding", "Beginning Date": "10/3/2000", "Ending Date": "10/4/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 1341.0, "Deaths": 3, "Description": "Heavy rainfall up to 15 inches affected south Florida surrounding Miami that resulted in severe flooding that damaged thousands of homes and businesses. There was also several hundred million in damage done to agriculture.", "Event ID": "10158", "Disaster_stringindexer_transform": 69.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 89.0, "Ending Date_stringindexer_transform": 187.0, "Description_stringindexer_transform": 154.0, "Event ID_stringindexer_transform": 207.0}, {"Disaster": "Western Fire Season (Spring-Summer 2000)", "Disaster Type": "Wildfire", "Beginning Date": "3/1/2000", "Ending Date": "8/31/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 1601.0, "Deaths": 0, "Description": "Severe wildfire season in the western states due to drought and frequent winds, with nearly 7 million acres burned.", "Event ID": "10159", "Disaster_stringindexer_transform": 51.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 2.0, "Ending Date_stringindexer_transform": 209.0, "Description_stringindexer_transform": 47.0, "Event ID_stringindexer_transform": 130.0}, {"Disaster": "Hurricane Floyd (September 1999)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/14/1999", "Ending Date": "9/16/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 9931.0, "Deaths": 77, "Description": "Large, category 2 hurricane makes landfall in eastern NC, causing 10-20 inch rains in 2 days, with severe flooding in NC and some flooding in SC, VA, MD, PA, NY, NJ, DE, RI, CT, MA, NH, and VT.", "Event ID": "10160", "Disaster_stringindexer_transform": 155.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 206.0, "Ending Date_stringindexer_transform": 199.0, "Description_stringindexer_transform": 56.0, "Event ID_stringindexer_transform": 126.0}, {"Disaster": "Eastern Drought/Heatwave (Summer 1999)", "Disaster Type": "Drought", "Beginning Date": "6/1/1999", "Ending Date": "8/31/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 3823.0, "Deaths": 502, "Description": "Very dry summer and high temperatures, mainly in eastern U.S., with extensive agricultural losses. The states impacted include AL, AR, FL, GA, KY, LA, MD, MS, NC, NJ, OH, SC, TN, VA, WV and PA.", "Event ID": "10161", "Disaster_stringindexer_transform": 98.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 164.0, "Ending Date_stringindexer_transform": 103.0, "Description_stringindexer_transform": 205.0, "Event ID_stringindexer_transform": 3.0}, {"Disaster": "Oklahoma and Kansas Tornadoes (May 1999)", "Disaster Type": "Severe Storm", "Beginning Date": "5/3/1999", "Ending Date": "5/6/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 3078.0, "Deaths": 55, "Description": "Outbreak of F4-F5 tornadoes hit the states of Oklahoma and Kansas, along with Texas and Tennessee, Oklahoma City area hardest hit.", "Event ID": "10162", "Disaster_stringindexer_transform": 229.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 120.0, "Ending Date_stringindexer_transform": 200.0, "Description_stringindexer_transform": 98.0, "Event ID_stringindexer_transform": 62.0}, {"Disaster": "Central and Eastern Winter Storm (Mid-January 1999)", "Disaster Type": "Winter Storm", "Beginning Date": "1/13/1999", "Ending Date": "1/16/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 1349.0, "Deaths": 0, "Description": "Winter storm affecting the Central and Eastern states including IL, IN, OH, MI, WV, VA, MD, PA, NJ, NY, MA, CT, VT, NH and ME.", "Event ID": "10163", "Disaster_stringindexer_transform": 135.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 191.0, "Ending Date_stringindexer_transform": 53.0, "Description_stringindexer_transform": 83.0, "Event ID_stringindexer_transform": 133.0}, {"Disaster": "Central and Eastern Winter Storm (January 1999)", "Disaster Type": "Winter Storm", "Beginning Date": "1/1/1999", "Ending Date": "1/4/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 1580.0, "Deaths": 25, "Description": "South, Southeast, Midwest, Northeast affected by damaging winter storm", "Event ID": "10164", "Disaster_stringindexer_transform": 142.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 169.0, "Ending Date_stringindexer_transform": 31.0, "Description_stringindexer_transform": 202.0, "Event ID_stringindexer_transform": 208.0}, {"Disaster": "California Freeze (December 1998)", "Disaster Type": "Freeze", "Beginning Date": "12/20/1998", "Ending Date": "12/28/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 3900.0, "Deaths": 0, "Description": "A severe freeze damaged fruit and vegetable crops in the Central and Southern San Joaquin Valley. Extended intervals of sub 27\u00b0 F temperatures occurred over an 8-day period.", "Event ID": "10165", "Disaster_stringindexer_transform": 122.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 171.0, "Ending Date_stringindexer_transform": 186.0, "Description_stringindexer_transform": 173.0, "Event ID_stringindexer_transform": 231.0}, {"Disaster": "Texas Flooding (October 1998)", "Disaster Type": "Flooding", "Beginning Date": "10/16/1998", "Ending Date": "10/24/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1469.0, "Deaths": 31, "Description": "Severe flooding in southeast Texas from 2 heavy rain events, with 10-20 inch rainfall totals", "Event ID": "10166", "Disaster_stringindexer_transform": 199.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 59.0, "Ending Date_stringindexer_transform": 6.0, "Description_stringindexer_transform": 100.0, "Event ID_stringindexer_transform": 168.0}, {"Disaster": "Hurricane Georges (September 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/20/1998", "Ending Date": "9/29/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 9336.0, "Deaths": 16, "Description": "Category 2 hurricane strikes Puerto Rico, Virgin Islands, Florida Keys, and Gulf coasts of Louisiana, Mississippi, Alabama, and Florida panhandle, 15-30 inch 2-day rain totals in parts of Alabama and Florida", "Event ID": "10167", "Disaster_stringindexer_transform": 67.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 213.0, "Ending Date_stringindexer_transform": 215.0, "Description_stringindexer_transform": 111.0, "Event ID_stringindexer_transform": 91.0}, {"Disaster": "Southern Drought/Heat Wave (Summer 1998)", "Disaster Type": "Drought", "Beginning Date": "6/1/1998", "Ending Date": "8/31/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 5503.0, "Deaths": 200, "Description": "Severe drought and heat wave from Texas/Oklahoma eastward to the Carolinas. The states impacted include AL, AR, FL, GA, LA, MS, NC, OK, SC, TN, TX, and VA.", "Event ID": "10168", "Disaster_stringindexer_transform": 119.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 140.0, "Ending Date_stringindexer_transform": 83.0, "Description_stringindexer_transform": 18.0, "Event ID_stringindexer_transform": 42.0}, {"Disaster": "Hurricane Bonnie (August 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/27/1998", "Ending Date": "8/29/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1528.0, "Deaths": 3, "Description": "Category 3 hurricane strikes eastern North Carolina and Virginia, extensive agricultural damage due to winds and flooding, with 10-inch rains in 2 days in some locations.", "Event ID": "10169", "Disaster_stringindexer_transform": 222.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 208.0, "Ending Date_stringindexer_transform": 105.0, "Description_stringindexer_transform": 114.0, "Event ID_stringindexer_transform": 220.0}, {"Disaster": "Tropical Storm Frances (September 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/8/1998", "Ending Date": "8/13/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1092.0, "Deaths": 2, "Description": "Tropical Storm Frances caused extensive flooding in Texas and Louisiana. The rainfall totals from Frances were 10 to 20 inches across eastern Texas into southern Louisiana.", "Event ID": "10170", "Disaster_stringindexer_transform": 15.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 227.0, "Ending Date_stringindexer_transform": 162.0, "Description_stringindexer_transform": 91.0, "Event ID_stringindexer_transform": 74.0}, {"Disaster": "Severe Storms, Tornadoes (June 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "5/30/1998", "Ending Date": "6/2/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1775.0, "Deaths": 20, "Description": "Severe storms in late May through early June hit the Midwest, North, Northeast, and Southeast", "Event ID": "10171", "Disaster_stringindexer_transform": 191.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 210.0, "Ending Date_stringindexer_transform": 49.0, "Description_stringindexer_transform": 73.0, "Event ID_stringindexer_transform": 118.0}, {"Disaster": "Minnesota Severe Storms/Hail (May 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "5/15/1998", "Ending Date": "5/15/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 2544.0, "Deaths": 1, "Description": "Very damaging severe thunderstorms with large hail over wide areas of Minnesota", "Event ID": "10172", "Disaster_stringindexer_transform": 3.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 14.0, "Ending Date_stringindexer_transform": 19.0, "Description_stringindexer_transform": 163.0, "Event ID_stringindexer_transform": 221.0}, {"Disaster": "Western/Eastern Severe Weather and Flooding (Winter-Spring 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "12/1/1997", "Ending Date": "2/28/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1587.0, "Deaths": 132, "Description": "Tornadoes and flooding cause damage across the West and Southeast. The states impacted include CA, TX, FL, AL, GA, LA, MS, NC and SC.", "Event ID": "10173", "Disaster_stringindexer_transform": 116.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 219.0, "Ending Date_stringindexer_transform": 159.0, "Description_stringindexer_transform": 149.0, "Event ID_stringindexer_transform": 37.0}, {"Disaster": "Northeast Ice Storm (January 1998)", "Disaster Type": "Winter Storm", "Beginning Date": "1/5/1998", "Ending Date": "1/9/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 2186.0, "Deaths": 16, "Description": "Intense ice storm hits Maine, New Hampshire, Vermont, and New York, with extensive forestry losses", "Event ID": "10174", "Disaster_stringindexer_transform": 94.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 135.0, "Ending Date_stringindexer_transform": 50.0, "Description_stringindexer_transform": 25.0, "Event ID_stringindexer_transform": 120.0}, {"Disaster": "Northern Plains Flooding (Spring 1997)", "Disaster Type": "Flooding", "Beginning Date": "2/3/1997", "Ending Date": "5/24/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 5809.0, "Deaths": 11, "Description": "Severe flooding in North Dakota, South Dakota and Minnesota due to heavy spring snow melt. This flooding caused widespread damage to agriculture, infrastructure, homes and businesses.", "Event ID": "10175", "Disaster_stringindexer_transform": 185.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 230.0, "Ending Date_stringindexer_transform": 151.0, "Description_stringindexer_transform": 228.0, "Event ID_stringindexer_transform": 163.0}, {"Disaster": "Mississippi and Ohio Valley Severe Weather and Flooding (March 1997)", "Disaster Type": "Severe Storm", "Beginning Date": "2/28/1997", "Ending Date": "3/5/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 1544.0, "Deaths": 67, "Description": "Tornadoes and severe flooding hit the states of AR, MO, MS, TN, IL, IN, KY, OH, and WV, with over 10 inches of rain in 24 hours in Louisville.", "Event ID": "10176", "Disaster_stringindexer_transform": 95.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 62.0, "Ending Date_stringindexer_transform": 170.0, "Description_stringindexer_transform": 225.0, "Event ID_stringindexer_transform": 225.0}, {"Disaster": "West Coast Flooding (December 1996-January 1997)", "Disaster Type": "Flooding", "Beginning Date": "1/1/1997", "Ending Date": "1/11/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 4766.0, "Deaths": 36, "Description": "Torrential rains (10-40 inches in 2 weeks) and snowmelt produce severe flooding over portions of CA, WA, OR, ID, NV, and MT.", "Event ID": "10177", "Disaster_stringindexer_transform": 111.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 47.0, "Ending Date_stringindexer_transform": 208.0, "Description_stringindexer_transform": 80.0, "Event ID_stringindexer_transform": 169.0}, {"Disaster": "Hurricane Fran (September 1996)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/5/1996", "Ending Date": "9/8/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 8161.0, "Deaths": 37, "Description": "Category 3 hurricane strikes North Carolina and Virginia, over 10-inch 24-hour rains in some locations and extensive agricultural and other losses.", "Event ID": "10178", "Disaster_stringindexer_transform": 171.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 49.0, "Ending Date_stringindexer_transform": 140.0, "Description_stringindexer_transform": 184.0, "Event ID_stringindexer_transform": 98.0}, {"Disaster": "Southern Plains Drought (Spring-Summer 1996)", "Disaster Type": "Drought", "Beginning Date": "3/1/1996", "Ending Date": "8/31/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 2920.0, "Deaths": 0, "Description": "Severe drought in agricultural regions of southern plains--Texas and Oklahoma most severely affected", "Event ID": "10179", "Disaster_stringindexer_transform": 114.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 111.0, "Ending Date_stringindexer_transform": 211.0, "Description_stringindexer_transform": 92.0, "Event ID_stringindexer_transform": 31.0}, {"Disaster": "Pacific Northwest Severe Flooding (February 1996)", "Disaster Type": "Flooding", "Beginning Date": "2/7/1996", "Ending Date": "2/12/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 1643.0, "Deaths": 9, "Description": "Very heavy, persistent rains (10-30 inches) and melting snow over OR, WA, ID, and western MT.", "Event ID": "10180", "Disaster_stringindexer_transform": 58.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 212.0, "Ending Date_stringindexer_transform": 219.0, "Description_stringindexer_transform": 71.0, "Event ID_stringindexer_transform": 16.0}, {"Disaster": "Blizzard/Floods (January 1996)", "Disaster Type": "Winter Storm", "Beginning Date": "1/1/1996", "Ending Date": "1/31/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 4895.0, "Deaths": 187, "Description": "Very heavy snowstorm (1-4 feet) over Appalachians, Mid-Atlantic, and Northeast; followed by severe flooding in parts of same area due to rain and snowmelt.", "Event ID": "10181", "Disaster_stringindexer_transform": 180.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 67.0, "Ending Date_stringindexer_transform": 47.0, "Description_stringindexer_transform": 180.0, "Event ID_stringindexer_transform": 84.0}, {"Disaster": "Hurricane Opal (October 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/4/1995", "Ending Date": "10/6/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 7877.0, "Deaths": 27, "Description": "Category 3 hurricane strikes Florida panhandle, Alabama, western Georgia, eastern Tennessee, and the western Carolinas, causing storm surge, wind, and flooding damage.", "Event ID": "10182", "Disaster_stringindexer_transform": 49.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 173.0, "Ending Date_stringindexer_transform": 204.0, "Description_stringindexer_transform": 69.0, "Event ID_stringindexer_transform": 131.0}, {"Disaster": "Hurricane Marilyn (September 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/15/1995", "Ending Date": "9/17/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 3528.0, "Deaths": 13, "Description": "Category 2 hurricane impacts the U.S. Virgin Islands and Puerto Rico with maximum sustained winds of 110 mph.", "Event ID": "10183", "Disaster_stringindexer_transform": 151.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 137.0, "Ending Date_stringindexer_transform": 40.0, "Description_stringindexer_transform": 141.0, "Event ID_stringindexer_transform": 215.0}, {"Disaster": "Hurricane Erin (August 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/1/1995", "Ending Date": "8/7/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 1428.0, "Deaths": 6, "Description": "Hurricane Erin impacted Florida as a category 1 hurricane. Most of the damage resulted from heavy rainfall and flooding in Florida, Alabama and Mississippi.", "Event ID": "10184", "Disaster_stringindexer_transform": 172.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 187.0, "Ending Date_stringindexer_transform": 121.0, "Description_stringindexer_transform": 70.0, "Event ID_stringindexer_transform": 38.0}, {"Disaster": "South Plains Severe Weather (May 1995)", "Disaster Type": "Severe Storm", "Beginning Date": "5/5/1995", "Ending Date": "5/7/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 9217.0, "Deaths": 32, "Description": "Torrential rains, hail, and tornadoes across Texas-Oklahoma and southeast Louisiana-southern Mississippi, with Dallas and New Orleans areas (10-25 inch rains in 5 days) hardest hit.", "Event ID": "10185", "Disaster_stringindexer_transform": 130.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 156.0, "Ending Date_stringindexer_transform": 46.0, "Description_stringindexer_transform": 152.0, "Event ID_stringindexer_transform": 128.0}, {"Disaster": "California Flooding (January-March 1995)", "Disaster Type": "Flooding", "Beginning Date": "1/1/1995", "Ending Date": "3/31/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 4200.0, "Deaths": 27, "Description": "Frequent winter storms cause 20-70 inch rainfall and periodic flooding across much of California", "Event ID": "10186", "Disaster_stringindexer_transform": 59.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 185.0, "Ending Date_stringindexer_transform": 148.0, "Description_stringindexer_transform": 219.0, "Event ID_stringindexer_transform": 180.0}, {"Disaster": "Western Fire Season (Summer-Fall 1994)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/1994", "Ending Date": "11/30/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1247.0, "Deaths": 0, "Description": "Severe wildfire season in the western states due to dry weather conditions. The states most impacted include CA, AZ, OR, WA, CO, UT, NV, NM and TX.", "Event ID": "10187", "Disaster_stringindexer_transform": 28.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 177.0, "Ending Date_stringindexer_transform": 52.0, "Description_stringindexer_transform": 175.0, "Event ID_stringindexer_transform": 230.0}, {"Disaster": "Texas Flooding (October 1994)", "Disaster Type": "Flooding", "Beginning Date": "10/16/1994", "Ending Date": "10/25/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1720.0, "Deaths": 19, "Description": "Torrential rain (10-25 inches in 5 days) and thunderstorms cause flooding across much of southeast Texas", "Event ID": "10188", "Disaster_stringindexer_transform": 195.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 38.0, "Ending Date_stringindexer_transform": 180.0, "Description_stringindexer_transform": 35.0, "Event ID_stringindexer_transform": 172.0}, {"Disaster": "Tropical Storm Alberto (July 1994)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/7/1994", "Ending Date": "7/10/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1717.0, "Deaths": 32, "Description": "Remnants of slow-moving Alberto bring torrential 10-25 inch rains in 3 days, widespread flooding and agricultural damage in parts of Georgia, Alabama, and panhandle of Florida.", "Event ID": "10189", "Disaster_stringindexer_transform": 149.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 71.0, "Ending Date_stringindexer_transform": 185.0, "Description_stringindexer_transform": 48.0, "Event ID_stringindexer_transform": 117.0}, {"Disaster": "Midwest/Plains Tornadoes (April 1994)", "Disaster Type": "Severe Storm", "Beginning Date": "4/25/1994", "Ending Date": "4/27/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1694.0, "Deaths": 3, "Description": "Tornadoes and severe storms cause damage in states across the South, Southeast and Midwest. The states impacted include TX, OK, AR, CO, KS, NE, IA, SD, IL, IN, MN and MO.", "Event ID": "10190", "Disaster_stringindexer_transform": 62.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 39.0, "Ending Date_stringindexer_transform": 75.0, "Description_stringindexer_transform": 9.0, "Event ID_stringindexer_transform": 186.0}, {"Disaster": "Southeast Ice Storm (February 1994)", "Disaster Type": "Winter Storm", "Beginning Date": "2/8/1994", "Ending Date": "2/13/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 5155.0, "Deaths": 9, "Description": "Intense ice storm with extensive damage in portions of TX, OK, AR, LA, MS, AL, TN, GA, SC, NC, and VA.", "Event ID": "10191", "Disaster_stringindexer_transform": 179.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 197.0, "Ending Date_stringindexer_transform": 88.0, "Description_stringindexer_transform": 93.0, "Event ID_stringindexer_transform": 125.0}, {"Disaster": "Winter Storm, Cold Wave (January 1994)", "Disaster Type": "Winter Storm", "Beginning Date": "1/17/1994", "Ending Date": "1/20/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1788.0, "Deaths": 70, "Description": "Winter storm affects the Southeast and Northeast regions. The states impacted include CT, DE, IL, IN, KY, MA, MD, ME, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA, VT and WV.", "Event ID": "10192", "Disaster_stringindexer_transform": 53.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 196.0, "Ending Date_stringindexer_transform": 129.0, "Description_stringindexer_transform": 161.0, "Event ID_stringindexer_transform": 85.0}, {"Disaster": "California Wildfires (Fall 1993)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/1993", "Ending Date": "11/30/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 2427.0, "Deaths": 4, "Description": "Dry weather, high winds and wildfires in Southern California", "Event ID": "10193", "Disaster_stringindexer_transform": 12.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 57.0, "Ending Date_stringindexer_transform": 122.0, "Description_stringindexer_transform": 58.0, "Event ID_stringindexer_transform": 11.0}, {"Disaster": "Southeast Drought/Heat Wave (Summer 1993)", "Disaster Type": "Drought", "Beginning Date": "6/1/1993", "Ending Date": "8/31/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 2226.0, "Deaths": 16, "Description": "Drought and heat wave across Southeastern U.S. The states most impacted include AL, FL, GA, MD, NC, SC, TN, and VA.", "Event ID": "10194", "Disaster_stringindexer_transform": 160.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 229.0, "Ending Date_stringindexer_transform": 165.0, "Description_stringindexer_transform": 127.0, "Event ID_stringindexer_transform": 229.0}, {"Disaster": "Midwest Flooding (Summer 1993)", "Disaster Type": "Flooding", "Beginning Date": "6/27/1993", "Ending Date": "8/15/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 37100.0, "Deaths": 48, "Description": "Severe, widespread flooding in central U.S. due to persistent heavy rains and thunderstorms. There was extensive damage to agriculture, infrastructure, homes and businesses in many areas across several states. Many river stations also established new records for historical flood heights. This is the most costly non-tropical, inland flood event to affect the United States on record.", "Event ID": "10195", "Disaster_stringindexer_transform": 138.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 97.0, "Ending Date_stringindexer_transform": 153.0, "Description_stringindexer_transform": 133.0, "Event ID_stringindexer_transform": 171.0}, {"Disaster": "East Coast Blizzard and Severe Weather (March 1993)", "Disaster Type": "Winter Storm", "Beginning Date": "3/11/1993", "Ending Date": "3/14/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 9782.0, "Deaths": 270, "Description": "\"The \"\"Storm of the Century\"\" impacts the entire Eastern seaboard from Florida to Maine. This historic storm dumped 2-4 feet of snow and caused hurricane force winds across many Eastern and Northeastern states. This caused power outages to over 10 million households. Additional impacts included numerous tornadoes across Florida causing substantial damage. This is the most destructive and costly winter storm to affect the United States since at least 1980.\"", "Event ID": "10196", "Disaster_stringindexer_transform": 55.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 30.0, "Ending Date_stringindexer_transform": 56.0, "Description_stringindexer_transform": 64.0, "Event ID_stringindexer_transform": 103.0}, {"Disaster": "Northeast Winter Storm (December 1992)", "Disaster Type": "Winter Storm", "Beginning Date": "12/10/1992", "Ending Date": "12/13/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 4544.0, "Deaths": 19, "Description": "Slow-moving winter storm batters northeast U.S. coast, with the New England region hardest hit. The states impacted include VA, MD, DE, PA, NJ, NY, CT, RI, MA and WV.", "Event ID": "10197", "Disaster_stringindexer_transform": 214.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 36.0, "Ending Date_stringindexer_transform": 173.0, "Description_stringindexer_transform": 74.0, "Event ID_stringindexer_transform": 26.0}, {"Disaster": "Southeast Severe Weather (November 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "11/21/1992", "Ending Date": "11/23/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1202.0, "Deaths": 26, "Description": "Three-day tornado outbreak strikes many Central and Eastern states including TX, LA, AL, MS, GA, AR, IN, OH, KY, TN, and NC. Major damage was reported across many areas, as more than 100 tornadoes were reported. This event remains one of the most prolific Fall season tornado outbreaks on record.", "Event ID": "10198", "Disaster_stringindexer_transform": 105.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 183.0, "Ending Date_stringindexer_transform": 77.0, "Description_stringindexer_transform": 121.0, "Event ID_stringindexer_transform": 29.0}, {"Disaster": "Hurricane Iniki (September 1992)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/11/1992", "Ending Date": "9/12/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 5673.0, "Deaths": 7, "Description": "Category 4 hurricane causes severe damage to the Hawaiian island of Kauai. Hurricane Iniki is the costliest and deadliest hurricane to affect Hawaii since 1900.", "Event ID": "10199", "Disaster_stringindexer_transform": 129.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 158.0, "Ending Date_stringindexer_transform": 74.0, "Description_stringindexer_transform": 65.0, "Event ID_stringindexer_transform": 97.0}, {"Disaster": "Hurricane Andrew (August 1992)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/23/1992", "Ending Date": "8/27/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 49410.0, "Deaths": 61, "Description": "Category 5 hurricane hits Florida and later impacts Louisiana as a category 3. High winds damage or destroy over 125,000 homes and leave at least 160,000 people homeless in Dade County, Florida alone. Initially rated as a category 4, Andrew was later upgraded to a category 5 upon further analysis. Andrew joins Hurricane Camille (1969) and the Labor Day Hurricane (1935), as the only land falling category 5 hurricanes on record to affect the U.S. mainland. Adjusted to present-day dollars, Andrew is the 6th most costly hurricane to impact the U.S. since 1980, after Katrina (2005), Harvey (2017), Maria (2017), Sandy (2012) and Irma (2017).", "Event ID": "10200", "Disaster_stringindexer_transform": 43.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 76.0, "Ending Date_stringindexer_transform": 226.0, "Description_stringindexer_transform": 208.0, "Event ID_stringindexer_transform": 13.0}, {"Disaster": "Severe Storms, Hail (June 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "6/19/1992", "Ending Date": "6/20/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1368.0, "Deaths": 0, "Description": "Severe storms with hail hit Kansas and Oklahoma", "Event ID": "10201", "Disaster_stringindexer_transform": 215.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 87.0, "Ending Date_stringindexer_transform": 135.0, "Description_stringindexer_transform": 88.0, "Event ID_stringindexer_transform": 63.0}, {"Disaster": "Hail, Tornadoes (April 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "4/28/1992", "Ending Date": "4/29/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1746.0, "Deaths": 0, "Description": "Severe Storms hit Oklahoma and Texas with tornadoes and hail", "Event ID": "10202", "Disaster_stringindexer_transform": 81.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 161.0, "Ending Date_stringindexer_transform": 20.0, "Description_stringindexer_transform": 198.0, "Event ID_stringindexer_transform": 170.0}, {"Disaster": "Severe Storms (March 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "3/24/1992", "Ending Date": "3/25/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1471.0, "Deaths": 0, "Description": "Severe storms affect the South, Southeast. The states most impacted include Texas, Louisiana and Florida.", "Event ID": "10203", "Disaster_stringindexer_transform": 192.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 66.0, "Ending Date_stringindexer_transform": 114.0, "Description_stringindexer_transform": 59.0, "Event ID_stringindexer_transform": 237.0}, {"Disaster": "Oakland Firestorm (October 1991)", "Disaster Type": "Wildfire", "Beginning Date": "10/1/1991", "Ending Date": "10/31/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 6171.0, "Deaths": 25, "Description": "Oakland, California firestorm due to low humidity and high winds burned over 3,000 homes. This is the costliest urban wildfire to affect the United States since 1980.", "Event ID": "10204", "Disaster_stringindexer_transform": 147.0, "Disaster Type_stringindexer_transform": 5.0, "Beginning Date_stringindexer_transform": 129.0, "Ending Date_stringindexer_transform": 213.0, "Description_stringindexer_transform": 167.0, "Event ID_stringindexer_transform": 25.0}, {"Disaster": "U.S. Drought (Spring-Summer 1991)", "Disaster Type": "Drought", "Beginning Date": "3/1/1991", "Ending Date": "8/31/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 5625.0, "Deaths": 0, "Description": "Drought conditions over parts of the West, Central and eastern U.S. most affected the states IL, IN, KS, MN, OH, OR, PA, SD, and WA.", "Event ID": "10205", "Disaster_stringindexer_transform": 121.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 12.0, "Ending Date_stringindexer_transform": 10.0, "Description_stringindexer_transform": 77.0, "Event ID_stringindexer_transform": 139.0}, {"Disaster": "Hurricane Bob (August 1991)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/18/1991", "Ending Date": "8/20/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 2810.0, "Deaths": 18, "Description": "Category 2 hurricane brushes the Outer Banks of North Carolina before making landfall in Rhode Island. Its impacts were felt from North Carolina to Long Island and into New England.", "Event ID": "10206", "Disaster_stringindexer_transform": 103.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 228.0, "Ending Date_stringindexer_transform": 142.0, "Description_stringindexer_transform": 162.0, "Event ID_stringindexer_transform": 157.0}, {"Disaster": "Severe Storms, Tornadoes (March 1991)", "Disaster Type": "Severe Storm", "Beginning Date": "3/26/1991", "Ending Date": "3/29/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 1206.0, "Deaths": 0, "Description": "Severe storms hit the Midwest, Southeast, Northeast. The states impacted include KS, IL, MI, IN, MS, TN, KY, OH, AL, PA, NY, GA, SC and NC.", "Event ID": "10207", "Disaster_stringindexer_transform": 228.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 8.0, "Ending Date_stringindexer_transform": 79.0, "Description_stringindexer_transform": 60.0, "Event ID_stringindexer_transform": 101.0}, {"Disaster": "California Freeze (December 1990)", "Disaster Type": "Freeze", "Beginning Date": "12/18/1990", "Ending Date": "12/25/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 6732.0, "Deaths": 0, "Description": "Severe freeze in the Central and Southern San Joaquin Valley caused the loss of citrus, avocado trees, and other crops in many areas. Several days of subfreezing temperatures occurred, with some valley locations in the teens.", "Event ID": "10208", "Disaster_stringindexer_transform": 5.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 4.0, "Ending Date_stringindexer_transform": 141.0, "Description_stringindexer_transform": 182.0, "Event ID_stringindexer_transform": 44.0}, {"Disaster": "Colorado Hail Storm (July 1990)", "Disaster Type": "Severe Storm", "Beginning Date": "7/11/1990", "Ending Date": "7/11/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 1623.0, "Deaths": 0, "Description": "Denver, CO (including airport) hit by severe hail storm. This was the costliest hail storm on record for Colorado when it occurred.", "Event ID": "10209", "Disaster_stringindexer_transform": 24.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 200.0, "Ending Date_stringindexer_transform": 205.0, "Description_stringindexer_transform": 23.0, "Event ID_stringindexer_transform": 214.0}, {"Disaster": "Southern Flooding (May 1990)", "Disaster Type": "Flooding", "Beginning Date": "5/11/1990", "Ending Date": "5/19/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 1993.0, "Deaths": 13, "Description": "Torrential rains cause flooding along the Trinity, Red, and Arkansas Rivers in TX, OK, LA, and AR", "Event ID": "10210", "Disaster_stringindexer_transform": 117.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 209.0, "Ending Date_stringindexer_transform": 164.0, "Description_stringindexer_transform": 130.0, "Event ID_stringindexer_transform": 196.0}, {"Disaster": "Winter Storm, Cold Wave (December 1989)", "Disaster Type": "Winter Storm", "Beginning Date": "12/21/1989", "Ending Date": "12/26/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 1414.0, "Deaths": 100, "Description": "Winter storm and deep cold impacts the Northeast, South and Southeast. The states impacted include AL, AR, CT, FL, GA, IL, IN, KY, LA, ME, MO, MS, NC, NH, NY, OH, OK, PA, SC, TN, TX, VA, VT and WV.", "Event ID": "10211", "Disaster_stringindexer_transform": 183.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 42.0, "Ending Date_stringindexer_transform": 158.0, "Description_stringindexer_transform": 101.0, "Event ID_stringindexer_transform": 2.0}, {"Disaster": "Florida Freeze (December 1989)", "Disaster Type": "Freeze", "Beginning Date": "12/23/1989", "Ending Date": "12/25/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 4160.0, "Deaths": 10, "Description": "Severe freeze damages citrus crops across central/northern Florida.", "Event ID": "10212", "Disaster_stringindexer_transform": 144.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 232.0, "Ending Date_stringindexer_transform": 222.0, "Description_stringindexer_transform": 179.0, "Event ID_stringindexer_transform": 82.0}, {"Disaster": "Northern Plains Drought (Summer-Fall 1989)", "Disaster Type": "Drought", "Beginning Date": "6/1/1989", "Ending Date": "11/30/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 6246.0, "Deaths": 0, "Description": "Severe summer drought over much of the northern plains with significant losses to agriculture. The states impacted include CO, IA, IL, KS, MO, ND, NE, NV, SD, TX and UT.", "Event ID": "10213", "Disaster_stringindexer_transform": 201.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 28.0, "Ending Date_stringindexer_transform": 168.0, "Description_stringindexer_transform": 120.0, "Event ID_stringindexer_transform": 174.0}, {"Disaster": "Hurricane Hugo (September 1989)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/21/1989", "Ending Date": "9/22/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 18719.0, "Deaths": 86, "Description": "Category 4 hurricane devastates South and North Carolina with ~20 foot storm surge and severe wind damage after hitting Puerto Rico and the U.S. Virgin Islands", "Event ID": "10214", "Disaster_stringindexer_transform": 75.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 234.0, "Ending Date_stringindexer_transform": 214.0, "Description_stringindexer_transform": 128.0, "Event ID_stringindexer_transform": 209.0}, {"Disaster": "Severe Storms (May 1989)", "Disaster Type": "Severe Storm", "Beginning Date": "5/1/1989", "Ending Date": "5/6/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 1147.0, "Deaths": 21, "Description": "Severe storms cause damage in states across the South and Southeast. The states impacted include OK, TX, LA, MS, GA, SC, NC and VA.", "Event ID": "10215", "Disaster_stringindexer_transform": 104.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 82.0, "Ending Date_stringindexer_transform": 144.0, "Description_stringindexer_transform": 49.0, "Event ID_stringindexer_transform": 46.0}, {"Disaster": "U.S. Drought/Heatwave (Summer 1988)", "Disaster Type": "Drought", "Beginning Date": "6/1/1988", "Ending Date": "8/31/1988", "Total CPI-Adjusted Cost (Millions of Dollars)": 43608.0, "Deaths": 454, "Description": "1988 drought across a large portion of the U.S. with very severe losses to agriculture and related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 5,000.", "Event ID": "10216", "Disaster_stringindexer_transform": 26.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 98.0, "Ending Date_stringindexer_transform": 94.0, "Description_stringindexer_transform": 185.0, "Event ID_stringindexer_transform": 123.0}, {"Disaster": "Southeast Drought/Heatwave (Summer 1986)", "Disaster Type": "Drought", "Beginning Date": "6/1/1986", "Ending Date": "8/31/1986", "Total CPI-Adjusted Cost (Millions of Dollars)": 4148.0, "Deaths": 100, "Description": "Severe summer drought in parts of the southeastern U.S. with severe losses to agriculture. The states impacted include AL, AR, GA, LA, MS, NC, SC, TN and VA.", "Event ID": "10217", "Disaster_stringindexer_transform": 120.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 202.0, "Ending Date_stringindexer_transform": 15.0, "Description_stringindexer_transform": 193.0, "Event ID_stringindexer_transform": 192.0}, {"Disaster": "Western Severe Storms and Flooding (February 1986)", "Disaster Type": "Severe Storm", "Beginning Date": "2/14/1986", "Ending Date": "2/16/1986", "Total CPI-Adjusted Cost (Millions of Dollars)": 1218.0, "Deaths": 13, "Description": "Severe storms and flooding affect the states CA, CO, NV, OR, WY across the West.", "Event ID": "10218", "Disaster_stringindexer_transform": 211.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 146.0, "Ending Date_stringindexer_transform": 210.0, "Description_stringindexer_transform": 11.0, "Event ID_stringindexer_transform": 108.0}, {"Disaster": "Hurricane Juan (October 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/27/1985", "Ending Date": "10/31/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 3577.0, "Deaths": 63, "Description": "Category 1 hurricane makes landfall near Morgan City, Louisiana. Hurricane Juan's slow movement causes severe flooding in Louisiana, Mississippi, Alabama and Florida. Southern Louisiana was most severely affected due to widespread rainfall of 10-15 inches that caused substantial flooding.", "Event ID": "10219", "Disaster_stringindexer_transform": 146.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 3.0, "Ending Date_stringindexer_transform": 32.0, "Description_stringindexer_transform": 118.0, "Event ID_stringindexer_transform": 28.0}, {"Disaster": "Hurricane Gloria (September 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/26/1985", "Ending Date": "9/28/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2046.0, "Deaths": 11, "Description": "Category 2 hurricane makes several landfalls along the eastern seaboard, affecting states from North Carolina to Maine.", "Event ID": "10220", "Disaster_stringindexer_transform": 39.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 160.0, "Ending Date_stringindexer_transform": 224.0, "Description_stringindexer_transform": 31.0, "Event ID_stringindexer_transform": 155.0}, {"Disaster": "Hurricane Elena (September 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/30/1985", "Ending Date": "9/3/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 3100.0, "Deaths": 4, "Description": "Category 3 hurricane approaches the Florida Panhandle prior to landfall near Biloxi, Mississippi. Considerable wind and rain impacts were felt from Florida to Louisiana.", "Event ID": "10221", "Disaster_stringindexer_transform": 203.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 63.0, "Ending Date_stringindexer_transform": 196.0, "Description_stringindexer_transform": 3.0, "Event ID_stringindexer_transform": 198.0}, {"Disaster": "Florida Freeze (January 1985)", "Disaster Type": "Freeze", "Beginning Date": "1/20/1985", "Ending Date": "1/22/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2868.0, "Deaths": 0, "Description": "Severe freeze over central/northern Florida damages citrus crops.", "Event ID": "10222", "Disaster_stringindexer_transform": 194.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 41.0, "Ending Date_stringindexer_transform": 0.0, "Description_stringindexer_transform": 67.0, "Event ID_stringindexer_transform": 9.0}, {"Disaster": "Winter Storm, Cold Wave (January 1985)", "Disaster Type": "Winter Storm", "Beginning Date": "1/19/1985", "Ending Date": "1/22/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2000.0, "Deaths": 150, "Description": "Extreme cold and winter storms in the Southeast, South, Southwest, Northeast, Midwest, and North", "Event ID": "10223", "Disaster_stringindexer_transform": 221.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 217.0, "Ending Date_stringindexer_transform": 0.0, "Description_stringindexer_transform": 157.0, "Event ID_stringindexer_transform": 66.0}, {"Disaster": "Severe Storms and Hail (June 1984)", "Disaster Type": "Severe Storm", "Beginning Date": "6/13/1984", "Ending Date": "6/17/1984", "Total CPI-Adjusted Cost (Millions of Dollars)": 1102.0, "Deaths": 1, "Description": "Severe storms and hail impact Colorado, South Dakota and Nebraska.", "Event ID": "10224", "Disaster_stringindexer_transform": 164.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 190.0, "Ending Date_stringindexer_transform": 188.0, "Description_stringindexer_transform": 218.0, "Event ID_stringindexer_transform": 166.0}, {"Disaster": "Tornadoes, Severe Storms, Floods (Spring 1984)", "Disaster Type": "Severe Storm", "Beginning Date": "3/27/1984", "Ending Date": "4/7/1984", "Total CPI-Adjusted Cost (Millions of Dollars)": 1489.0, "Deaths": 80, "Description": "States in the Southeast and Northeast regions are impacted by tornadoes, severe storms, and flooding. The states impacted include GA, FL, SC, NC, VA, MD, DE, NJ, NY, PA, CT, MA and RI.", "Event ID": "10225", "Disaster_stringindexer_transform": 139.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 159.0, "Ending Date_stringindexer_transform": 13.0, "Description_stringindexer_transform": 129.0, "Event ID_stringindexer_transform": 211.0}, {"Disaster": "Freeze, Cold Wave (December 1983)", "Disaster Type": "Freeze", "Beginning Date": "12/15/1983", "Ending Date": "12/25/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 5175.0, "Deaths": 151, "Description": "Severe freeze damages citrus crops across central/northern Florida. Associated cold wave over much of the U.S. causes over 100 deaths and additional damages.", "Event ID": "10226", "Disaster_stringindexer_transform": 190.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 74.0, "Ending Date_stringindexer_transform": 106.0, "Description_stringindexer_transform": 5.0, "Event ID_stringindexer_transform": 57.0}, {"Disaster": "Southeast Drought (Summer 1983)", "Disaster Type": "Drought", "Beginning Date": "6/1/1983", "Ending Date": "8/31/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 7647.0, "Deaths": 0, "Description": "1983 flash drought in the southeastern U.S. with losses to agriculture, most notably corn and soybeans. The states impacted include AL, AR, GA, KY, LA, MO, MS, NC, SC, TN and VA.", "Event ID": "10227", "Disaster_stringindexer_transform": 210.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 176.0, "Ending Date_stringindexer_transform": 189.0, "Description_stringindexer_transform": 217.0, "Event ID_stringindexer_transform": 113.0}, {"Disaster": "Hurricane Alicia (August 1983)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/17/1983", "Ending Date": "8/20/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 7740.0, "Deaths": 21, "Description": "Category 3 hurricane makes landfall near Galveston, Texas with maximum sustained winds 115 mph. Hurricane Alicia was the first hurricane to hit the United States mainland since Hurricane Allen in August 1980.", "Event ID": "10228", "Disaster_stringindexer_transform": 123.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 70.0, "Ending Date_stringindexer_transform": 34.0, "Description_stringindexer_transform": 195.0, "Event ID_stringindexer_transform": 181.0}, {"Disaster": "Western Storms & Flooding (December 1982-March 1983)", "Disaster Type": "Flooding", "Beginning Date": "12/13/1982", "Ending Date": "3/31/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 4004.0, "Deaths": 50, "Description": "Severe storms and flooding, especially in the states of WA, OR, CA, AZ, NV, ID, UT, and MT", "Event ID": "10229", "Disaster_stringindexer_transform": 41.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 24.0, "Ending Date_stringindexer_transform": 58.0, "Description_stringindexer_transform": 177.0, "Event ID_stringindexer_transform": 107.0}, {"Disaster": "Gulf States Storms and Flooding (December 1982-January 1983)", "Disaster Type": "Flooding", "Beginning Date": "12/1/1982", "Ending Date": "1/15/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 4101.0, "Deaths": 45, "Description": "Severe storms and flooding, especially in the states of TX, AR, LA, MS, AL, GA, and FL", "Event ID": "10230", "Disaster_stringindexer_transform": 80.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 58.0, "Ending Date_stringindexer_transform": 155.0, "Description_stringindexer_transform": 229.0, "Event ID_stringindexer_transform": 179.0}, {"Disaster": "Severe storms (June 1982)", "Disaster Type": "Severe Storm", "Beginning Date": "5/31/1982", "Ending Date": "6/10/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1281.0, "Deaths": 30, "Description": "Severe storms cause damage across the South, Southeast and Central regions. The states impacted include AR, IL, KY, IN, SC, GA and OH.", "Event ID": "10231", "Disaster_stringindexer_transform": 224.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 65.0, "Ending Date_stringindexer_transform": 98.0, "Description_stringindexer_transform": 192.0, "Event ID_stringindexer_transform": 223.0}, {"Disaster": "Midwest/Plains/Southeast Tornadoes (April 1982)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/1982", "Ending Date": "4/4/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1290.0, "Deaths": 33, "Description": "Tornadoes and severe weather affect the states (AL, AR, CO, IA, IL, IN, KS, KY, LA, MI, MN, MO, MS, NE, OH, OK, PA, TN, TX, WI, WV) across the Midwest, Plains and Southeast.", "Event ID": "10232", "Disaster_stringindexer_transform": 93.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 115.0, "Ending Date_stringindexer_transform": 72.0, "Description_stringindexer_transform": 165.0, "Event ID_stringindexer_transform": 68.0}, {"Disaster": "Midwest/Southeast/Northeast Winter Storm, Cold Wave (January 1982)", "Disaster Type": "Winter Storm", "Beginning Date": "1/8/1982", "Ending Date": "1/16/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1767.0, "Deaths": 85, "Description": "Winter storm and coldwave affect numerous states (AL, AR, CT, DE, FL, GA, IA, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MO, MS, NC, ND, NH, NJ, NY, OH, OK, PA, RI, SC, TN, TX, VA, VT, WI, WV) across the Midwest, Southeast and Northeast.", "Event ID": "10233", "Disaster_stringindexer_transform": 50.0, "Disaster Type_stringindexer_transform": 4.0, "Beginning Date_stringindexer_transform": 60.0, "Ending Date_stringindexer_transform": 166.0, "Description_stringindexer_transform": 212.0, "Event ID_stringindexer_transform": 96.0}, {"Disaster": "Severe Storms, Flash Floods, Hail, Tornadoes (May 1981)", "Disaster Type": "Severe Storm", "Beginning Date": "5/5/1981", "Ending Date": "5/10/1981", "Total CPI-Adjusted Cost (Millions of Dollars)": 1164.0, "Deaths": 20, "Description": "Severe storms cause damage across the Midwest and South. The states most impacted include TX, OK, KS, AL and LA.", "Event ID": "10234", "Disaster_stringindexer_transform": 186.0, "Disaster Type_stringindexer_transform": 0.0, "Beginning Date_stringindexer_transform": 162.0, "Ending Date_stringindexer_transform": 131.0, "Description_stringindexer_transform": 178.0, "Event ID_stringindexer_transform": 200.0}, {"Disaster": "Florida Freeze (January 1981)", "Disaster Type": "Freeze", "Beginning Date": "1/12/1981", "Ending Date": "1/14/1981", "Total CPI-Adjusted Cost (Millions of Dollars)": 1658.0, "Deaths": 0, "Description": "Severe freeze heavily damaged fruit crops across Florida. Over 25,000 Florida farms were impacted and sustained losses.", "Event ID": "10235", "Disaster_stringindexer_transform": 234.0, "Disaster Type_stringindexer_transform": 6.0, "Beginning Date_stringindexer_transform": 207.0, "Ending Date_stringindexer_transform": 157.0, "Description_stringindexer_transform": 213.0, "Event ID_stringindexer_transform": 146.0}, {"Disaster": "Central/Eastern Drought/Heatwave (Summer-Fall 1980)", "Disaster Type": "Drought", "Beginning Date": "6/1/1980", "Ending Date": "11/30/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 32464.0, "Deaths": 1260, "Description": "Central and eastern U.S. drought/heat wave caused damage to agriculture and other related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 10,000.", "Event ID": "10236", "Disaster_stringindexer_transform": 9.0, "Disaster Type_stringindexer_transform": 3.0, "Beginning Date_stringindexer_transform": 69.0, "Ending Date_stringindexer_transform": 212.0, "Description_stringindexer_transform": 12.0, "Event ID_stringindexer_transform": 114.0}, {"Disaster": "Hurricane Allen (August 1980)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/7/1980", "Ending Date": "8/11/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 1911.0, "Deaths": 13, "Description": "Category 3 hurricane makes landfall north of Brownsville, Texas with maximum sustained winds of 115 mph. Hurricane Allen causes rainfall up to 20 inches in southern Texas and storm surge as high as 12 feet along the coast.", "Event ID": "10237", "Disaster_stringindexer_transform": 73.0, "Disaster Type_stringindexer_transform": 1.0, "Beginning Date_stringindexer_transform": 138.0, "Ending Date_stringindexer_transform": 228.0, "Description_stringindexer_transform": 50.0, "Event ID_stringindexer_transform": 50.0}, {"Disaster": "Southern Severe Storms and Flooding (April 1980)", "Disaster Type": "Flooding", "Beginning Date": "4/10/1980", "Ending Date": "4/17/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 2289.0, "Deaths": 7, "Description": "Severe storms and flooding affect several states (AR, LA, MS) across the South.", "Event ID": "10238", "Disaster_stringindexer_transform": 233.0, "Disaster Type_stringindexer_transform": 2.0, "Beginning Date_stringindexer_transform": 179.0, "Ending Date_stringindexer_transform": 124.0, "Description_stringindexer_transform": 85.0, "Event ID_stringindexer_transform": 213.0}], "FE": [{"transformationsData": [{"feature_label": "Disaster", "transformation_label": "String Indexer"}], "feature": "Disaster", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "238", "mean": "", "stddev": "", "min": "Arizona Severe Weather (October 2010)", "max": "Winter Storm, Cold Wave (January 1994)", "missing": "0", "distinct": "236"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Disaster"}, {"transformationsData": [{"feature_label": "Disaster Type", "transformation_label": "String Indexer"}], "feature": "Disaster Type", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "238", "mean": "", "stddev": "", "min": "Drought", "max": "Winter Storm", "missing": "0", "distinct": "7"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Disaster Type"}, {"transformationsData": [{"feature_label": "Beginning Date", "transformation_label": "String Indexer"}], "feature": "Beginning Date", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "238", "mean": "", "stddev": "", "min": "1/1/1995", "max": "9/6/2017", "missing": "0", "distinct": "235"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Beginning Date"}, {"transformationsData": [{"feature_label": "Ending Date", "transformation_label": "String Indexer"}], "feature": "Ending Date", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "238", "mean": "", "stddev": "", "min": "1/11/1997", "max": "9/9/2004", "missing": "0", "distinct": "232"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Ending Date"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "238", "mean": "6801.87", "stddev": "16644.81", "min": "1000.0", "max": "165012.0", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "Total CPI-Adjusted Cost (..."}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "Deaths", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "238", "mean": "54.82", "stddev": "244.64", "min": "0", "max": "2981", "missing": "0"}, "updatedLabel": "Deaths"}, {"transformationsData": [{"feature_label": "Description", "transformation_label": "String Indexer"}], "feature": "Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "238", "mean": "", "stddev": "", "min": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "max": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "missing": "0", "distinct": "238"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Description"}, {"transformationsData": [{"feature_label": "Event ID", "transformation_label": "String Indexer"}], "feature": "Event ID", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "238", "mean": "10119.99", "stddev": "68.57", "min": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "max": "10238", "missing": "0", "distinct": "238"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Event ID"}, {"feature": "Disaster_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "238", "mean": "116.52", "stddev": "68.82", "min": "0.0", "max": "235.0", "missing": "0"}, "updatedLabel": "Disaster_stringindexer_tr..."}, {"feature": "Disaster Type_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "238", "mean": "1.58", "stddev": "1.81", "min": "0.0", "max": "6.0", "missing": "0"}, "updatedLabel": "Disaster Type_stringindex..."}, {"feature": "Beginning Date_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "238", "mean": "115.54", "stddev": "68.78", "min": "0.0", "max": "234.0", "missing": "0"}, "updatedLabel": "Beginning Date_stringinde..."}, {"feature": "Ending Date_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "238", "mean": "112.65", "stddev": "68.6", "min": "0.0", "max": "231.0", "missing": "0"}, "updatedLabel": "Ending Date_stringindexer..."}, {"feature": "Description_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "238", "mean": "118.5", "stddev": "68.85", "min": "0.0", "max": "237.0", "missing": "0"}, "updatedLabel": "Description_stringindexer..."}, {"feature": "Event ID_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "238", "mean": "118.5", "stddev": "68.85", "min": "0.0", "max": "237.0", "missing": "0"}, "updatedLabel": "Event ID_stringindexer_tr..."}], "samplecount": 238, "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "FEGraph": [{"values": {"label": ["Midwest/Southeast Tornadoes and Severe Weather (June 2011)", "Central Severe Weather (October 2006)", "Southern Severe Weather (April 2008)", "California Freeze (January 2007)", "Hurricane Harvey (August 2017)", "Colorado Flooding (September 2013)", "Hurricane Maria (September 2017)", "Hurricane Wilma (October 2005)", "Hurricane Gloria (September 1985)", "North Dakota, South Dakota and Montana Drought (Spring-Fall 2017)", "California Wildfires (Fall 1993)", "Hurricane Charley (August 2004)", "Hail, Tornadoes (April 1992)", "Freeze, Cold Wave (December 1983)", "Hurricane Erin (August 1995)", "Southwest/Great Plains Drought (2009)", "Oakland Firestorm (October 1991)", "Rockies and Midwest Severe Weather (July 2011)", "Arizona Severe Weather (October 2010)", "Midwest/Plains/Southeast Drought (Spring-Summer 2006)", "Central and Eastern Winter storm, Cold Wave (February 2015)", "Midwest, South and East Severe Weather (June 2009)", "Northern Plains Drought (Summer-Fall 1989)", "Western Drought (2014)", "Southeast Freeze (March 2017)", "Hurricane Ike (September 2008)", "Hurricane Katrina (August 2005)", "Midwest/Plains/East Tornadoes (May 2013)", "Spring Freeze (April 2007)", "Midwest/Mid-Atlantic Severe Weather (June 2008)", "Western/Eastern Drought/Heatwave (Summer-Fall 2007)", "East/South Severe Weather and Flooding (April 2007)", "Hurricane Allen (August 1980)", "Severe Storms, Hail (June 1992)", "Hurricane Juan (October 1985)", "Southern and Eastern Tornadoes and Severe Weather (April 2018)", "Severe Storms, Tornadoes (March 1991)", "Oklahoma, Kansas, and Texas Tornadoes and Severe Weather (May 2010)", "Western Drought (2015)", "U.S. Wildfires (Fall 2008)", "Eastern Drought/Heatwave (Summer 1999)", "Numerous Wildfires (2006)", "Mississippi and Ohio Valley Severe Weather and Flooding (March 1997)", "Central and Eastern Severe Weather (May 2018)", "Louisiana Flooding (August 2016)", "Midwest/Ohio Valley Severe Weather (April 2015)", "Midwest/Northeast Severe Storms and Flooding (July 2010)", "U.S. Drought (Spring-Fall 2002)", "Northeast Winter Storm (December 1992)", "Hurricane Ivan (September 2004)", "Severe Storms and Tornadoes (March 2006)", "Severe Storms (March 1992)", "Hurricane Bob (August 1991)", "South/Southeast Severe Weather (April 2015)", "Southeastern Tornadoes and Severe Weather (March 2018)", "Hurricane Elena (September 1985)", "Ohio Valley Tornadoes (November 2013)", "Oklahoma and Kansas Tornadoes (May 1999)", "Tropical Storm Lee (September 2011)", "Colorado Hail Storm and Central Severe Weather (May 2017)", "Southeast/Ohio Valley Severe Weather (February 2009)", "Colorado Hail Storm (July 1990)", "Southeast Ice Storm (February 1994)", "Hurricane Fran (September 1996)", "Texas Flooding (October 1998)", "Western Severe Storms and Flooding (February 1986)", "Hurricane Jeanne (September 2004)", "Hurricane Irma (September 2017)", "Hurricane Isaac (August 2012)", "Tropical Storm Alberto (July 1994)", "U.S. Drought/Heatwave (Summer 1988)", "Western/Eastern Severe Weather and Flooding (Winter-Spring 1998)", "Colorado Hail Storm (June 2018)", "Western Fire Season (Summer-Fall 1994)", "Texas Flooding (October 1994)", "Southeast Tornadoes (March 2008)", "Midwest/Ohio Valley Hail and Tornadoes (April 2001)", "Western Fire Season (Fall 2002)", "Southern Plains Drought (Spring-Summer 1996)", "Severe Storms/Hail (April 2003)", "Western Wildfires, California Firestorm (Summer-Fall 2017)", "Western Fire Season (Spring-Summer 2000)", "Northeast Winter Storm (March 2018)", "Central and Eastern Winter Storm (January 1999)", "Northeast Flooding (June 2006)", "East Coast Blizzard and Severe Weather (March 1993)", "Southern Plains Tornadoes (May 2015)", "Plains Tornadoes and Central Severe Weather (May 2016)", "Midwest/Southeast Severe Weather (August 2011)", "Groundhog Day Blizzard (February 2011)", "Southern Plains/Southwest Drought & Heat Wave (Spring-Summer 2011)", "Midwest Tornado Outbreak (March 2017)", "Southwest/Southern Plains Drought (Summer-Fall 2018)", "South Carolina and East Coast Flooding (October 2015)", "Severe Storms and Hail (June 1984)", "Central and Eastern Winter Storm (January 2018)", "Hurricane Dolly (July 2008)", "Pacific Northwest Severe Flooding (February 1996)", "Rockies/Southwest Severe Weather (June 2012)", "Colorado Hail Storm (July 2009)", "Hurricane Lili (October 2002)", "Northeast Flooding (March 2010)", "Severe Storms, Hail, Tornadoes (May 2004)", "California Freeze (December 1990)", "Tropical Storm Allison (June 2001)", "Southern Drought/Heat Wave (Summer 1998)", "West/Northeast/Southeast Drought (2016)", "Rockies/Central Plains Severe Weather (June 2014)", "Rockies/Midwest/Eastern Severe Weather (May 2014)", "Hurricane Sandy (October 2012)", "Severe Storms, Flash Floods, Hail, Tornadoes (May 1981)", "Texas and Louisiana Flooding (March 2016)", "South Plains Severe Weather (May 1995)", "Florida Freeze (January 1985)", "South/Southeast Tornadoes (April 2016)", "Hurricane Isabel (September 2003)", "Hurricane Andrew (August 1992)", "Houston Flooding (April 2016)", "Hurricane Alicia (August 1983)", "Hurricane Opal (October 1995)", "Southeast Severe Weather (November 1992)", "South/Southeast Severe Weather (March 2017)", "Severe Storms (May 1989)", "Western/Plains Drought/Heatwave (Spring-Fall 2013)", "Plains/East/Northeast Severe Weather (June-July 2012)", "Midwest/Southeast Tornadoes (April 2011)", "Minnesota Severe Storms/Hail (May 1998)", "Central/Southeast Tornado Outbreak (March 2017)", "Hurricane Florence (September 2018)", "U.S. Drought/Heatwave (2012)", "Southeast Drought/Heatwave (Summer 1986)", "Western/Central/Southeast Drought/Heatwave (Spring-Fall 2000)", "California Flooding (February 2017)", "Western Wildfires (Summer-Fall 2009)", "Central and Northeast Severe Weather (June 2015)", "Rockies/Plains Severe Weather (September 2014)", "Southeast/Midwest Tornadoes (April 2011)", "Rockies/Central/East Severe Weather (June 2010)", "Western and Alaskan Wildfires (Summer-Fall 2015)", "Southeast Severe Weather (March 2013)", "Hurricane Rita (September 2005)", "Western Wildfires (Summer-Fall 2012)", "Gulf States Storms and Flooding (December 1982-January 1983)", "Western Wildfires (Summer 2007)", "Southern Severe Storms and Flooding (April 1980)", "Southeast and Eastern Tornadoes (February 2016)", "East/South Flooding and Severe Weather (May 2010)", "Midwest/Southeast Tornadoes (March 2009)", "California Freeze (December 1998)", "Mississippi River flooding (April-May 2011)", "Western/Central Drought/Heatwave (Spring-Fall 2003)", "Midwest/Plains/Southeast Tornadoes (April 1982)", "Hurricane Bonnie (August 1998)", "South Florida Flooding (October 2000)", "Hurricane Floyd (September 1999)", "Midwest Drought (Spring-Summer 2005)", "Texas and Oklahoma Flooding and Severe Weather (May 2015)", "Tropical Storm Frances (September 1998)", "U.S. Drought (2008)", "West Virginia Flooding and Ohio Valley Tornadoes (June 2016)", "Hurricane Gustav (September 2008)", "California Wildfires (Fall 2003)", "Western Wildfires (Summer-Fall 2018)", "Plains Severe Weather (April 2014)", "Hurricane Dennis (July 2005)", "Southeast/Ohio Valley/Midwest Tornadoes (April 2011)", "U.S. Drought (Spring-Summer 1991)", "Midwest/Ohio Valley Severe Weather (April-May 2012)", "Florida Freeze (December 1989)", "Florida Freeze (January 1981)", "Southern Severe Weather (March 2016)", "Midwest/Southeast/Northeast Winter Storm, Cold Wave (January 1982)", "Texas Hail Storm (June 2018)", "Rockies and Northeast Severe Weather (July 2016)", "Southeast Severe Weather (March 2005)", "Hurricane Georges (September 1998)", "Central/Eastern Drought/Heatwave (Summer-Fall 1980)", "Midwest Tornadoes (April 2006)", "Midwest Flooding (Summer 2008)", "Michigan and Northeast Flooding (August 2014)", "Midwest/Plains/Northeast Tornadoes (May 2013)", "Southern Flooding (May 1990)", "Severe Storms and Tornadoes (April 2002)", "Winter Storm, Cold Wave (December 1989)", "Texas Tornadoes (April 2012)", "Southern Tornado Outbreak and Western Storms (January 2017)", "South/Southeast Severe Weather & Tornadoes (April 2009)", "Southeast Tornadoes and Severe Weather (February 2008)", "Midwest Severe Weather (June 2017)", "Midwest/Southeast/Northeast Winter Storm (January 2014)", "Blizzard/Floods (January 1996)", "West Coast Flooding (December 1996-January 1997)", "Hurricane Irene (August 2011)", "Midwest/Plains Tornadoes (April 1994)", "Winter Storm, Cold Wave (January 1985)", "Midwest Severe Weather (August 2013)", "Midwest Tornadoes and Severe Weather (May 2008)", "Winter Storm, Cold Wave (January 1994)", "Southeast/Ohio Valley Tornadoes (March 2012)", "Severe Storms/Tornadoes (May 2003)", "Severe storms (June 1982)", "Texas, New Mexico, Arizona Wildfires (Summer-Fall 2011)", "Midwest/Southeast Tornadoes (May 2011)", "Northeast Ice Storm (January 1998)", "Ohio Valley/South Tornadoes (April 2011)", "Hurricane Hugo (September 1989)", "Midwest Tornadoes (April 2012)", "Hurricane Frances (September 2004)", "Severe Storms, Tornadoes (June 1998)", "Tornadoes, Severe Storms, Floods (Spring 1984)", "Southern Plains/Midwest/Northeast Severe Weather (May 2012)", "Midwest Flooding (Summer 1993)", "Severe Weather (July 2003)", "Hurricane Marilyn (September 1995)", "Southeast Drought/Heat Wave (Summer 1993)", "Hurricane Iniki (September 1992)", "North Texas Hail Storm (March 2016)", "Southeast Drought (Summer 1983)", "Western/Southeast Wildfires (Summer-Fall 2016)", "Midwest/Southeast/Northeast Tornadoes and Flooding (April 2014)", "Northern Plains Flooding (Spring 1997)", "Illinois Flooding and Severe Weather (April 2013)", "Midwest/Plains Severe Weather (April 2013)", "Missouri and Arkansas Flooding and Central Severe Weather (May 2017)", "Texas Tornadoes and Midwest Flooding (December 2015)", "Hurricane Matthew (October 2016)", "Missouri River flooding (May-June 2011)", "California Flooding (January-March 1995)", "Rockies/Central Tornadoes and Severe Weather (May 2016)", "Central and Northeastern Severe Weather (May 2018)", "Western Storms & Flooding (December 1982-March 1983)", "North/Central Texas Hail Storm (April 2016)", "Midwest/Southeast Tornadoes (April 6-8, 2006)", "Minnesota Hail Storm and Upper Midwest Severe Weather (June 2017)", "Midwest/Plains Severe Weather (July 2003)", "Central and Eastern Winter Storm (Mid-January 1999)"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Disaster", "count": 236, "min": "Arizona Severe Weather (October 2010)", "max": "Winter Storm, Cold Wave (January 1994)"}, {"values": {"label": ["Winter Storm", "Freeze", "Tropical Cyclone", "Flooding", "Wildfire", "Severe Storm", "Drought"], "data": [16, 9, 41, 29, 16, 101, 26]}, "label": "Disaster Type", "count": 7, "min": "Drought", "max": "Winter Storm"}, {"values": {"label": ["6/1/2018", "4/27/2014", "11/17/2013", "6/6/2008", "3/2/2012", "2/28/2017", "5/15/1998", "3/26/2017", "2/22/2016", "5/6/2015", "4/2/2014", "6/29/2012", "6/1/1998", "9/5/1996", "9/1/2003", "3/27/1984", "6/1/2015", "12/13/1982", "1/11/2007", "4/7/2015", "6/1/2007", "5/1/2011", "4/4/2003", "3/1/2002", "4/6/2001", "4/13/2007", "6/5/2001", "8/17/1983", "2/14/1986", "1/20/1985", "9/1/2008", "8/25/2005", "12/18/1990", "4/18/2015", "4/6/2006", "5/31/1982", "5/25/2012", "6/27/1993", "4/8/2011", "12/15/1983", "10/1/1991", "3/1/1991", "4/10/1980", "4/4/2011", "6/9/2009", "5/21/2004", "3/18/2013", "3/1/2018", "5/8/2017", "1/1/1996", "1/1/2006", "7/9/2005", "9/29/2014", "5/5/1995", "5/1/1989", "4/16/2013", "5/11/1990", "9/21/1989", "6/1/2017", "5/8/2016", "7/11/1990", "9/26/1985", "3/1/2017", "1/1/2014", "12/21/1989", "5/13/2018", "3/17/2016", "8/18/1991", "10/2/2006", "7/20/2009", "3/1/1996", "7/7/1994", "7/21/2003", "6/18/2018", "1/3/2018", "5/5/1981", "6/10/2010", "6/13/1984", "6/18/2011", "6/1/2016", "12/1/1982", "8/6/2013", "1/1/2012", "3/8/2006", "6/25/2006", "1/1/1997", "9/12/2008", "4/4/2007", "4/25/2017", "8/13/2004", "4/7/2013", "4/19/2011", "4/30/2010", "6/3/2014", "1/1/1995", "4/2/1982", "4/13/2012", "4/1/2008", "12/1/1997", "8/26/2012", "12/20/1998", "2/5/2008", "3/1/2011", "4/13/2006", "3/24/2005", "2/8/1994", "10/24/2005", "1/20/2017", "4/28/2012", "4/2/2012", "9/14/1999", "3/14/2017", "4/10/2016", "6/1/2012", "7/10/2011", "6/1/2009", "10/8/2016", "6/1/1999", "10/30/2012", "10/3/2000", "9/18/2003", "2/28/1997", "6/1/1980", "8/11/2014", "9/1/2002", "9/15/1995", "8/31/2008", "10/16/1998", "5/3/2003", "4/14/2011", "12/23/1989", "1/1/1999", "5/10/2010", "9/13/2018", "4/27/2002", "1/17/1994", "10/27/1985", "6/12/2017", "1/8/1982", "6/1/1994", "5/23/2015", "8/1/2002", "4/9/2009", "7/28/2016", "8/27/1998", "2/3/1997", "2/8/2017", "4/13/2018", "10/1/2015", "5/18/2013", "3/1/2005", "3/11/1993", "8/30/1985", "5/18/2014", "9/15/2004", "1/19/1985", "2/10/2009", "6/1/2011", "3/26/1991", "3/23/2016", "5/22/2008", "3/1/2013", "5/1/2018", "9/12/2004", "5/21/2016", "4/9/2008", "4/25/1994", "7/20/2010", "11/21/1992", "1/5/2014", "7/23/2008", "9/20/1998", "9/19/2017", "6/19/1992", "10/4/1995", "4/26/2016", "1/1/2016", "3/6/2017", "6/6/2012", "6/1/1988", "5/30/1998", "12/10/1992", "8/23/1992", "9/1/1993", "5/27/2013", "1/1/2008", "2/1/2011", "6/1/1993", "8/7/1980", "9/20/2005", "9/3/2004", "3/1/2000", "3/18/2018", "9/10/2013", "6/21/2015", "4/17/2016", "6/6/2018", "5/22/2011", "9/6/2017", "3/25/2009", "8/1/1995", "2/7/1996", "7/4/2003", "6/1/1989", "1/13/1999", "8/12/2016", "1/1/2009", "3/14/2008", "3/1/2006", "3/24/1992", "6/1/1983", "1/12/1981", "8/8/1998", "3/8/2016", "3/1/2003", "6/27/2017", "9/1/2011", "10/5/2010", "1/1/2015", "3/1/2010", "6/1/1986", "6/9/2017", "4/25/2011", "4/28/1992", "1/5/1998", "10/16/1994", "8/25/2017", "4/1/2011", "8/26/2011", "12/26/2015", "6/22/2016", "5/3/1999", "2/14/2015", "9/11/1992", "8/17/2011"], "data": [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Beginning Date", "count": 235, "min": "1/1/1995", "max": "9/6/2017"}, {"values": {"label": ["11/17/2013", "5/7/2017", "5/24/1997", "8/31/2011", "1/20/1994", "6/30/2011", "5/6/1999", "10/12/2016", "4/18/2016", "3/24/2016", "5/15/1998", "4/14/2012", "9/21/2017", "4/28/2002", "2/13/1994", "8/31/1996", "4/20/2015", "9/19/2003", "9/3/2008", "3/16/2017", "5/1/2014", "8/18/2011", "5/12/2010", "1/16/1999", "11/30/2011", "1/14/1981", "7/9/2003", "8/20/1983", "2/22/2017", "11/30/2015", "3/27/2005", "3/14/1993", "8/31/2000", "3/3/2012", "5/10/2015", "4/19/2013", "8/29/1998", "3/5/1997", "10/25/1994", "5/11/2017", "6/24/2016", "4/12/2016", "12/31/2012", "7/23/2003", "8/31/1993", "3/18/2013", "3/13/2006", "11/30/1993", "6/17/1984", "11/30/2003", "11/30/2002", "2/12/1996", "12/31/2016", "3/12/2016", "8/7/1995", "7/11/1990", "6/29/2017", "9/12/1992", "8/11/1980", "3/1/2017", "10/6/1995", "4/10/2007", "4/16/2018", "6/12/2012", "7/20/2009", "11/23/1992", "12/25/1990", "11/30/2012", "4/28/2011", "8/7/2013", "5/1/2012", "8/31/2012", "2/24/2016", "9/16/1999", "5/22/2013", "6/12/2009", "2/11/2009", "6/10/1982", "7/2/2012", "7/10/1994", "3/29/1991", "5/19/1990", "8/13/1998", "1/11/1997", "7/30/2016", "5/23/2014", "11/30/1989", "9/29/2004", "6/5/2014", "9/16/2013", "4/3/2012", "8/31/2006", "9/24/2005", "1/16/1982", "4/29/1992", "1/4/1999", "9/8/1996", "8/27/1992", "12/31/2009", "3/15/2008", "12/31/2006", "10/31/2012", "9/14/2008", "2/28/1998", "10/4/2000", "4/7/1984", "8/31/2017", "4/11/2008", "4/9/2015", "9/16/2018", "10/24/2005", "3/31/2010", "8/5/2002", "10/31/1991", "5/15/2018", "6/12/2008", "4/17/2007", "3/31/1995", "9/5/2011", "12/13/1992", "6/17/2001", "1/31/1996", "3/8/2017", "11/30/1994", "4/16/2011", "8/15/2016", "5/26/2015", "7/23/2010", "7/25/2008", "5/10/2003", "4/4/1982", "10/24/1998", "8/31/1999", "1/8/2014", "1/22/2017", "7/14/2011", "4/8/2006", "5/31/2013", "5/27/2004", "9/12/2017", "10/5/2015", "6/20/1992", "1/17/2007", "9/3/1985", "12/25/1983", "5/2/2010", "8/28/2011", "5/11/2016", "1/9/1998", "8/20/1991", "4/11/2013", "8/31/1991", "9/29/1998", "8/31/1998", "12/25/1989", "3/28/2017", "3/3/2018", "10/31/1985", "4/16/2006", "2/20/2015", "12/31/2014", "1/5/2018", "8/31/2005", "8/14/2004", "4/17/1980", "6/16/2017", "5/2/2016", "11/30/2007", "4/11/2011", "4/5/2011", "10/6/2010", "7/11/2005", "12/29/2015", "6/22/2011", "5/31/2011", "12/28/1998", "5/7/1995", "5/4/2018", "9/28/1985", "5/27/2008", "12/31/2017", "6/11/2017", "6/6/2018", "4/10/2009", "3/28/2009", "9/9/2004", "1/22/1985", "12/31/2008", "5/6/1989", "4/3/2014", "4/11/2001", "6/15/2010", "9/22/1989", "2/16/1986", "6/19/2018", "9/30/2018", "2/3/2011", "6/30/2008", "12/26/1989", "5/10/1981", "10/5/2006", "8/30/2005", "6/2/1998", "5/27/2011", "11/30/1980", "4/27/1994", "1/15/1983", "4/20/2011", "8/31/2007", "9/21/2004", "4/7/2003", "3/21/2018", "9/17/1995", "8/15/1993", "6/25/2015", "12/31/2015", "11/30/2013", "8/31/1988", "3/18/2016", "6/28/2006", "11/30/2000", "8/13/2014", "8/31/1983", "5/26/2016", "2/6/2008", "3/25/1992", "3/31/1983", "11/30/2009", "10/2/2014", "11/30/2008", "8/31/1986", "5/30/2012"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Ending Date", "count": 232, "min": "1/11/1997", "max": "9/9/2004"}, {"values": {"label": ["1000.0 - 17401.2", "17401.2 - 33802.4", "33802.4 - 50203.6", "50203.6 - 66604.8", "66604.8 - 83006.0", "83006.0 - 99407.2", "99407.2 - 115808.4", "115808.4 - 132209.6", "132209.6 - 148610.8", "148610.8 - 165012.0"], "data": [220, 9, 4, 1, 1, 1, 0, 1, 0, 1]}, "label": "Total CPI-Adjusted Cost (Millions of Dollars)", "count": 10, "min": 1000.0, "max": 165012.0}, {"values": {"label": ["0.0 - 298.1", "298.1 - 596.2", "596.2 - 894.3", "894.3 - 1192.4", "1192.4 - 1490.5", "1490.5 - 1788.6", "1788.6 - 2086.7", "2086.7 - 2384.8", "2384.8 - 2682.9", "2682.9 - 2981"], "data": [232, 3, 0, 0, 1, 0, 1, 0, 0, 1]}, "label": "Deaths", "count": 10, "min": 0.0, "max": 2981}, {"values": {"label": ["Outbreak of tornadoes and severe weather over the midwest (OK, KS, NE, IA) with 98 confirmed tornadoes including many tornadoes that remained on the ground for an extended time - traveling tens of miles.", "Large-hail impacts highly-populated area of the Dallas-Ft. Worth metroplex. Golfball to baseball-sized hail damages many homes, vehicles and businesses.", "Category 2 hurricane impacts the U.S. Virgin Islands and Puerto Rico with maximum sustained winds of 110 mph.", "Category 1 hurricane made landfall over coastal NC and moved northward along the Mid-Atlantic Coast (NC, VA, MD, NJ, NY, CT, RI, MA, VT) causing torrential rainfall and flooding across the Northeast. Wind damage in coastal NC, VA, and MD was moderate with considerable damage resulting from falling trees and power lines, while flooding caused extensive flood damage across NJ, NY, and VT. Over seven million homes and businesses lost power during the storm. Numerous tornadoes were also reported in several states further adding to the damage.", "Category 2 hurricane makes landfall in southern Texas causing considerable wind and flooding damage in TX and NM.", "Winter storm affects the Southeast and Northeast regions. The states impacted include CT, DE, IL, IN, KY, MA, MD, ME, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA, VT and WV.", "California has again been impacted by a damaging and costly wildfire season. Of note, the Medincino Complex Fire was the largest wildfire on record in California burning over 450,000 acres while the Carr Fire in Northern California damaged or destroyed over 1,500 homes and businesses. Several other Western states (OR, WA, UT, WY, ID, MT, CO) have also had active and damaging wildfire seasons. In total, over 7.7 million acres has burned across the U.S. during the first 9 months of 2018, which is well above the 10-year average (2008-2017) of 5.9 million acres for the January-September period.", "Severe freeze damages citrus crops across central/northern Florida. Associated cold wave over much of the U.S. causes over 100 deaths and additional damages.", "Severe storms across the Rockies and Northeastern states (CO, WY, VA, MD, PA, NJ, NY) caused large hail and high wind damage. Storm damage in Colorado was the most costly due to hail.", "Category 3 hurricane makes landfall north of Brownsville, Texas with maximum sustained winds of 115 mph. Hurricane Allen causes rainfall up to 20 inches in southern Texas and storm surge as high as 12 feet along the coast.", "Severe weather over the Southeast (MS, AL, GA, TN) with 10 confirmed tornadoes. Considerable damage resulting from large hail and straight-line wind.", "South, Southeast, Midwest, Northeast affected by damaging winter storm", "Tornadoes and severe flooding hit the states of AR, MO, MS, TN, IL, IN, KY, OH, and WV, with over 10 inches of rain in 24 hours in Louisville.", "Winter storm and coldwave affect numerous states (AL, AR, CT, DE, FL, GA, IA, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MO, MS, NC, ND, NH, NJ, NY, OH, OK, PA, RI, SC, TN, TX, VA, VT, WI, WV) across the Midwest, Southeast and Northeast.", "Category 3 hurricane hits SW Florida resulting in strong damaging winds and major flooding across southeastern Florida. Prior to landfall, Wilma as a Category 5 recorded the lowest pressure (882 mb) ever recorded in the Atlantic basin.", "Severe freeze over central/northern Florida damages citrus crops.", "Three-day tornado outbreak strikes many Central and Eastern states including TX, LA, AL, MS, GA, AR, IN, OH, KY, TN, and NC. Major damage was reported across many areas, as more than 100 tornadoes were reported. This event remains one of the most prolific Fall season tornado outbreaks on record.", "Category 3 hurricane makes landfall in east-central Florida, causing considerable wind, storm surge, and flooding damage in FL, with some flood damage also in the states of GA, SC, NC, VA, MD, DE, NJ, PA, and NY. Puerto Rico also affected.", "Winter storm affecting the Central and Eastern states including IL, IN, OH, MI, WV, VA, MD, PA, NJ, NY, MA, CT, VT, NH and ME.", "Severe storms and flooding, especially in the states of TX, AR, LA, MS, AL, GA, and FL", "Series of tornadoes and severe thunderstorms across the Southeast and Midwest states (AL, AR, IN, KY, MS, OH, TN, TX) with 87 tornadoes confirmed.", "Category 2 hurricane makes landfall in east-central Florida, causing significant wind, storm surge, and flooding damage in FL, along with considerable flood damage in the states of GA, SC, NC, and NY due to 5-15 inch rains.", "Tornadoes and severe storms cause damage in states across the South, Southeast and Midwest. The states impacted include TX, OK, AR, CO, KS, NE, IA, SD, IL, IN, MN and MO.", "Severe storms and hail impact Colorado, South Dakota and Nebraska.", "Heavy, persistent rainfall across northern and central California created substantial property and infrastructure damage from flooding, landslides and erosion. Notable impacts include severe damage to the Oroville Dam spillway, which caused a multi-day evacuation of 188,000 residents downstream. Excessive rainfall also caused flood damage in the city of San Jose, as Coyote Creek overflowed its banks and inundated neighborhoods forcing 14,000 residents to evacuate.", "A slow-moving system caused tremendous rainfall and subsequent flooding to occur in Texas and Oklahoma. The Blanco river in Texas swelled from 5 feet to a crest of more than 40 feet over several hours causing considerable property damage and loss of life. The city of Houston also experienced flooding which resulted in hundreds of high-water rescues. The damage in Texas alone exceeded 1.0 (1.1) billion. There was also damage in other states (KS, CO, AR, OH, LA, GA, SC) from associated severe storms.", "Severe freeze damages citrus crops across central/northern Florida.", "Severe storms across the Plains states (IL, KS, MO, TX) causing considerable hail and wind damage in Texas.", "Very dry summer and high temperatures, mainly in eastern U.S., with extensive agricultural losses. The states impacted include AL, AR, FL, GA, KY, LA, MD, MS, NC, NJ, OH, SC, TN, VA, WV and PA.", "A period of heavy rainfall up to 15 inches over a multi-state region in the Midwest caused historic levels of flooding along many rivers. The flooding was most severe in Missouri, Arkansas and southern Illinois where levees were breached and towns were flooded. There was widespread damage to homes, businesses, infrastructure and agriculture. Severe storms also caused additional impacts during the flooding event across a number of central and southern states.", "Severe hail impacts the Fort Worth and Arlington metro region in Texas. Additional large hail and high wind damage occurred in other locations of Texas, Louisiana and Mississippi.", "Outbreak of tornadoes over central states (OK, TX, KS, NE, MO, IA, IL) with an estimated 81 tornadoes. Additional wind and hail damage across the Southeast (TN, GA, NC, SC).", "Category 3 hurricane strikes eastern North Carolina and Virginia, extensive agricultural damage due to winds and flooding, with 10-inch rains in 2 days in some locations.", "Torrential rains cause flooding along the Trinity, Red, and Arkansas Rivers in TX, OK, LA, and AR", "Severe flooding in southeast Texas from 2 heavy rain events, with 10-20 inch rainfall totals", "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "Remnants of slow-moving Alberto bring torrential 10-25 inch rains in 3 days, widespread flooding and agricultural damage in parts of Georgia, Alabama, and panhandle of Florida.", "Drought conditions across numerous western, central and southeastern states (AK, AZ, CA, NM, ID, UT, MT, NV, OR, WA, CO, TX, OK, NC, FL ) resulted in thousands of wildfires; national acreage burned exceeding 5.2 million acres (mainly in the west) and over 1,000 homes and structures destroyed in California fires alone.", "Dry weather, high winds and wildfires in Southern California", "Severe storms affect Arkansas, Oklahoma and Texas across the South.", "Severe storms across the Rockies, Midwest and Eastern states (CO, MT, IA, IL, IN, OH, SC, VA, PA, DE, NY) with the most costly damage in Colorado, Illinois and Pennsylvania.", "Persistent rainfall (nearly 300 percent normal precipitation amounts in the Ohio Valley) combined with melting snowpack caused historical flooding along the Mississippi River and its tributaries. Examples of economic damage include: 500 (570.0) million to agriculture in Arkansas; 320 (364.8) million in damage to Memphis, Tennessee; 800 (912.0) million to agriculture in Mississippi; 317 (361.4) million to agriculture and property in Missouri's Birds Point-New Madrid Spillway; 80 (91.2) million for the first 30 days of flood fighting efforts in Louisiana.", "Intense ice storm hits Maine, New Hampshire, Vermont, and New York, with extensive forestry losses", "Severe Storms hit Oklahoma and Texas with tornadoes and hail", "Severe hail and high wind damage impacting Nebraska, Illinois and Iowa. More than one dozen tornadoes touched down across parts of Iowa, in addition to other storm damage.", "Severe storms cause damage across the South, Southeast and Central regions. The states impacted include AR, IL, KY, IN, SC, GA and OH.", "Drought conditions were present across numerous Southwestern and Plains states (TX, OK, KS, MO, CO, NM, AZ, UT). The most extreme drought conditions continue to persist across the Four Corners region of the Southwest. The agriculture sector has been impacted across the affected states including damage to field crops from lack of rainfall. Ranchers have also be forced to sell-off livestock early in some regions due to high feeding costs.", "Historic levels of flooding impacted South Carolina causing widespread damage to many homes, businesses, public buildings and infrastructure. This interrupted commerce and closed major transportation corridors (such as I-95) for weeks as rivers slowly receded. Locally extreme rainfall totals exceeding 20-inches were common resulting from the convergence of a powerful low pressure system / frontal boundary and copious moisture from Hurricane Joaquin in the Atlantic.", "Severe weather and large hail causes considerable damage across Minnesota and Wisconsin.", "Severe storms and flooding, especially in the states of WA, OR, CA, AZ, NV, ID, UT, and MT", "Sustained period of severe thunderstorms and tornadoes affecting several states including Montana, Colorado, Kansas, Missouri and Texas. The most concentrated days for tornado development were on May 22 and 24. Additional damage was created by straight-line high wind and hail damage.", "Drought conditions over parts of the West, Central and eastern U.S. most affected the states IL, IN, KS, MN, OH, OR, PA, SD, and WA.", "Historic drought conditions affected the majority of California for all of 2014 making it the worst drought on record for the state. Surrounding states and parts of Texas, Oklahoma and Kansas also experienced continued severe drought conditions. This is a continuation of drought conditions that have persisted for several years.", "Heavy rainfall up to 15 inches affected south Florida surrounding Miami that resulted in severe flooding that damaged thousands of homes and businesses. There was also several hundred million in damage done to agriculture.", "Continued drought conditions and high winds over much of the western U.S. (AK, AZ, CA, ID, UT, MT, NV, OR, WA) resulting in numerous wildfires; with national acreage burned exceeding 8.9 million acres (mainly in the west) and over 3,000 homes and structures destroyed in southern California alone.", "Tornadoes and severe weather cause significant damage in the states of IA, IL, IN, and WI. The state of Indiana was most affected with over one billion dollars in damage.", "Large, category 2 hurricane makes landfall in eastern NC, causing 10-20 inch rains in 2 days, with severe flooding in NC and some flooding in SC, VA, MD, PA, NY, NJ, DE, RI, CT, MA, NH, and VT.", "Torrential rain (10-25 inches in 5 days) and thunderstorms cause flooding across much of southeast Texas", "Wildfires burned over 9.2 million acres across the U.S. in 2012. This is the 3rd highest annual total since the year 2000. The most damaging wildfires occurred in the western states (CO, ID, WY, MT, CA, NV, OR, WA). Colorado experienced the most costly wildfires (e.g., Waldo Canyon fire) where several hundred residences were destroyed.", "A historic firestorm damages or destroys over 15,000 homes, businesses and other structures across California in October. The combined destruction of the Tubbs, Atlas, Nuns and Redwood Valley wildfires represent the most costly wildfire event on record, also causing 44 deaths. Extreme wildfire conditions in early December also burned hundreds of homes in Los Angeles. Numerous other wildfires across many western and northwestern states burn over 9.8 million acres exceeding the 10-year annual average of 6.5 million acres. Montana in particular was affected by wildfires that burned in excess of 1 million acres. These wildfire conditions were enhanced by the preceding drought conditions in several states.", "Category 4 hurricane made landfall at Cudjoe Key, Florida after devastating the U.S. Virgin Islands - St John and St Thomas - as a category 5 storm. The Florida Keys were heavily impacted, as 25% of buildings were destroyed while 65% were significantly damaged. Severe wind and storm surge damage also occurred along the coasts of Florida and South Carolina. Jacksonville, FL and Charleston, SC received near-historic levels of storm surge causing significant coastal flooding. Irma maintained a maximum sustained wind of 185 mph for 37 hours, the longest in the satellite era. Irma also was a category 5 storm for longer than all other Atlantic hurricanes except Ivan in 2004.", "Tornado outbreak and wind damage across many Midwestern states (AR, IA, IL, KS, MI, MN, MO, NE, NY, OH, WI). Missouri and Illinois were impacted by numerous tornadoes while Michigan and New York were affected by destructive, straight-line winds following the storm system. Nearly one million customers lost power in Michigan alone due to sustained high winds, which affected several states from Illinois to New York.", "Category 1 hurricane makes landfall in Louisiana after causing damage across Saint Lucia, Jamaica, Haiti and Cuba.", "Severe hail, high winds and numerous tornadoes impact many states over several days including WY, TX, NE, KS, MO, IA, IL, PA, VA, NY.", "Outbreak of tornadoes over central and southern states (MO, TX, OK, KS, AR, GA, TN, VA, KY, IN, IL, OH, WI, MN, PA) with an estimated 180 tornadoes. Notably, an EF-5 tornado struck Joplin, MO resulting in at least 160 deaths, making it the deadliest single tornado to strike the U.S. since modern tornado record keeping began in 1950.", "Outbreak of tornadoes over central and southern states (OK, TX, AR, MS, AL, GA, NC, SC, VA, PA) with an estimated 177 tornadoes.", "Very damaging severe thunderstorms with large hail over wide areas of Minnesota", "Category 1 hurricane made landfall over Louisiana. Isaac's slow motion and large size led to a large storm surge and flooding rains. This created damage across several southeastern states (LA, MS, AL, FL) including 9 deaths (5 direct, 4 indirect).", "Sustained outbreak of thunderstorms / high winds from a strong derecho event over the central, eastern, and northeastern states (IL, IN, KY, OH, WV, SC, NC, VA, MD, DC, NJ).", "A potent severe storm system caused over 20 tornadoes across Alabama and also widespread hail damage from Texas to Florida. Most notably this system produced an EF-3 tornado that caused extensive damage in Jacksonville, Alabama and across the campus of Jacksonville State University.", "Heavy rain and flooding caused significant agricultural loss and property damage in IA, IL, IN, MO, MN, NE, and WI with IA being hardest hit with widespread rainfall totals ranging from 4 to over 16 inches.", "Outbreak of tornadoes over central and southern states (KS, MO, IA, IL, WI, KY, GA, TN, NC, SC) with an estimated 46 tornadoes.", "Outbreak of tornadoes over central and southern states (AL, AR, LA, MS, GA, TN, VA, KY, IL, MO, OH, TX, OK) with an estimated 343 tornadoes. The deadliest tornado of the outbreak, an EF-5, hit northern Alabama, killing 78 people. Several major metropolitan areas were directly impacted by strong tornadoes including Tuscaloosa, Birmingham, and Huntsville in Alabama and Chattanooga, Tennessee, causing the estimated damage costs to soar.", "Severe hail and high winds cause considerable damage across Minnesota and Wisconsin. The Minneapolis metro area in particular was damaged from large, destructive hail impacting many buildings and vehicles. This damage is comparable to the May 15, 1998 Minnesota hail storm that was also very costly.", "An outbreak of tornadoes and thunderstorms over the Midwest/Mid-Atlantic states (IA, IL, IN, KS, NE, MI, MN, MO, OK, WI, MD, VA, WV).", "Moderate to extreme drought over large portions of 30 states, including the western states, the Great Plains, and much of the eastern U.S.", "Severe storms over the southern plains, midwest and northeast (TX, OK, KS, MN, PA, NY) with 27 confirmed tornadoes. Significant damage also from severe hail and straight-line winds.", "Category 2 hurricane makes landfall in Louisiana causing significant wind, storm surge, and flooding damage in AL, AR, LA, and MS.", "Severe storms and flooding affect the states IA, IL, MD, NY, PA, WI across the Midwest and Northeast.", "Torrential rainfall caused destructive flooding through many West Virginia towns, damaging thousands of homes and businesses and causing considerable loss of life. Over 1,500 roads and bridges were damaged or destroyed making the impact on infrastructure comparable to the historic 2013 Colorado flood. The storm system also produced numerous tornadoes causing damage across several Ohio Valley states.", "California's 5-year drought persisted during 2016 while new areas of extreme drought developed in states across the Northeast and Southeast. The long-term impacts of the drought in California have damaged forests where 100+ million trees have perished and are a public safety hazard. The agricultural impacts were reduced in California as water prices and crop fallowing declined. However, agricultural impacts developed in Northeast and Southeast due to stressed water supplies.", "Category 3 hurricane makes landfall in western Florida panhandle resulting in storm surge and wind damage along the FL and AL coasts, along with scattered wind and flood damage in GA and MS.", "Severe storms cause damage across the Midwest and South. The states most impacted include TX, OK, KS, AL and LA.", "Category 2 hurricane brushes the Outer Banks of North Carolina before making landfall in Rhode Island. Its impacts were felt from North Carolina to Long Island and into New England.", "Early outbreak of tornadoes and severe weather across many southern and eastern states including (AL, CT, FL, GA, LA, MA, MD, MS, NC, NJ, NY, PA, SC, TX, VA). There were at least 50 confirmed tornadoes causing widespread damage.", "Category 4 hurricane causes severe damage to the Hawaiian island of Kauai. Hurricane Iniki is the costliest and deadliest hurricane to affect Hawaii since 1900.", "Category 4 hurricane made landfall in southeast Puerto Rico after striking the U.S. Virgin Island of St. Croix. Maria's high winds caused widespread devastation to Puerto Rico's transportation, agriculture, communication and energy infrastructure. Extreme rainfall up to 37 inches caused widespread flooding and mudslides across the island. The interruption to commerce and standard living conditions will be sustained for a long period, as much of Puerto Rico's infrastructure is rebuilt. Maria tied Hurricane Wilma (2005) for the most rapid intensification, strengthening from tropical depression to a category 5 storm in 54 hours. Maria's landfall at Category 4 strength gives the U.S. a record three Category 4+ landfalls this year (Maria, Harvey, and Irma). Maria was one of the deadliest storms to impact the U.S., with numerous indirect deaths in the wake of the storm's devastation.", "A large winter storm impacted many central, eastern and northeastern states. The city of Chicago was brought to a virtual standstill as between 1 and 2 feet of snow fell over the area.", "An unusual series of severe thunderstorms across Arizona produced numerous tornadoes and widespread, severe hail damage. Over one-hundred buildings were damaged or destroyed by tornadoes while thousands of automobiles and buildings were damaged by large hail across Phoenix and surrounding cities.", "Extreme drought causes extensive impacts to agriculture in North Dakota, South Dakota and Montana. Field crops including wheat were severely damaged and the lack of feed for cattle forced ranchers to sell off livestock. This drought has also contributed to the increased potential for severe wildfires.", "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "Complex of severe thunderstorms and high winds across the region (TN, KY, OK, OH, VA, WV, PA).", "High wind damage occurred across southern California near San Diego followed by 79 confirmed tornadoes during an outbreak across many southern states including AL, FL, GA, LA, MS, SC and TX. This was the 3rd most tornadoes to occur in a single outbreak during a winter month (Dec.-Feb.) for records going back to 1950.", "Tornadoes and severe weather across Georgia and South Carolina. This includes an EF-2 tornado causing damage to numerous buildings in downtown Atlanta.", "Frequent winter storms cause 20-70 inch rainfall and periodic flooding across much of California", "Severe drought and heat wave from Texas/Oklahoma eastward to the Carolinas. The states impacted include AL, AR, FL, GA, LA, MS, NC, OK, SC, TN, TX, and VA.", "Wind and flood damage across the southeast (LA, MS, AL, GA, TN) but considerably more damage from record flooding across the northeast (PA, NY, NJ, CT, VA, MD). Pennsylvania and New York were most affected.", "\"Severe weather and numerous tornadoes affecting the states of OK, KS, MO, NE, KY, OH, TN, IN, MS, GA, and AL on April 6-8 with 3 \"\"killer\"\" tornadoes in TN.\"", "Intense ice storm with extensive damage in portions of TX, OK, AR, LA, MS, AL, TN, GA, SC, NC, and VA.", "Severe weather across the Midwest and Plains states (IN, KS, MO, NE) with a total of 26 confirmed tornadoes. Considerable damage resulting from hail and straight-line wind.", "Rather severe drought affected crops especially during the spring-summer, centered over the Great Plains region with other areas affected across portions of the south -- including states of ND, SD, NE, KS, OK, TX, MN, IA, MO, AR, LA, MS, AL, GA, FL, MT, WY, CO, NM.", "1988 drought across a large portion of the U.S. with very severe losses to agriculture and related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 5,000.", "Large hail and strong winds caused considerable damage in heavily populated areas of north Texas. This damage was most notable in the cities of Dallas, Fort Worth and Plano.", "Hurricane Erin impacted Florida as a category 1 hurricane. Most of the damage resulted from heavy rainfall and flooding in Florida, Alabama and Mississippi.", "Severe weather impacts the states IA, KS, MO, NE, SD across the Midwest and Southeast.", "A period of extreme rainfall up to 17 inches created widespread urban flooding in Houston and surrounding suburbs. Thousands of homes and businesses were damaged and more than 1,800 high water rescues were conducted. This represents the most widespread flooding event to affect Houston since Tropical Storm Allison in 2001.", "Severe storms and flooding affect several states (AR, LA, MS) across the South.", "Hurricane Matthew paralleled the Southeast coast from Florida to North Carolina causing widespread damage from wind, storm surge and inland flooding. The most costly impacts were due to historic levels of river flooding in eastern North Carolina where 100,000 homes, businesses and other structures were damaged. This inland flooding was comparable to Hurricane Floyd (1999) that also impacted eastern North Carolina. Matthew narrowly missed landall on Florida's east coast as a powerful category 4 storm.", "Severe storms across the Midwest and Ohio Valley including the states (AR, IA, IL, IN, KS, KY, MI, MO, NC, OH, OK, PA, TN, TX, WI, WV). Large hail and high winds created the most damage across Missouri and Illinois.", "Severe storms cause high wind and hail damage across numerous states including OH, IL, IN, MI, MN and WI.", "Tornadoes and severe weather affect the states (AL, AR, CO, IA, IL, IN, KS, KY, LA, MI, MN, MO, MS, NE, OH, OK, PA, TN, TX, WI, WV) across the Midwest, Plains and Southeast.", "Category 3 hurricane strikes Florida panhandle, Alabama, western Georgia, eastern Tennessee, and the western Carolinas, causing storm surge, wind, and flooding damage.", "Severe storms across the Rockies and Plains states (CO, KS, TX). Large hail and high winds created significant damage across eastern Colorado and Texas, particularly in the Dallas metro area.", "Category 2 hurricane makes landfall in Texas, as the largest (in size) Atlantic hurricane on record, causing considerable storm surge in coastal TX and significant wind and flooding damage in TX, LA, AR, TN, IL, IN, KY, MO, OH, MI and PA. Severe gasoline shortages occurred in the southeast U.S. due to damaged oil platforms, storage tanks, pipelines and off-line refineries.", "Powerful Nor'easter impacted many Northeastern states including MD, MA, NH, NJ, NY, PA, CT, DE, RA and VA. Widespread damage resulted from the combination of high winds, heavy snow and heavy coastal erosion.", "Multiple days of heavy rainfall averaging 15 to 20 inches led to widespread flooding along the Sabine River basin on the Texas and Louisiana border. This prompted numerous evacuations, high-water rescues and destruction, as more than 1,000 homes and businesses were damaged or destroyed.", "A severe freeze damaged fruit and vegetable crops in the Central and Southern San Joaquin Valley. Extended intervals of sub 27\u00b0 F temperatures occurred over an 8-day period.", "Severe hail impacts Colorado. Jefferson County was most affected with hail at least 8 inches deep. The hail damage from this storm was comparable to the July 11, 1990 Colorado hail storm.", "Severe storms and large hail over the southern plains and lower MS valley, with Texas hardest hit, and much of the monetary losses due to hail.", "Torrential rains, hail, and tornadoes across Texas-Oklahoma and southeast Louisiana-southern Mississippi, with Dallas and New Orleans areas (10-25 inch rains in 5 days) hardest hit.", "Tornadoes and flooding cause damage across the West and Southeast. The states impacted include CA, TX, FL, AL, GA, LA, MS, NC and SC.", "Category 3 hurricane makes landfall near Galveston, Texas with maximum sustained winds 115 mph. Hurricane Alicia was the first hurricane to hit the United States mainland since Hurricane Allen in August 1980.", "Winter storm and deep cold impacts the Northeast, South and Southeast. The states impacted include AL, AR, CT, FL, GA, IL, IN, KY, LA, ME, MO, MS, NC, NH, NY, OH, OK, PA, SC, TN, TX, VA, VT and WV.", "Large hail and high winds in Texas north of the Dallas metro region caused widespread damage to structures and vehicles. Severe storms also caused damage across several other states (OK, TN, KY, MS, AL) due to the combination of high winds, hail and tornadoes.", "Dozens of tornadoes and severe storms affect the states AR, IL, IN, KY, MO, OH, TN, TX across the Ohio Valley and South.", "Severe, widespread flooding in central U.S. due to persistent heavy rains and thunderstorms. There was extensive damage to agriculture, infrastructure, homes and businesses in many areas across several states. Many river stations also established new records for historical flood heights. This is the most costly non-tropical, inland flood event to affect the United States on record.", "An outbreak of tornadoes, hail, and high wind caused damage east of the Rockies and across the central plains (CO, WY, IA, IL, MI, MN, OH).", "A powerful storm system packing unseasonably strong tornadoes caused widespread destruction in the Dallas metropolitan region, damaging well over 1,000 homes and businesses. This same potent system also produced intense rainfall over several Midwestern states triggering historic flooding that has approached or broken records at river gauges in several states (MO, IL, AR, TN, MS, LA). The flooding has overtopped levees and caused damage in numerous areas. This historic storm also produced high wind, snow and ice impacts from New Mexico through the Midwest and into New England. Overall, the storm caused at least 50 deaths from the combined impact of tornadoes, flooding and winter weather.", "A stalled frontal boundary over Colorado led to record rainfall, as some areas received > 15 inches over several days. This resulted in historic flooding across numerous cities and towns. Destruction of residences, businesses and transportation infrastructure was widespread.", "Tornado outbreak across the Southern Plain states (IA, KS, NE, OK, CO, SD, TX) with 122 tornadoes. The most costly damage occurred across Texas and Oklahoma.", "Heavy rainfall over portions of the Northeast in late March caused extensive flooding across several states (RI, CT, MA, NJ, NY, PA). The event caused the worst flooding in Rhode Island's history.", "Severe summer drought over much of the northern plains with significant losses to agriculture. The states impacted include CO, IA, IL, KS, MO, ND, NE, NV, SD, TX and UT.", "Severe storms affect the states IA, IL, IN, MI, MN, OH, VA, WV across the Midwest and Plains.", "Torrential rains (10-40 inches in 2 weeks) and snowmelt produce severe flooding over portions of CA, WA, OR, ID, NV, and MT.", "Drought conditions were present across numerous western states (CA, NV, OR, WA, ID, MT, UT, AZ) with the most severe conditions continuing to plague California for all of 2015. The agriculture sector was again impacted by a lack of rainfall resulting in hundreds of thousands of acres of farmland remaining fallow and requiring excess groundwater pumping to irrigate existing agriculture interests. Wildfire conditions were further enhanced by the ongoing drought. California experienced extensive damage from both drought and wildfire impacts. Drought conditions did improve dramatically across Texas and Oklahoma, in the form of several major flood events.", "Severe storms including tornadoes and hail cause damage across the Midwest, South, Southeast and Northeast regions. The states impacted include IA, IL, IN, KY, MI, MO, NC, NE, NY, OK, OH and WI.", "Severe drought and heat caused agricultural losses across a large portion of the U.S. Record low lake levels also occurred in areas of the southeast. The states impacted include AL, AR, CA, CO, GA, ID, IN, KS, KY, MD, MN, MS, MT, NC, ND, NJ, NM, OH, OK, OR, SC, TN, TX, UT, VA, WA and WI.", "Severe flooding in North Dakota, South Dakota and Minnesota due to heavy spring snow melt. This flooding caused widespread damage to agriculture, infrastructure, homes and businesses.", "\"The \"\"Storm of the Century\"\" impacts the entire Eastern seaboard from Florida to Maine. This historic storm dumped 2-4 feet of snow and caused hurricane force winds across many Eastern and Northeastern states. This caused power outages to over 10 million households. Additional impacts included numerous tornadoes across Florida causing substantial damage. This is the most destructive and costly winter storm to affect the United States since at least 1980.\"", "Category 3 hurricane initially impacts the U.S. as a Category 1 near Miami, FL, then as a strong Category 3 along the eastern LA-western MS coastlines, resulting in severe storm surge damage (maximum surge probably exceeded 30 feet) along the LA-MS-AL coasts, wind damage, and the failure of parts of the levee system in New Orleans. Inland effects included high winds and some flooding in the states of AL, MS, FL, TN, KY, IN, OH, and GA.", "Sustained outbreak of thunderstorms and high winds from a strong derecho event over the central, southern, and eastern states (TX, OK, MO, NE, KS, AR, AL, MS, TN, NC, SC, KY, PA).", "Numerous tornadoes and widespread hail damage over the Central and Eastern states including NC, GA, VA, TX, AR, MO, MS, TN, IL, IN, KY, PA, MD, NY, OH, WV, and KS.", "Category 3 hurricane strikes North Carolina and Virginia, over 10-inch 24-hour rains in some locations and extensive agricultural and other losses.", "States in the Southeast and Northeast regions are impacted by tornadoes, severe storms, and flooding. The states impacted include GA, FL, SC, NC, VA, MD, DE, NJ, NY, PA, CT, MA and RI.", "A historic flood devastated a large area of southern Louisiana resulting from 20 to 30 inches of rainfall over several days. Watson, Louisiana received an astounding 31.39 inches of rain from the storm. Two-day rainfall totals in the hardest hit areas have a 0.2% chance of occurring in any given year: a 1 in 500 year event. More than 30,000 people were rescued from the floodwaters that damaged or destroyed over 50,000 homes, 100,000 vehicles and 20,000 businesses. This is the most damaging U.S. flood event since Superstorm Sandy impacted the Northeast in 2012.", "Drought conditions occurred during much of the year across parts of the Southwest, Great Plains, and southern Texas causing agricultural losses in numerous states (TX, OK, KS, CA, NM, AZ). The largest agriculture losses occurred in TX and CA.", "Severe freeze in the Central and Southern San Joaquin Valley caused the loss of citrus, avocado trees, and other crops in many areas. Several days of subfreezing temperatures occurred, with some valley locations in the teens.", "Western/Central/Southeast Drought/Heatwave. The states impacted include AZ, AL, AR, CA, CO, FL, GA, IA, KS, LA, MS, MT, NE, NM, OK, OR, SC, TN, and TX.", "Extreme cold and winter storms in the Southeast, South, Southwest, Northeast, Midwest, and North", "Large outbreak of tornadoes affects numerous states across the South and Southeast. Additional damage also from large hail and straight-line wind during the multi-day thunderstorm event.", "Outbreak of tornadoes over the Midwest/Ohio Valley regions (IL, IN, IA, KS, MN, NE, OK, WY, CO) with 235 tornadoes confirmed.", "Widespread severe hail damage across north and central Texas including the cities of Plano, Wylie, Frisco, Allen and San Antonio. The damage in San Antonio was particularly severe as the National Weather Service verified reports of hail size reaching 4.5 inches in diameter. This ranks as one of the most costly hail events to affect the United States.", "Category 3 hurricane makes landfall on Gulf coast of Alabama, with significant wind, storm surge, and flooding damage in coastal AL and FL panhandle, along with wind/flood damage in the states of GA, MS, LA, SC, NC, VA, WV, MD, TN, KY, OH, DE, NJ, PA, and NY.", "Category 2 hurricane makes landfall in eastern North Carolina, causing considerable storm surge damage along the coasts of NC, VA, and MD, with wind damage and some flooding due to 4-12 inch rains in NC, VA, MD, DE, WV, NJ, NY, and PA.", "Outbreak of F4-F5 tornadoes hit the states of Oklahoma and Kansas, along with Texas and Tennessee, Oklahoma City area hardest hit.", "Western and Southern states experienced an active wildfire season with over 5.0 million acres burned nationally. Most notable was the firestorm that impacted Gatlinburg, Tennessee with hurricane-force wind gusts in extremely dry conditions creating volatile wildfire behavior. These wildfires destroyed nearly 2,500 structures and caused 14 fatalities. The drought conditions in many areas of the Southeast and California worsened the wildfire potential.", "Severe drought with periods of extreme heat over most of the southeast and portions of the Great Plains, Ohio Valley, and Great Lakes area, resulting in major reductions in crop yields, along with very low stream-flows and lake levels. Includes states of ND, SD, NE, KS, OK, TX, MN, WI, IA, MO, AR, LA, MS, AL, GA, NC, SC, FL, TN, VA, WV, KY, IN, IL, OH, MI, PA, NY.", "Rather severe localized drought causes significant crop losses (especially for corn and soybeans) in the states of AR, IL, IN, MO, OH, and WI.", "Severe storms in late May through early June hit the Midwest, North, Northeast, and Southeast", "Tornado outbreak across the Midwest, Southeast and Northeast states (AL, AR, DE, FL, GA, KS, MD, MO, MS, NC, NJ, NY, PA, TN, VA) with 83 confirmed tornadoes. Mississippi had its 3rd greatest number of tornadoes reported for any day since 1950. Torrential rainfall in the Florida panhandle also caused major flooding, as Pensacola set new 1-day and 2-day precipitation records of 15.55 and 20.47 inches, respectively. Flooding rains were also reported in coastal Alabama, as Mobile received 11.24 inches of rain, the third greatest calendar day rainfall total for the city.", "Tropical Storm Frances caused extensive flooding in Texas and Louisiana. The rainfall totals from Frances were 10 to 20 inches across eastern Texas into southern Louisiana.", "Denver, CO (including airport) hit by severe hail storm. This was the costliest hail storm on record for Colorado when it occurred.", "Category 1 hurricane makes landfall near Morgan City, Louisiana. Hurricane Juan's slow movement causes severe flooding in Louisiana, Mississippi, Alabama and Florida. Southern Louisiana was most severely affected due to widespread rainfall of 10-15 inches that caused substantial flooding.", "A slow-moving storm system created rainfall totals of 5 to 10 inches across northern and central Illinois including the Chicago metro. This resulted in damage to many homes and businesses. There was also severe weather damage from wind and hail across Indiana and Missouri.", "Dry weather, high winds, and resulting wildfires in Southern California burned over 3,700 homes. Nearly 4.0 million acres burned across numerous western states including Alaska.", "Severe storms hit the Midwest, Southeast, Northeast. The states impacted include KS, IL, MI, IN, MS, TN, KY, OH, AL, PA, NY, GA, SC and NC.", "Numerous wildfires driven by dry weather and high winds burned over 9.8 million acres, across the western half of the country including Alaska. This is the second highest annual total behind the 10.1 million acres burned in 2015 since record-keeping began in 1960. The most affected states were AK, AZ, CA, CO, FL, ID, MT, NM, NV, OK, OR, TX, WA, WY", "Widespread severe freeze over much of the east and midwest (AL, AR, GA, IA, IL, IN, KS, KY, MO, MS, NC, NE, OH, OK, SC, TN, VA, WV), causing significant losses in fruit crops, field crops (especially wheat), and the ornamental industry. Temperatures in the teens/20s accompanied by rather high winds nullified typical crop-protection systems.", "Severe storms cause widespread hail damage across numerous states including TX, AL, MS, GA, FL, NC and VA.", "Outbreak of tornadoes over central and southern states (NE, KS, OK, IA, TX, LA, MS, AL, GA, TN, KY) with 56 tornadoes confirmed.", "Very heavy snowstorm (1-4 feet) over Appalachians, Mid-Atlantic, and Northeast; followed by severe flooding in parts of same area due to rain and snowmelt.", "Severe storms cause damage in states across the South and Southeast. The states impacted include OK, TX, LA, MS, GA, SC, NC and VA.", "Severe weather over the midwest and Ohio Valley (TX, OK, KS, MO, IL, IN, KY) with 38 confirmed tornadoes. Considerable damage resulting from hail.", "Severe storms across the South and Southeastern states (AL, AR, FL, GA, KS, LA, MS, NC, OK, SC, TN, TX). High winds and severe hail created the most significant damage in Texas.", "The 2013 drought slowly dissipated from the historic levels of the 2012 drought, as conditions improved across many Midwestern and Plains states. However, moderate to extreme drought did remain or expand into western states (AZ, CA, CO, IA, ID, IL, KS, MI, MN, MO, ND, NE, NM, NV, OK, OR, SD, TX, UT, WA, WI, WY). In comparison to 2011 and 2012 drought conditions the US experienced only moderate crop losses across the central agriculture states.", "Hail storm and wind damage impacting several states including CO, OK, TX, NM, MO. The most costly impacts were in the Denver metro region where baseball-sized hail caused the most expensive hail storm in Colorado history, with insured losses exceeding 2.2 (2.3) billion.", "Numerous tornadoes over the midwest, Mississippi valley, OH/TN valleys, and portions of the southeast, with a modern record one-week total of approximately 400 tornadoes reported", "Severe wildfire season in the western states due to dry weather conditions. The states most impacted include CA, AZ, OR, WA, CO, UT, NV, NM and TX.", "Continued drought conditions and periods of extreme heat provided conditions favorable for a series of historic wildfires across Texas, New Mexico and Arizona. The Bastrop Fire in Texas was the most destructive fire in Texas history destroying over 1,500 homes. The Wallow Fire consumed over 500,000 acres in Arizona making it the largest on record in Arizona. The Las Conchas Fire in New Mexico was also the state's largest wildfire on record scorching over 150,000 acres while threatening the Los Alamos National Laboratory. Over 3 million acres have burned across Texas this wildfire season.", "Tornadoes and severe storms cause widespread damage across the Plains and Central states (NE, MO, TX, OK, KS, CO, IL, KY, TN) over a multi-day period. The damage from tornadoes and high wind was most costly in Nebraska and Missouri.", "Severe storms and damaging hail over several states (CO, NM, TX) with 25 confirmed tornadoes. Colorado experienced over 1.0 (1.1) billion in damage due to hail.", "Central and eastern U.S. drought/heat wave caused damage to agriculture and other related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 10,000.", "The 2012 drought is the most extensive drought to affect the U.S. since the 1930s. Moderate to extreme drought conditions affected more than half the country for a majority of 2012. The following states were affected: CA, NV, ID, MT, WY, UT, CO, AZ, NM, TX, ND, SD, NE, KS, OK, AR, MO, IA, MN, IL, IN, GA. Costly drought impacts occurred across the central agriculture states resulting in widespread harvest failure for corn, sorghum and soybean crops, among others. The associated summer heatwave also caused 123 direct deaths, but an estimate of the excess mortality due to heat stress is still unknown.", "Category 4 hurricane makes landfall in southwest Florida, resulting in major wind and some storm surge damage in FL, along with some damage in the states of SC and NC.", "Wildfires burned over 10.1 million acres across the U.S. in 2015, surpassing 2006 for the highest annual total of U.S. acreage burned since record-keeping began in 1960. The most costly wildfires occurred in California where over 2,500 structures were destroyed due to the Valley and Butte wildfires with the insured losses alone exceeding 1.0 (1.1) billion. The most extensive wildfires occurred in Alaska where over 5 million acres burned within the state. There was extensive burnt acreage across other western states, most notably (OR, WA, ID, MT, ND, CO, WY, TX).", "Tornadoes and severe storms with large hail cause widespread damage across many Southern and Eastern states (AR, FL, GA, LA, MD, MI, MS, MO, NJ, NY, NC, PA, SC, TX, VA) over a multi-day period. There were over 70 confirmed tornadoes largely clustered in Louisiana, Mississippi, North Carolina and Virginia. This same system also caused winter storm impacts of high wind and ice accumulation in northeastern states.", "Severe storms impact states across the South, Southeast, Midwest and Northeast regions. The states most impacted include AR, AL, MS, GA, FL, SC, TN, KY, MI, NY, OH, PA and VT.", "Drought and heat wave across Southeastern U.S. The states most impacted include AL, FL, GA, MD, NC, SC, TN, and VA.", "Major wildfires over 11 western states from the Rockies to the west coast due to drought and periodic high winds, with over 7.1 million acres burned.", "Category 5 hurricane hits Florida and later impacts Louisiana as a category 3. High winds damage or destroy over 125,000 homes and leave at least 160,000 people homeless in Dade County, Florida alone. Initially rated as a category 4, Andrew was later upgraded to a category 5 upon further analysis. Andrew joins Hurricane Camille (1969) and the Labor Day Hurricane (1935), as the only land falling category 5 hurricanes on record to affect the U.S. mainland. Adjusted to present-day dollars, Andrew is the 6th most costly hurricane to impact the U.S. since 1980, after Katrina (2005), Harvey (2017), Maria (2017), Sandy (2012) and Irma (2017).", "Severe hail storms cause golf ball to baseball-sized hail and widespread damage in many areas from northern Denver to Boulder and Fort Collins. Many homes, businesses and vehicles were impacted..", "The persistent remnants of Tropical Storm Allison produce rainfall amounts of 30-40 inches in portions of coastal Texas and Louisiana, causing severe flooding especially in the Houston area, then moves slowly northeastward; fatalities and significant damage reported in TX, LA, MS, FL, VA, and PA", "An outbreak of tornadoes, hail, and severe thunderstorms occurred across Oklahoma, Kansas, and Texas in mid-May. Oklahoma was hardest hit with > 1.5 (1.7) billion in damages.", "Flooding, hail, tornadoes, and severe thunderstorms occurred across many Southern states (TN, AR, AL, KY, MS, GA) on April 30-May 2. Flooding in the Nashville, TN area alone contributed > 1.0 (1.2) billion in damages. Western and Middle Tennessee were hardest hit with local rainfall amounts of 18-20 inches to the south and west of Greater Nashville.", "Outbreak of tornadoes over portions of the midwest and south during a week-long period-affecting the states of AL, AR, KY, MS, TN, TX, IN, KS, MO, and OK.", "Severe storm damage across many Central states including TX, KS, CO, OK, MO, IL, IN, IA and OH. This was followed by a derecho event across the Northeastern states of MD, NJ, NY, PA, VA, WV, MA and CT that caused widespread high wind damage. Also, there were one dozen tornadoes reported across PA, NY and CT causing further damage.", "Category 2 hurricane makes several landfalls along the eastern seaboard, affecting states from North Carolina to Maine.", "Category 3 hurricane approaches the Florida Panhandle prior to landfall near Biloxi, Mississippi. Considerable wind and rain impacts were felt from Florida to Louisiana.", "Severe storms across the Rockies and Central Plains states (NE, KS, WY, IA, AR). Wind gusts exceeding 90 mph and baseball to softball sized hail caused severe damage to structures and vehicles in central and eastern Nebraska.", "Severe flooding over portions of the northeast due to several weeks of heavy rainfall, affecting the states of NY, PA, DE, MD, NJ, and VA.", "Severe storms with hail hit Kansas and Oklahoma", "Slow-moving winter storm batters northeast U.S. coast, with the New England region hardest hit. The states impacted include VA, MD, DE, PA, NJ, NY, CT, RI, MA and WV.", "Severe freeze heavily damaged fruit crops across Florida. Over 25,000 Florida farms were impacted and sustained losses.", "\"Flooding, hail, tornadoes, and severe thunderstorms across numerous states (CT, DE, GA, LA, ME, MD, MA, MS, NH, NJ, NY, NC, PA, RI, SC, TX, VT, VA) in mid-April, including 3 \"\"killer\"\" tornadoes.\"", "Storms, tornadoes, and hail in the states of TX, OK, KS, NE, IA, MO, IL, IN, WI, MI, OH, KY, WV, and PA, over a 6-day period.", "Severe storms affect the South, Southeast. The states most impacted include Texas, Louisiana and Florida.", "Late-season outbreak of tornadoes and severe weather over the Ohio Valley (IL, IN, KY, MI, MO, OH) with 70 confirmed tornadoes. Most severe impacts occurred across Illinois and Indiana.", "Outbreak of tornadoes and severe weather over the Midwest, Plains and Eastern states (GA, IA, IL, KS, MO, NY, OK, TX) with 59 confirmed tornadoes including the deadly tornado that impacted Moore, OK. Many destructive tornadoes remained on the ground for an extended time.", "Melting of an above-average snow pack across the Northern Rocky Mountains combined with above-average precipitation caused the Missouri and Souris Rivers to swell beyond their banks across the Upper Midwest (MT, ND, SD, NE, IA, KS, MO). An estimated 11,000 people were forced to evacuate Minot, North Dakota due to the record high water level of the Souris River, where 4,000 homes were flooded. Numerous levees were breached along the Missouri River, flooding thousands of acres of farmland.", "Category 4 hurricane devastates South and North Carolina with ~20 foot storm surge and severe wind damage after hitting Puerto Rico and the U.S. Virgin Islands", "Severe storms and flooding affect the states CA, CO, NV, OR, WY across the West.", "Heavy rainfall in excess of 5 inches caused significant flooding in cities across Michigan damaging thousands of cars, business, homes and other infrastructure. Flooding also occurred across Maryland and New York's Long Island, as the slow-moving storm system delivered 24-hour rainfall exceeding 6 and 12 inches, respectively, creating more flood damage. Islip, NY received 13.57 inches of rain over a 24-hour period on Aug 12-13 setting a new 24-hour precipitation record for New York.", "Over 70 tornadoes developed during a widespread outbreak across many central and southern states causing significant damage. There was also widespread straight-line wind and hail damage. This was the second largest tornado outbreak to occur early in 2017.", "\"Residual and sustained drought conditions across western and south-central states resulted in thousands of wildfires. Most affected states include CA, AZ, NM, TX, OK, and UT. National acreage burned exceeding 5.9 million. Over 200 homes and structures destroyed in the California \"\"Station\"\" fire alone.\"", "Very heavy, persistent rains (10-30 inches) and melting snow over OR, WA, ID, and western MT.", "Category 4 hurricane made landfall near Rockport, Texas causing widespread damage. Harvey's devastation was most pronounced due to the large region of extreme rainfall producing historic flooding across Houston and surrounding areas. More than 30 inches of rainfall fell on 6.9 million people, while 1.25 million experienced over 45 inches and 11,000 had over 50 inches, based on 7-day rainfall totals ending August 31. This historic U.S. rainfall caused massive flooding that displaced over 30,000 people and damaged or destroyed over 200,000 homes and businesses.", "Outbreak of tornadoes and severe weather over the southeast and Ohio Valley (AL, GA, IN, OH, KY, TN) with 75 confirmed tornadoes.", "1983 flash drought in the southeastern U.S. with losses to agriculture, most notably corn and soybeans. The states impacted include AL, AR, GA, KY, LA, MO, MS, NC, SC, TN and VA.", "\"Hurricane Florence was a large and very slow moving hurricane that produced extreme rainfall across eastern North Carolina (up to 35.93\"\") and South Carolina (up to 23.81\"\")", "Outbreak of tornadoes, hail and severe thunderstorms over the south and southeastern states (AL, AR, GA, KY, MO, SC, TN) with 85 confirmed tornadoes.", "Numerous central states (KS, NE, OK, TX, NM, MO, IA, IL, IN, OH, WI) were impacted by large hail and tornadoes. Several northeastern states including NY, PA and VT were also impacted by high wind damage from severe storms.", "Outbreak of tornadoes and severe weather over the Midwest, Plains and Northeast (IL, IN, KS, MO, NY, OK, TX) with 92 confirmed tornadoes including the deadly tornado that struck El Reno, OK. There was also significant damage resulting from hail and straight-line wind.", "Severe wildfire season in the western states due to drought and frequent winds, with nearly 7 million acres burned.", "Severe freeze heavily damaged fruit crops across several southeastern states (SC, GA, NC, TN, AL, MS, FL, KY, VA). Mid-March freezes are not climatologically unusual in the Southeast, however many crops were blooming 3+ weeks early due to unusually warm temperatures during the preceding weeks. Damage was most severe in Georgia and South Carolina. Crops most impacted include peaches, blueberries, strawberries and apples, among others.", "Extensive damage across several northeastern states (MD, DE, NJ, NY, CT, MA, RI) due to high wind and coastal storm surge, particularly NY and NJ. Damage from wind, rain and heavy snow also extended more broadly to other states (NC, VA, WV, OH, PA, NH), as Sandy merged with a developing Nor'easter. Sandy's impact on major population centers caused widespread interruption to critical water / electrical services and also caused 159 deaths (72 direct, 87 indirect). Sandy also caused the New York Stock Exchange to close for two consecutive business days, which last happened in 1888 due to a major winter storm.", "Outbreak of tornadoes across the greater Dallas-Ft. Worth metropolitan area. Several moderate strength tornadoes (EF-2 and EF-3) affected towns in this area with a total of 22 confirmed tornadoes.", "2003 drought across western and central portions of the U.S. with losses to agriculture. The states impacted include AZ, CO, IA, ID, IL, KS, MI, MN, MO, MT, ND, NE, NM, OR, SD, WA and WI.", "Oakland, California firestorm due to low humidity and high winds burned over 3,000 homes. This is the costliest urban wildfire to affect the United States since 1980.", "Widespread agricultural freeze -- for nearly two weeks in January, overnight temperatures over a good portion of California dipped into the 20s, destroying numerous agricultural crops; with citrus, berry, and vegetable crops most affected.", "Outbreak of tornadoes over central and southern states (NC, SC, TN, AL, TX, OK, KS, IA, WI) with an estimated 59 tornadoes.", "A Nor'easter caused damage across many Northeastern states including MA, NJ, NY, CT, ME, NH, PA, MD, RI, SC, TN, VA, NC and GA.", "Severe storms across numerous Central and Northeast states (CO, CT, IA, IL, MD, MI, NJ, NY, PA, SD, VA, WI) with widespread hail and high wind damage.", "Category 3 hurricane hits Texas-Louisiana border coastal region, creating significant storm surge and wind damage along the coast, and some inland flooding in the FL panhandle, AL, MS, LA, AR, and TX. Prior to landfall, Rita reached the third lowest pressure (897 mb) ever recorded in the Atlantic basin.", "Category 2 hurricane strikes Puerto Rico, Virgin Islands, Florida Keys, and Gulf coasts of Louisiana, Mississippi, Alabama, and Florida panhandle, 15-30 inch 2-day rain totals in parts of Alabama and Florida", "Severe summer drought in parts of the southeastern U.S. with severe losses to agriculture. The states impacted include AL, AR, GA, LA, MS, NC, SC, TN and VA.", "A large winter storm and associated cold wave impacted many central, eastern and northeastern states (CT, DE, GA, IL, KY, MA, MD, ME, MI, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA). The city of Boston was particularly impacted as feet of snow continued to accumulate causing load-stress on buildings and clogging transportation corridors. Total, direct losses in Massachusetts alone exceed 1.0 (1.1) billion for this event, with considerable damage in many other states.", "Severe storms cause high wind and hail damage across numerous states including CO, NM, KS, OK, IL, IN, GA, SC and NC.", "Severe drought in agricultural regions of southern plains--Texas and Oklahoma most severely affected"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Description", "count": 238, "min": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "max": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA)."}, {"values": {"label": ["10096", "10114", "10133", "10110", "10195", "10228", "10169", "10088", "10177", "10203", "10212", "10068", "10012", "10058", "10039", "10124", "10145", "10191", "10052", "10179", "10104", "10010", "10138", "10038", "10150", "10152", "10178", "10077", "10009", "10128", "10180", "10215", "10142", "10047", "10011", "10200", "10229", "10073", "10076", "10116", "10214", "10156", "10089", "10171", "10220", "10205", "10014", "10134", "10185", "10001", "10136", "10149", "10055", "10210", "10164", "10194", "10165", "10103", "10167", "10042", "10051", "10129", "10023", "10093", "10067", "10204", "10091", "10115", "10223", "10040", "10054", "10219", "10189", "10062", "10230", "10080", "10201", "10209", "10233", "10079", "10135", "10109", "10202", "10022", "10059", "10168", "10190", "10157", "10192", "10224", "10002", " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "10211", "10154", "10065", "10216", "10015", "10035", "10107", "10218", "10085", "10199", "10146", "10197", "10057", "10028", "10232", "10217", "10183", "10097", "10173", "10182", "10033", "10031", "10004", "10140", "10046", "10066", "10193", "10112", "10008", "10087", "10044", "10069", "10237", "10027", "10036", "10100", "10175", "10049", "10139", "10050", "10056", "10101", "10037", "10024", "10086", "10213", "10026", "10174", "10176", "10235", "10025", "10095", "10081", "10221", "10029", "10007", "10121", "10141", "10159", "10106", "10151", "10161", "10084", "10102", "10225", "10094", "10170", "10113", "10144", "10130", "10013", "10072", "10092", "10019", "10162", "10231", "10098", "10181", "10238", "10105", "10108", "10120", "10020", "10032", "10053", "10222", "10166", "10090", "10196", "10048", "10060", "10074", "10083", "10111", "10041", "10070", "10018", "10125", "10188", "10061", "10117", "10155", "10099", "10123", "10198", "10206", "10184", "10063", "10082", "10119", "10160", "10034", "10132", "10227", "10127", "10207", "10122", "10234", "10005", "10137", "10030", "10075", "10017", "10186", "10064", "10118", "10208", "10131", "10163", "10187", "10016", "10043", "10045", "10126", "10158", "10172", "10236", "10071", "10148", "10006", "10143", "10021", "10078", "10153", "10226", "10147"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Event ID", "count": 238, "min": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "max": "10238"}, {"values": {"label": ["0.0 - 23.5", "23.5 - 47.0", "47.0 - 70.5", "70.5 - 94.0", "94.0 - 117.5", "117.5 - 141.0", "141.0 - 164.5", "164.5 - 188.0", "188.0 - 211.5", "211.5 - 235.0"], "data": [26, 23, 24, 23, 24, 23, 24, 23, 24, 24]}, "label": "Disaster_stringindexer_transform", "count": 10, "min": 0.0, "max": 235.0}, {"values": {"label": ["0.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [101, 41, 16, 26, 29, 9, 16]}, "label": "Disaster Type_stringindexer_transform", "count": 7, "min": "0.0", "max": "6.0"}, {"values": {"label": ["0.0 - 23.4", "23.4 - 46.8", "46.8 - 70.2", "70.2 - 93.6", "93.6 - 117.0", "117.0 - 140.4", "140.4 - 163.8", "163.8 - 187.2", "187.2 - 210.6", "210.6 - 234.0"], "data": [27, 23, 24, 23, 23, 24, 23, 24, 23, 24]}, "label": "Beginning Date_stringindexer_transform", "count": 10, "min": 0.0, "max": 234.0}, {"values": {"label": ["0.0 - 23.1", "23.1 - 46.2", "46.2 - 69.3", "69.3 - 92.4", "92.4 - 115.5", "115.5 - 138.6", "138.6 - 161.7", "161.7 - 184.8", "184.8 - 207.9", "207.9 - 231.0"], "data": [30, 23, 23, 23, 23, 23, 23, 23, 23, 24]}, "label": "Ending Date_stringindexer_transform", "count": 10, "min": 0.0, "max": 231.0}, {"values": {"label": ["0.0 - 23.7", "23.7 - 47.4", "47.4 - 71.1", "71.1 - 94.8", "94.8 - 118.5", "118.5 - 142.2", "142.2 - 165.9", "165.9 - 189.6", "189.6 - 213.3", "213.3 - 237.0"], "data": [24, 24, 24, 23, 24, 24, 23, 24, 24, 24]}, "label": "Description_stringindexer_transform", "count": 10, "min": 0.0, "max": 237.0}, {"values": {"label": ["0.0 - 23.7", "23.7 - 47.4", "47.4 - 71.1", "71.1 - 94.8", "94.8 - 118.5", "118.5 - 142.2", "142.2 - 165.9", "165.9 - 189.6", "189.6 - 213.3", "213.3 - 237.0"], "data": [24, 24, 24, 23, 24, 24, 23, 24, 24, 24]}, "label": "Event ID_stringindexer_transform", "count": 10, "min": 0.0, "max": 237.0}], "stageId": "65daa6ebc55b7f0042d67ca5", "FESamplePath": "/FileStore/platform/sampleData/65daa6ebc55b7f0042d67ca5_AutoFE/part-00000-2b59d2b2-0395-4e8c-ac99-a6d8f5969fd9-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/65daa6ebc55b7f0042d67ca5_AutoFE/part-00000-2b59d2b2-0395-4e8c-ac99-a6d8f5969fd9-c000.csv", "originalcount": 238, "graphdata": {"Disaster": {"label": ["Midwest/Southeast Tornadoes and Severe Weather (June 2011)", "Central Severe Weather (October 2006)", "Southern Severe Weather (April 2008)", "California Freeze (January 2007)", "Hurricane Harvey (August 2017)", "Colorado Flooding (September 2013)", "Hurricane Maria (September 2017)", "Hurricane Wilma (October 2005)", "Hurricane Gloria (September 1985)", "North Dakota, South Dakota and Montana Drought (Spring-Fall 2017)", "California Wildfires (Fall 1993)", "Hurricane Charley (August 2004)", "Hail, Tornadoes (April 1992)", "Freeze, Cold Wave (December 1983)", "Hurricane Erin (August 1995)", "Southwest/Great Plains Drought (2009)", "Oakland Firestorm (October 1991)", "Rockies and Midwest Severe Weather (July 2011)", "Arizona Severe Weather (October 2010)", "Midwest/Plains/Southeast Drought (Spring-Summer 2006)", "Central and Eastern Winter storm, Cold Wave (February 2015)", "Midwest, South and East Severe Weather (June 2009)", "Northern Plains Drought (Summer-Fall 1989)", "Western Drought (2014)", "Southeast Freeze (March 2017)", "Hurricane Ike (September 2008)", "Hurricane Katrina (August 2005)", "Midwest/Plains/East Tornadoes (May 2013)", "Spring Freeze (April 2007)", "Midwest/Mid-Atlantic Severe Weather (June 2008)", "Western/Eastern Drought/Heatwave (Summer-Fall 2007)", "East/South Severe Weather and Flooding (April 2007)", "Hurricane Allen (August 1980)", "Severe Storms, Hail (June 1992)", "Hurricane Juan (October 1985)", "Southern and Eastern Tornadoes and Severe Weather (April 2018)", "Severe Storms, Tornadoes (March 1991)", "Oklahoma, Kansas, and Texas Tornadoes and Severe Weather (May 2010)", "Western Drought (2015)", "U.S. Wildfires (Fall 2008)", "Eastern Drought/Heatwave (Summer 1999)", "Numerous Wildfires (2006)", "Mississippi and Ohio Valley Severe Weather and Flooding (March 1997)", "Central and Eastern Severe Weather (May 2018)", "Louisiana Flooding (August 2016)", "Midwest/Ohio Valley Severe Weather (April 2015)", "Midwest/Northeast Severe Storms and Flooding (July 2010)", "U.S. Drought (Spring-Fall 2002)", "Northeast Winter Storm (December 1992)", "Hurricane Ivan (September 2004)", "Severe Storms and Tornadoes (March 2006)", "Severe Storms (March 1992)", "Hurricane Bob (August 1991)", "South/Southeast Severe Weather (April 2015)", "Southeastern Tornadoes and Severe Weather (March 2018)", "Hurricane Elena (September 1985)", "Ohio Valley Tornadoes (November 2013)", "Oklahoma and Kansas Tornadoes (May 1999)", "Tropical Storm Lee (September 2011)", "Colorado Hail Storm and Central Severe Weather (May 2017)", "Southeast/Ohio Valley Severe Weather (February 2009)", "Colorado Hail Storm (July 1990)", "Southeast Ice Storm (February 1994)", "Hurricane Fran (September 1996)", "Texas Flooding (October 1998)", "Western Severe Storms and Flooding (February 1986)", "Hurricane Jeanne (September 2004)", "Hurricane Irma (September 2017)", "Hurricane Isaac (August 2012)", "Tropical Storm Alberto (July 1994)", "U.S. Drought/Heatwave (Summer 1988)", "Western/Eastern Severe Weather and Flooding (Winter-Spring 1998)", "Colorado Hail Storm (June 2018)", "Western Fire Season (Summer-Fall 1994)", "Texas Flooding (October 1994)", "Southeast Tornadoes (March 2008)", "Midwest/Ohio Valley Hail and Tornadoes (April 2001)", "Western Fire Season (Fall 2002)", "Southern Plains Drought (Spring-Summer 1996)", "Severe Storms/Hail (April 2003)", "Western Wildfires, California Firestorm (Summer-Fall 2017)", "Western Fire Season (Spring-Summer 2000)", "Northeast Winter Storm (March 2018)", "Central and Eastern Winter Storm (January 1999)", "Northeast Flooding (June 2006)", "East Coast Blizzard and Severe Weather (March 1993)", "Southern Plains Tornadoes (May 2015)", "Plains Tornadoes and Central Severe Weather (May 2016)", "Midwest/Southeast Severe Weather (August 2011)", "Groundhog Day Blizzard (February 2011)", "Southern Plains/Southwest Drought & Heat Wave (Spring-Summer 2011)", "Midwest Tornado Outbreak (March 2017)", "Southwest/Southern Plains Drought (Summer-Fall 2018)", "South Carolina and East Coast Flooding (October 2015)", "Severe Storms and Hail (June 1984)", "Central and Eastern Winter Storm (January 2018)", "Hurricane Dolly (July 2008)", "Pacific Northwest Severe Flooding (February 1996)", "Rockies/Southwest Severe Weather (June 2012)", "Colorado Hail Storm (July 2009)", "Hurricane Lili (October 2002)", "Northeast Flooding (March 2010)", "Severe Storms, Hail, Tornadoes (May 2004)", "California Freeze (December 1990)", "Tropical Storm Allison (June 2001)", "Southern Drought/Heat Wave (Summer 1998)", "West/Northeast/Southeast Drought (2016)", "Rockies/Central Plains Severe Weather (June 2014)", "Rockies/Midwest/Eastern Severe Weather (May 2014)", "Hurricane Sandy (October 2012)", "Severe Storms, Flash Floods, Hail, Tornadoes (May 1981)", "Texas and Louisiana Flooding (March 2016)", "South Plains Severe Weather (May 1995)", "Florida Freeze (January 1985)", "South/Southeast Tornadoes (April 2016)", "Hurricane Isabel (September 2003)", "Hurricane Andrew (August 1992)", "Houston Flooding (April 2016)", "Hurricane Alicia (August 1983)", "Hurricane Opal (October 1995)", "Southeast Severe Weather (November 1992)", "South/Southeast Severe Weather (March 2017)", "Severe Storms (May 1989)", "Western/Plains Drought/Heatwave (Spring-Fall 2013)", "Plains/East/Northeast Severe Weather (June-July 2012)", "Midwest/Southeast Tornadoes (April 2011)", "Minnesota Severe Storms/Hail (May 1998)", "Central/Southeast Tornado Outbreak (March 2017)", "Hurricane Florence (September 2018)", "U.S. Drought/Heatwave (2012)", "Southeast Drought/Heatwave (Summer 1986)", "Western/Central/Southeast Drought/Heatwave (Spring-Fall 2000)", "California Flooding (February 2017)", "Western Wildfires (Summer-Fall 2009)", "Central and Northeast Severe Weather (June 2015)", "Rockies/Plains Severe Weather (September 2014)", "Southeast/Midwest Tornadoes (April 2011)", "Rockies/Central/East Severe Weather (June 2010)", "Western and Alaskan Wildfires (Summer-Fall 2015)", "Southeast Severe Weather (March 2013)", "Hurricane Rita (September 2005)", "Western Wildfires (Summer-Fall 2012)", "Gulf States Storms and Flooding (December 1982-January 1983)", "Western Wildfires (Summer 2007)", "Southern Severe Storms and Flooding (April 1980)", "Southeast and Eastern Tornadoes (February 2016)", "East/South Flooding and Severe Weather (May 2010)", "Midwest/Southeast Tornadoes (March 2009)", "California Freeze (December 1998)", "Mississippi River flooding (April-May 2011)", "Western/Central Drought/Heatwave (Spring-Fall 2003)", "Midwest/Plains/Southeast Tornadoes (April 1982)", "Hurricane Bonnie (August 1998)", "South Florida Flooding (October 2000)", "Hurricane Floyd (September 1999)", "Midwest Drought (Spring-Summer 2005)", "Texas and Oklahoma Flooding and Severe Weather (May 2015)", "Tropical Storm Frances (September 1998)", "U.S. Drought (2008)", "West Virginia Flooding and Ohio Valley Tornadoes (June 2016)", "Hurricane Gustav (September 2008)", "California Wildfires (Fall 2003)", "Western Wildfires (Summer-Fall 2018)", "Plains Severe Weather (April 2014)", "Hurricane Dennis (July 2005)", "Southeast/Ohio Valley/Midwest Tornadoes (April 2011)", "U.S. Drought (Spring-Summer 1991)", "Midwest/Ohio Valley Severe Weather (April-May 2012)", "Florida Freeze (December 1989)", "Florida Freeze (January 1981)", "Southern Severe Weather (March 2016)", "Midwest/Southeast/Northeast Winter Storm, Cold Wave (January 1982)", "Texas Hail Storm (June 2018)", "Rockies and Northeast Severe Weather (July 2016)", "Southeast Severe Weather (March 2005)", "Hurricane Georges (September 1998)", "Central/Eastern Drought/Heatwave (Summer-Fall 1980)", "Midwest Tornadoes (April 2006)", "Midwest Flooding (Summer 2008)", "Michigan and Northeast Flooding (August 2014)", "Midwest/Plains/Northeast Tornadoes (May 2013)", "Southern Flooding (May 1990)", "Severe Storms and Tornadoes (April 2002)", "Winter Storm, Cold Wave (December 1989)", "Texas Tornadoes (April 2012)", "Southern Tornado Outbreak and Western Storms (January 2017)", "South/Southeast Severe Weather & Tornadoes (April 2009)", "Southeast Tornadoes and Severe Weather (February 2008)", "Midwest Severe Weather (June 2017)", "Midwest/Southeast/Northeast Winter Storm (January 2014)", "Blizzard/Floods (January 1996)", "West Coast Flooding (December 1996-January 1997)", "Hurricane Irene (August 2011)", "Midwest/Plains Tornadoes (April 1994)", "Winter Storm, Cold Wave (January 1985)", "Midwest Severe Weather (August 2013)", "Midwest Tornadoes and Severe Weather (May 2008)", "Winter Storm, Cold Wave (January 1994)", "Southeast/Ohio Valley Tornadoes (March 2012)", "Severe Storms/Tornadoes (May 2003)", "Severe storms (June 1982)", "Texas, New Mexico, Arizona Wildfires (Summer-Fall 2011)", "Midwest/Southeast Tornadoes (May 2011)", "Northeast Ice Storm (January 1998)", "Ohio Valley/South Tornadoes (April 2011)", "Hurricane Hugo (September 1989)", "Midwest Tornadoes (April 2012)", "Hurricane Frances (September 2004)", "Severe Storms, Tornadoes (June 1998)", "Tornadoes, Severe Storms, Floods (Spring 1984)", "Southern Plains/Midwest/Northeast Severe Weather (May 2012)", "Midwest Flooding (Summer 1993)", "Severe Weather (July 2003)", "Hurricane Marilyn (September 1995)", "Southeast Drought/Heat Wave (Summer 1993)", "Hurricane Iniki (September 1992)", "North Texas Hail Storm (March 2016)", "Southeast Drought (Summer 1983)", "Western/Southeast Wildfires (Summer-Fall 2016)", "Midwest/Southeast/Northeast Tornadoes and Flooding (April 2014)", "Northern Plains Flooding (Spring 1997)", "Illinois Flooding and Severe Weather (April 2013)", "Midwest/Plains Severe Weather (April 2013)", "Missouri and Arkansas Flooding and Central Severe Weather (May 2017)", "Texas Tornadoes and Midwest Flooding (December 2015)", "Hurricane Matthew (October 2016)", "Missouri River flooding (May-June 2011)", "California Flooding (January-March 1995)", "Rockies/Central Tornadoes and Severe Weather (May 2016)", "Central and Northeastern Severe Weather (May 2018)", "Western Storms & Flooding (December 1982-March 1983)", "North/Central Texas Hail Storm (April 2016)", "Midwest/Southeast Tornadoes (April 6-8, 2006)", "Minnesota Hail Storm and Upper Midwest Severe Weather (June 2017)", "Midwest/Plains Severe Weather (July 2003)", "Central and Eastern Winter Storm (Mid-January 1999)"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Disaster Type": {"label": ["Winter Storm", "Freeze", "Tropical Cyclone", "Flooding", "Wildfire", "Severe Storm", "Drought"], "data": [16, 9, 41, 29, 16, 101, 26]}, "Beginning Date": {"label": ["6/1/2018", "4/27/2014", "11/17/2013", "6/6/2008", "3/2/2012", "2/28/2017", "5/15/1998", "3/26/2017", "2/22/2016", "5/6/2015", "4/2/2014", "6/29/2012", "6/1/1998", "9/5/1996", "9/1/2003", "3/27/1984", "6/1/2015", "12/13/1982", "1/11/2007", "4/7/2015", "6/1/2007", "5/1/2011", "4/4/2003", "3/1/2002", "4/6/2001", "4/13/2007", "6/5/2001", "8/17/1983", "2/14/1986", "1/20/1985", "9/1/2008", "8/25/2005", "12/18/1990", "4/18/2015", "4/6/2006", "5/31/1982", "5/25/2012", "6/27/1993", "4/8/2011", "12/15/1983", "10/1/1991", "3/1/1991", "4/10/1980", "4/4/2011", "6/9/2009", "5/21/2004", "3/18/2013", "3/1/2018", "5/8/2017", "1/1/1996", "1/1/2006", "7/9/2005", "9/29/2014", "5/5/1995", "5/1/1989", "4/16/2013", "5/11/1990", "9/21/1989", "6/1/2017", "5/8/2016", "7/11/1990", "9/26/1985", "3/1/2017", "1/1/2014", "12/21/1989", "5/13/2018", "3/17/2016", "8/18/1991", "10/2/2006", "7/20/2009", "3/1/1996", "7/7/1994", "7/21/2003", "6/18/2018", "1/3/2018", "5/5/1981", "6/10/2010", "6/13/1984", "6/18/2011", "6/1/2016", "12/1/1982", "8/6/2013", "1/1/2012", "3/8/2006", "6/25/2006", "1/1/1997", "9/12/2008", "4/4/2007", "4/25/2017", "8/13/2004", "4/7/2013", "4/19/2011", "4/30/2010", "6/3/2014", "1/1/1995", "4/2/1982", "4/13/2012", "4/1/2008", "12/1/1997", "8/26/2012", "12/20/1998", "2/5/2008", "3/1/2011", "4/13/2006", "3/24/2005", "2/8/1994", "10/24/2005", "1/20/2017", "4/28/2012", "4/2/2012", "9/14/1999", "3/14/2017", "4/10/2016", "6/1/2012", "7/10/2011", "6/1/2009", "10/8/2016", "6/1/1999", "10/30/2012", "10/3/2000", "9/18/2003", "2/28/1997", "6/1/1980", "8/11/2014", "9/1/2002", "9/15/1995", "8/31/2008", "10/16/1998", "5/3/2003", "4/14/2011", "12/23/1989", "1/1/1999", "5/10/2010", "9/13/2018", "4/27/2002", "1/17/1994", "10/27/1985", "6/12/2017", "1/8/1982", "6/1/1994", "5/23/2015", "8/1/2002", "4/9/2009", "7/28/2016", "8/27/1998", "2/3/1997", "2/8/2017", "4/13/2018", "10/1/2015", "5/18/2013", "3/1/2005", "3/11/1993", "8/30/1985", "5/18/2014", "9/15/2004", "1/19/1985", "2/10/2009", "6/1/2011", "3/26/1991", "3/23/2016", "5/22/2008", "3/1/2013", "5/1/2018", "9/12/2004", "5/21/2016", "4/9/2008", "4/25/1994", "7/20/2010", "11/21/1992", "1/5/2014", "7/23/2008", "9/20/1998", "9/19/2017", "6/19/1992", "10/4/1995", "4/26/2016", "1/1/2016", "3/6/2017", "6/6/2012", "6/1/1988", "5/30/1998", "12/10/1992", "8/23/1992", "9/1/1993", "5/27/2013", "1/1/2008", "2/1/2011", "6/1/1993", "8/7/1980", "9/20/2005", "9/3/2004", "3/1/2000", "3/18/2018", "9/10/2013", "6/21/2015", "4/17/2016", "6/6/2018", "5/22/2011", "9/6/2017", "3/25/2009", "8/1/1995", "2/7/1996", "7/4/2003", "6/1/1989", "1/13/1999", "8/12/2016", "1/1/2009", "3/14/2008", "3/1/2006", "3/24/1992", "6/1/1983", "1/12/1981", "8/8/1998", "3/8/2016", "3/1/2003", "6/27/2017", "9/1/2011", "10/5/2010", "1/1/2015", "3/1/2010", "6/1/1986", "6/9/2017", "4/25/2011", "4/28/1992", "1/5/1998", "10/16/1994", "8/25/2017", "4/1/2011", "8/26/2011", "12/26/2015", "6/22/2016", "5/3/1999", "2/14/2015", "9/11/1992", "8/17/2011"], "data": [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Ending Date": {"label": ["11/17/2013", "5/7/2017", "5/24/1997", "8/31/2011", "1/20/1994", "6/30/2011", "5/6/1999", "10/12/2016", "4/18/2016", "3/24/2016", "5/15/1998", "4/14/2012", "9/21/2017", "4/28/2002", "2/13/1994", "8/31/1996", "4/20/2015", "9/19/2003", "9/3/2008", "3/16/2017", "5/1/2014", "8/18/2011", "5/12/2010", "1/16/1999", "11/30/2011", "1/14/1981", "7/9/2003", "8/20/1983", "2/22/2017", "11/30/2015", "3/27/2005", "3/14/1993", "8/31/2000", "3/3/2012", "5/10/2015", "4/19/2013", "8/29/1998", "3/5/1997", "10/25/1994", "5/11/2017", "6/24/2016", "4/12/2016", "12/31/2012", "7/23/2003", "8/31/1993", "3/18/2013", "3/13/2006", "11/30/1993", "6/17/1984", "11/30/2003", "11/30/2002", "2/12/1996", "12/31/2016", "3/12/2016", "8/7/1995", "7/11/1990", "6/29/2017", "9/12/1992", "8/11/1980", "3/1/2017", "10/6/1995", "4/10/2007", "4/16/2018", "6/12/2012", "7/20/2009", "11/23/1992", "12/25/1990", "11/30/2012", "4/28/2011", "8/7/2013", "5/1/2012", "8/31/2012", "2/24/2016", "9/16/1999", "5/22/2013", "6/12/2009", "2/11/2009", "6/10/1982", "7/2/2012", "7/10/1994", "3/29/1991", "5/19/1990", "8/13/1998", "1/11/1997", "7/30/2016", "5/23/2014", "11/30/1989", "9/29/2004", "6/5/2014", "9/16/2013", "4/3/2012", "8/31/2006", "9/24/2005", "1/16/1982", "4/29/1992", "1/4/1999", "9/8/1996", "8/27/1992", "12/31/2009", "3/15/2008", "12/31/2006", "10/31/2012", "9/14/2008", "2/28/1998", "10/4/2000", "4/7/1984", "8/31/2017", "4/11/2008", "4/9/2015", "9/16/2018", "10/24/2005", "3/31/2010", "8/5/2002", "10/31/1991", "5/15/2018", "6/12/2008", "4/17/2007", "3/31/1995", "9/5/2011", "12/13/1992", "6/17/2001", "1/31/1996", "3/8/2017", "11/30/1994", "4/16/2011", "8/15/2016", "5/26/2015", "7/23/2010", "7/25/2008", "5/10/2003", "4/4/1982", "10/24/1998", "8/31/1999", "1/8/2014", "1/22/2017", "7/14/2011", "4/8/2006", "5/31/2013", "5/27/2004", "9/12/2017", "10/5/2015", "6/20/1992", "1/17/2007", "9/3/1985", "12/25/1983", "5/2/2010", "8/28/2011", "5/11/2016", "1/9/1998", "8/20/1991", "4/11/2013", "8/31/1991", "9/29/1998", "8/31/1998", "12/25/1989", "3/28/2017", "3/3/2018", "10/31/1985", "4/16/2006", "2/20/2015", "12/31/2014", "1/5/2018", "8/31/2005", "8/14/2004", "4/17/1980", "6/16/2017", "5/2/2016", "11/30/2007", "4/11/2011", "4/5/2011", "10/6/2010", "7/11/2005", "12/29/2015", "6/22/2011", "5/31/2011", "12/28/1998", "5/7/1995", "5/4/2018", "9/28/1985", "5/27/2008", "12/31/2017", "6/11/2017", "6/6/2018", "4/10/2009", "3/28/2009", "9/9/2004", "1/22/1985", "12/31/2008", "5/6/1989", "4/3/2014", "4/11/2001", "6/15/2010", "9/22/1989", "2/16/1986", "6/19/2018", "9/30/2018", "2/3/2011", "6/30/2008", "12/26/1989", "5/10/1981", "10/5/2006", "8/30/2005", "6/2/1998", "5/27/2011", "11/30/1980", "4/27/1994", "1/15/1983", "4/20/2011", "8/31/2007", "9/21/2004", "4/7/2003", "3/21/2018", "9/17/1995", "8/15/1993", "6/25/2015", "12/31/2015", "11/30/2013", "8/31/1988", "3/18/2016", "6/28/2006", "11/30/2000", "8/13/2014", "8/31/1983", "5/26/2016", "2/6/2008", "3/25/1992", "3/31/1983", "11/30/2009", "10/2/2014", "11/30/2008", "8/31/1986", "5/30/2012"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Total CPI-Adjusted Cost (Millions of Dollars)": {"label": ["1000.0 - 17401.2", "17401.2 - 33802.4", "33802.4 - 50203.6", "50203.6 - 66604.8", "66604.8 - 83006.0", "83006.0 - 99407.2", "99407.2 - 115808.4", "115808.4 - 132209.6", "132209.6 - 148610.8", "148610.8 - 165012.0"], "data": [220, 9, 4, 1, 1, 1, 0, 1, 0, 1]}, "Deaths": {"label": ["0.0 - 298.1", "298.1 - 596.2", "596.2 - 894.3", "894.3 - 1192.4", "1192.4 - 1490.5", "1490.5 - 1788.6", "1788.6 - 2086.7", "2086.7 - 2384.8", "2384.8 - 2682.9", "2682.9 - 2981"], "data": [232, 3, 0, 0, 1, 0, 1, 0, 0, 1]}, "Description": {"label": ["Outbreak of tornadoes and severe weather over the midwest (OK, KS, NE, IA) with 98 confirmed tornadoes including many tornadoes that remained on the ground for an extended time - traveling tens of miles.", "Large-hail impacts highly-populated area of the Dallas-Ft. Worth metroplex. Golfball to baseball-sized hail damages many homes, vehicles and businesses.", "Category 2 hurricane impacts the U.S. Virgin Islands and Puerto Rico with maximum sustained winds of 110 mph.", "Category 1 hurricane made landfall over coastal NC and moved northward along the Mid-Atlantic Coast (NC, VA, MD, NJ, NY, CT, RI, MA, VT) causing torrential rainfall and flooding across the Northeast. Wind damage in coastal NC, VA, and MD was moderate with considerable damage resulting from falling trees and power lines, while flooding caused extensive flood damage across NJ, NY, and VT. Over seven million homes and businesses lost power during the storm. Numerous tornadoes were also reported in several states further adding to the damage.", "Category 2 hurricane makes landfall in southern Texas causing considerable wind and flooding damage in TX and NM.", "Winter storm affects the Southeast and Northeast regions. The states impacted include CT, DE, IL, IN, KY, MA, MD, ME, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA, VT and WV.", "California has again been impacted by a damaging and costly wildfire season. Of note, the Medincino Complex Fire was the largest wildfire on record in California burning over 450,000 acres while the Carr Fire in Northern California damaged or destroyed over 1,500 homes and businesses. Several other Western states (OR, WA, UT, WY, ID, MT, CO) have also had active and damaging wildfire seasons. In total, over 7.7 million acres has burned across the U.S. during the first 9 months of 2018, which is well above the 10-year average (2008-2017) of 5.9 million acres for the January-September period.", "Severe freeze damages citrus crops across central/northern Florida. Associated cold wave over much of the U.S. causes over 100 deaths and additional damages.", "Severe storms across the Rockies and Northeastern states (CO, WY, VA, MD, PA, NJ, NY) caused large hail and high wind damage. Storm damage in Colorado was the most costly due to hail.", "Category 3 hurricane makes landfall north of Brownsville, Texas with maximum sustained winds of 115 mph. Hurricane Allen causes rainfall up to 20 inches in southern Texas and storm surge as high as 12 feet along the coast.", "Severe weather over the Southeast (MS, AL, GA, TN) with 10 confirmed tornadoes. Considerable damage resulting from large hail and straight-line wind.", "South, Southeast, Midwest, Northeast affected by damaging winter storm", "Tornadoes and severe flooding hit the states of AR, MO, MS, TN, IL, IN, KY, OH, and WV, with over 10 inches of rain in 24 hours in Louisville.", "Winter storm and coldwave affect numerous states (AL, AR, CT, DE, FL, GA, IA, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MO, MS, NC, ND, NH, NJ, NY, OH, OK, PA, RI, SC, TN, TX, VA, VT, WI, WV) across the Midwest, Southeast and Northeast.", "Category 3 hurricane hits SW Florida resulting in strong damaging winds and major flooding across southeastern Florida. Prior to landfall, Wilma as a Category 5 recorded the lowest pressure (882 mb) ever recorded in the Atlantic basin.", "Severe freeze over central/northern Florida damages citrus crops.", "Three-day tornado outbreak strikes many Central and Eastern states including TX, LA, AL, MS, GA, AR, IN, OH, KY, TN, and NC. Major damage was reported across many areas, as more than 100 tornadoes were reported. This event remains one of the most prolific Fall season tornado outbreaks on record.", "Category 3 hurricane makes landfall in east-central Florida, causing considerable wind, storm surge, and flooding damage in FL, with some flood damage also in the states of GA, SC, NC, VA, MD, DE, NJ, PA, and NY. Puerto Rico also affected.", "Winter storm affecting the Central and Eastern states including IL, IN, OH, MI, WV, VA, MD, PA, NJ, NY, MA, CT, VT, NH and ME.", "Severe storms and flooding, especially in the states of TX, AR, LA, MS, AL, GA, and FL", "Series of tornadoes and severe thunderstorms across the Southeast and Midwest states (AL, AR, IN, KY, MS, OH, TN, TX) with 87 tornadoes confirmed.", "Category 2 hurricane makes landfall in east-central Florida, causing significant wind, storm surge, and flooding damage in FL, along with considerable flood damage in the states of GA, SC, NC, and NY due to 5-15 inch rains.", "Tornadoes and severe storms cause damage in states across the South, Southeast and Midwest. The states impacted include TX, OK, AR, CO, KS, NE, IA, SD, IL, IN, MN and MO.", "Severe storms and hail impact Colorado, South Dakota and Nebraska.", "Heavy, persistent rainfall across northern and central California created substantial property and infrastructure damage from flooding, landslides and erosion. Notable impacts include severe damage to the Oroville Dam spillway, which caused a multi-day evacuation of 188,000 residents downstream. Excessive rainfall also caused flood damage in the city of San Jose, as Coyote Creek overflowed its banks and inundated neighborhoods forcing 14,000 residents to evacuate.", "A slow-moving system caused tremendous rainfall and subsequent flooding to occur in Texas and Oklahoma. The Blanco river in Texas swelled from 5 feet to a crest of more than 40 feet over several hours causing considerable property damage and loss of life. The city of Houston also experienced flooding which resulted in hundreds of high-water rescues. The damage in Texas alone exceeded 1.0 (1.1) billion. There was also damage in other states (KS, CO, AR, OH, LA, GA, SC) from associated severe storms.", "Severe freeze damages citrus crops across central/northern Florida.", "Severe storms across the Plains states (IL, KS, MO, TX) causing considerable hail and wind damage in Texas.", "Very dry summer and high temperatures, mainly in eastern U.S., with extensive agricultural losses. The states impacted include AL, AR, FL, GA, KY, LA, MD, MS, NC, NJ, OH, SC, TN, VA, WV and PA.", "A period of heavy rainfall up to 15 inches over a multi-state region in the Midwest caused historic levels of flooding along many rivers. The flooding was most severe in Missouri, Arkansas and southern Illinois where levees were breached and towns were flooded. There was widespread damage to homes, businesses, infrastructure and agriculture. Severe storms also caused additional impacts during the flooding event across a number of central and southern states.", "Severe hail impacts the Fort Worth and Arlington metro region in Texas. Additional large hail and high wind damage occurred in other locations of Texas, Louisiana and Mississippi.", "Outbreak of tornadoes over central states (OK, TX, KS, NE, MO, IA, IL) with an estimated 81 tornadoes. Additional wind and hail damage across the Southeast (TN, GA, NC, SC).", "Category 3 hurricane strikes eastern North Carolina and Virginia, extensive agricultural damage due to winds and flooding, with 10-inch rains in 2 days in some locations.", "Torrential rains cause flooding along the Trinity, Red, and Arkansas Rivers in TX, OK, LA, and AR", "Severe flooding in southeast Texas from 2 heavy rain events, with 10-20 inch rainfall totals", "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "Remnants of slow-moving Alberto bring torrential 10-25 inch rains in 3 days, widespread flooding and agricultural damage in parts of Georgia, Alabama, and panhandle of Florida.", "Drought conditions across numerous western, central and southeastern states (AK, AZ, CA, NM, ID, UT, MT, NV, OR, WA, CO, TX, OK, NC, FL ) resulted in thousands of wildfires; national acreage burned exceeding 5.2 million acres (mainly in the west) and over 1,000 homes and structures destroyed in California fires alone.", "Dry weather, high winds and wildfires in Southern California", "Severe storms affect Arkansas, Oklahoma and Texas across the South.", "Severe storms across the Rockies, Midwest and Eastern states (CO, MT, IA, IL, IN, OH, SC, VA, PA, DE, NY) with the most costly damage in Colorado, Illinois and Pennsylvania.", "Persistent rainfall (nearly 300 percent normal precipitation amounts in the Ohio Valley) combined with melting snowpack caused historical flooding along the Mississippi River and its tributaries. Examples of economic damage include: 500 (570.0) million to agriculture in Arkansas; 320 (364.8) million in damage to Memphis, Tennessee; 800 (912.0) million to agriculture in Mississippi; 317 (361.4) million to agriculture and property in Missouri's Birds Point-New Madrid Spillway; 80 (91.2) million for the first 30 days of flood fighting efforts in Louisiana.", "Intense ice storm hits Maine, New Hampshire, Vermont, and New York, with extensive forestry losses", "Severe Storms hit Oklahoma and Texas with tornadoes and hail", "Severe hail and high wind damage impacting Nebraska, Illinois and Iowa. More than one dozen tornadoes touched down across parts of Iowa, in addition to other storm damage.", "Severe storms cause damage across the South, Southeast and Central regions. The states impacted include AR, IL, KY, IN, SC, GA and OH.", "Drought conditions were present across numerous Southwestern and Plains states (TX, OK, KS, MO, CO, NM, AZ, UT). The most extreme drought conditions continue to persist across the Four Corners region of the Southwest. The agriculture sector has been impacted across the affected states including damage to field crops from lack of rainfall. Ranchers have also be forced to sell-off livestock early in some regions due to high feeding costs.", "Historic levels of flooding impacted South Carolina causing widespread damage to many homes, businesses, public buildings and infrastructure. This interrupted commerce and closed major transportation corridors (such as I-95) for weeks as rivers slowly receded. Locally extreme rainfall totals exceeding 20-inches were common resulting from the convergence of a powerful low pressure system / frontal boundary and copious moisture from Hurricane Joaquin in the Atlantic.", "Severe weather and large hail causes considerable damage across Minnesota and Wisconsin.", "Severe storms and flooding, especially in the states of WA, OR, CA, AZ, NV, ID, UT, and MT", "Sustained period of severe thunderstorms and tornadoes affecting several states including Montana, Colorado, Kansas, Missouri and Texas. The most concentrated days for tornado development were on May 22 and 24. Additional damage was created by straight-line high wind and hail damage.", "Drought conditions over parts of the West, Central and eastern U.S. most affected the states IL, IN, KS, MN, OH, OR, PA, SD, and WA.", "Historic drought conditions affected the majority of California for all of 2014 making it the worst drought on record for the state. Surrounding states and parts of Texas, Oklahoma and Kansas also experienced continued severe drought conditions. This is a continuation of drought conditions that have persisted for several years.", "Heavy rainfall up to 15 inches affected south Florida surrounding Miami that resulted in severe flooding that damaged thousands of homes and businesses. There was also several hundred million in damage done to agriculture.", "Continued drought conditions and high winds over much of the western U.S. (AK, AZ, CA, ID, UT, MT, NV, OR, WA) resulting in numerous wildfires; with national acreage burned exceeding 8.9 million acres (mainly in the west) and over 3,000 homes and structures destroyed in southern California alone.", "Tornadoes and severe weather cause significant damage in the states of IA, IL, IN, and WI. The state of Indiana was most affected with over one billion dollars in damage.", "Large, category 2 hurricane makes landfall in eastern NC, causing 10-20 inch rains in 2 days, with severe flooding in NC and some flooding in SC, VA, MD, PA, NY, NJ, DE, RI, CT, MA, NH, and VT.", "Torrential rain (10-25 inches in 5 days) and thunderstorms cause flooding across much of southeast Texas", "Wildfires burned over 9.2 million acres across the U.S. in 2012. This is the 3rd highest annual total since the year 2000. The most damaging wildfires occurred in the western states (CO, ID, WY, MT, CA, NV, OR, WA). Colorado experienced the most costly wildfires (e.g., Waldo Canyon fire) where several hundred residences were destroyed.", "A historic firestorm damages or destroys over 15,000 homes, businesses and other structures across California in October. The combined destruction of the Tubbs, Atlas, Nuns and Redwood Valley wildfires represent the most costly wildfire event on record, also causing 44 deaths. Extreme wildfire conditions in early December also burned hundreds of homes in Los Angeles. Numerous other wildfires across many western and northwestern states burn over 9.8 million acres exceeding the 10-year annual average of 6.5 million acres. Montana in particular was affected by wildfires that burned in excess of 1 million acres. These wildfire conditions were enhanced by the preceding drought conditions in several states.", "Category 4 hurricane made landfall at Cudjoe Key, Florida after devastating the U.S. Virgin Islands - St John and St Thomas - as a category 5 storm. The Florida Keys were heavily impacted, as 25% of buildings were destroyed while 65% were significantly damaged. Severe wind and storm surge damage also occurred along the coasts of Florida and South Carolina. Jacksonville, FL and Charleston, SC received near-historic levels of storm surge causing significant coastal flooding. Irma maintained a maximum sustained wind of 185 mph for 37 hours, the longest in the satellite era. Irma also was a category 5 storm for longer than all other Atlantic hurricanes except Ivan in 2004.", "Tornado outbreak and wind damage across many Midwestern states (AR, IA, IL, KS, MI, MN, MO, NE, NY, OH, WI). Missouri and Illinois were impacted by numerous tornadoes while Michigan and New York were affected by destructive, straight-line winds following the storm system. Nearly one million customers lost power in Michigan alone due to sustained high winds, which affected several states from Illinois to New York.", "Category 1 hurricane makes landfall in Louisiana after causing damage across Saint Lucia, Jamaica, Haiti and Cuba.", "Severe hail, high winds and numerous tornadoes impact many states over several days including WY, TX, NE, KS, MO, IA, IL, PA, VA, NY.", "Outbreak of tornadoes over central and southern states (MO, TX, OK, KS, AR, GA, TN, VA, KY, IN, IL, OH, WI, MN, PA) with an estimated 180 tornadoes. Notably, an EF-5 tornado struck Joplin, MO resulting in at least 160 deaths, making it the deadliest single tornado to strike the U.S. since modern tornado record keeping began in 1950.", "Outbreak of tornadoes over central and southern states (OK, TX, AR, MS, AL, GA, NC, SC, VA, PA) with an estimated 177 tornadoes.", "Very damaging severe thunderstorms with large hail over wide areas of Minnesota", "Category 1 hurricane made landfall over Louisiana. Isaac's slow motion and large size led to a large storm surge and flooding rains. This created damage across several southeastern states (LA, MS, AL, FL) including 9 deaths (5 direct, 4 indirect).", "Sustained outbreak of thunderstorms / high winds from a strong derecho event over the central, eastern, and northeastern states (IL, IN, KY, OH, WV, SC, NC, VA, MD, DC, NJ).", "A potent severe storm system caused over 20 tornadoes across Alabama and also widespread hail damage from Texas to Florida. Most notably this system produced an EF-3 tornado that caused extensive damage in Jacksonville, Alabama and across the campus of Jacksonville State University.", "Heavy rain and flooding caused significant agricultural loss and property damage in IA, IL, IN, MO, MN, NE, and WI with IA being hardest hit with widespread rainfall totals ranging from 4 to over 16 inches.", "Outbreak of tornadoes over central and southern states (KS, MO, IA, IL, WI, KY, GA, TN, NC, SC) with an estimated 46 tornadoes.", "Outbreak of tornadoes over central and southern states (AL, AR, LA, MS, GA, TN, VA, KY, IL, MO, OH, TX, OK) with an estimated 343 tornadoes. The deadliest tornado of the outbreak, an EF-5, hit northern Alabama, killing 78 people. Several major metropolitan areas were directly impacted by strong tornadoes including Tuscaloosa, Birmingham, and Huntsville in Alabama and Chattanooga, Tennessee, causing the estimated damage costs to soar.", "Severe hail and high winds cause considerable damage across Minnesota and Wisconsin. The Minneapolis metro area in particular was damaged from large, destructive hail impacting many buildings and vehicles. This damage is comparable to the May 15, 1998 Minnesota hail storm that was also very costly.", "An outbreak of tornadoes and thunderstorms over the Midwest/Mid-Atlantic states (IA, IL, IN, KS, NE, MI, MN, MO, OK, WI, MD, VA, WV).", "Moderate to extreme drought over large portions of 30 states, including the western states, the Great Plains, and much of the eastern U.S.", "Severe storms over the southern plains, midwest and northeast (TX, OK, KS, MN, PA, NY) with 27 confirmed tornadoes. Significant damage also from severe hail and straight-line winds.", "Category 2 hurricane makes landfall in Louisiana causing significant wind, storm surge, and flooding damage in AL, AR, LA, and MS.", "Severe storms and flooding affect the states IA, IL, MD, NY, PA, WI across the Midwest and Northeast.", "Torrential rainfall caused destructive flooding through many West Virginia towns, damaging thousands of homes and businesses and causing considerable loss of life. Over 1,500 roads and bridges were damaged or destroyed making the impact on infrastructure comparable to the historic 2013 Colorado flood. The storm system also produced numerous tornadoes causing damage across several Ohio Valley states.", "California's 5-year drought persisted during 2016 while new areas of extreme drought developed in states across the Northeast and Southeast. The long-term impacts of the drought in California have damaged forests where 100+ million trees have perished and are a public safety hazard. The agricultural impacts were reduced in California as water prices and crop fallowing declined. However, agricultural impacts developed in Northeast and Southeast due to stressed water supplies.", "Category 3 hurricane makes landfall in western Florida panhandle resulting in storm surge and wind damage along the FL and AL coasts, along with scattered wind and flood damage in GA and MS.", "Severe storms cause damage across the Midwest and South. The states most impacted include TX, OK, KS, AL and LA.", "Category 2 hurricane brushes the Outer Banks of North Carolina before making landfall in Rhode Island. Its impacts were felt from North Carolina to Long Island and into New England.", "Early outbreak of tornadoes and severe weather across many southern and eastern states including (AL, CT, FL, GA, LA, MA, MD, MS, NC, NJ, NY, PA, SC, TX, VA). There were at least 50 confirmed tornadoes causing widespread damage.", "Category 4 hurricane causes severe damage to the Hawaiian island of Kauai. Hurricane Iniki is the costliest and deadliest hurricane to affect Hawaii since 1900.", "Category 4 hurricane made landfall in southeast Puerto Rico after striking the U.S. Virgin Island of St. Croix. Maria's high winds caused widespread devastation to Puerto Rico's transportation, agriculture, communication and energy infrastructure. Extreme rainfall up to 37 inches caused widespread flooding and mudslides across the island. The interruption to commerce and standard living conditions will be sustained for a long period, as much of Puerto Rico's infrastructure is rebuilt. Maria tied Hurricane Wilma (2005) for the most rapid intensification, strengthening from tropical depression to a category 5 storm in 54 hours. Maria's landfall at Category 4 strength gives the U.S. a record three Category 4+ landfalls this year (Maria, Harvey, and Irma). Maria was one of the deadliest storms to impact the U.S., with numerous indirect deaths in the wake of the storm's devastation.", "A large winter storm impacted many central, eastern and northeastern states. The city of Chicago was brought to a virtual standstill as between 1 and 2 feet of snow fell over the area.", "An unusual series of severe thunderstorms across Arizona produced numerous tornadoes and widespread, severe hail damage. Over one-hundred buildings were damaged or destroyed by tornadoes while thousands of automobiles and buildings were damaged by large hail across Phoenix and surrounding cities.", "Extreme drought causes extensive impacts to agriculture in North Dakota, South Dakota and Montana. Field crops including wheat were severely damaged and the lack of feed for cattle forced ranchers to sell off livestock. This drought has also contributed to the increased potential for severe wildfires.", "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "Complex of severe thunderstorms and high winds across the region (TN, KY, OK, OH, VA, WV, PA).", "High wind damage occurred across southern California near San Diego followed by 79 confirmed tornadoes during an outbreak across many southern states including AL, FL, GA, LA, MS, SC and TX. This was the 3rd most tornadoes to occur in a single outbreak during a winter month (Dec.-Feb.) for records going back to 1950.", "Tornadoes and severe weather across Georgia and South Carolina. This includes an EF-2 tornado causing damage to numerous buildings in downtown Atlanta.", "Frequent winter storms cause 20-70 inch rainfall and periodic flooding across much of California", "Severe drought and heat wave from Texas/Oklahoma eastward to the Carolinas. The states impacted include AL, AR, FL, GA, LA, MS, NC, OK, SC, TN, TX, and VA.", "Wind and flood damage across the southeast (LA, MS, AL, GA, TN) but considerably more damage from record flooding across the northeast (PA, NY, NJ, CT, VA, MD). Pennsylvania and New York were most affected.", "\"Severe weather and numerous tornadoes affecting the states of OK, KS, MO, NE, KY, OH, TN, IN, MS, GA, and AL on April 6-8 with 3 \"\"killer\"\" tornadoes in TN.\"", "Intense ice storm with extensive damage in portions of TX, OK, AR, LA, MS, AL, TN, GA, SC, NC, and VA.", "Severe weather across the Midwest and Plains states (IN, KS, MO, NE) with a total of 26 confirmed tornadoes. Considerable damage resulting from hail and straight-line wind.", "Rather severe drought affected crops especially during the spring-summer, centered over the Great Plains region with other areas affected across portions of the south -- including states of ND, SD, NE, KS, OK, TX, MN, IA, MO, AR, LA, MS, AL, GA, FL, MT, WY, CO, NM.", "1988 drought across a large portion of the U.S. with very severe losses to agriculture and related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 5,000.", "Large hail and strong winds caused considerable damage in heavily populated areas of north Texas. This damage was most notable in the cities of Dallas, Fort Worth and Plano.", "Hurricane Erin impacted Florida as a category 1 hurricane. Most of the damage resulted from heavy rainfall and flooding in Florida, Alabama and Mississippi.", "Severe weather impacts the states IA, KS, MO, NE, SD across the Midwest and Southeast.", "A period of extreme rainfall up to 17 inches created widespread urban flooding in Houston and surrounding suburbs. Thousands of homes and businesses were damaged and more than 1,800 high water rescues were conducted. This represents the most widespread flooding event to affect Houston since Tropical Storm Allison in 2001.", "Severe storms and flooding affect several states (AR, LA, MS) across the South.", "Hurricane Matthew paralleled the Southeast coast from Florida to North Carolina causing widespread damage from wind, storm surge and inland flooding. The most costly impacts were due to historic levels of river flooding in eastern North Carolina where 100,000 homes, businesses and other structures were damaged. This inland flooding was comparable to Hurricane Floyd (1999) that also impacted eastern North Carolina. Matthew narrowly missed landall on Florida's east coast as a powerful category 4 storm.", "Severe storms across the Midwest and Ohio Valley including the states (AR, IA, IL, IN, KS, KY, MI, MO, NC, OH, OK, PA, TN, TX, WI, WV). Large hail and high winds created the most damage across Missouri and Illinois.", "Severe storms cause high wind and hail damage across numerous states including OH, IL, IN, MI, MN and WI.", "Tornadoes and severe weather affect the states (AL, AR, CO, IA, IL, IN, KS, KY, LA, MI, MN, MO, MS, NE, OH, OK, PA, TN, TX, WI, WV) across the Midwest, Plains and Southeast.", "Category 3 hurricane strikes Florida panhandle, Alabama, western Georgia, eastern Tennessee, and the western Carolinas, causing storm surge, wind, and flooding damage.", "Severe storms across the Rockies and Plains states (CO, KS, TX). Large hail and high winds created significant damage across eastern Colorado and Texas, particularly in the Dallas metro area.", "Category 2 hurricane makes landfall in Texas, as the largest (in size) Atlantic hurricane on record, causing considerable storm surge in coastal TX and significant wind and flooding damage in TX, LA, AR, TN, IL, IN, KY, MO, OH, MI and PA. Severe gasoline shortages occurred in the southeast U.S. due to damaged oil platforms, storage tanks, pipelines and off-line refineries.", "Powerful Nor'easter impacted many Northeastern states including MD, MA, NH, NJ, NY, PA, CT, DE, RA and VA. Widespread damage resulted from the combination of high winds, heavy snow and heavy coastal erosion.", "Multiple days of heavy rainfall averaging 15 to 20 inches led to widespread flooding along the Sabine River basin on the Texas and Louisiana border. This prompted numerous evacuations, high-water rescues and destruction, as more than 1,000 homes and businesses were damaged or destroyed.", "A severe freeze damaged fruit and vegetable crops in the Central and Southern San Joaquin Valley. Extended intervals of sub 27\u00b0 F temperatures occurred over an 8-day period.", "Severe hail impacts Colorado. Jefferson County was most affected with hail at least 8 inches deep. The hail damage from this storm was comparable to the July 11, 1990 Colorado hail storm.", "Severe storms and large hail over the southern plains and lower MS valley, with Texas hardest hit, and much of the monetary losses due to hail.", "Torrential rains, hail, and tornadoes across Texas-Oklahoma and southeast Louisiana-southern Mississippi, with Dallas and New Orleans areas (10-25 inch rains in 5 days) hardest hit.", "Tornadoes and flooding cause damage across the West and Southeast. The states impacted include CA, TX, FL, AL, GA, LA, MS, NC and SC.", "Category 3 hurricane makes landfall near Galveston, Texas with maximum sustained winds 115 mph. Hurricane Alicia was the first hurricane to hit the United States mainland since Hurricane Allen in August 1980.", "Winter storm and deep cold impacts the Northeast, South and Southeast. The states impacted include AL, AR, CT, FL, GA, IL, IN, KY, LA, ME, MO, MS, NC, NH, NY, OH, OK, PA, SC, TN, TX, VA, VT and WV.", "Large hail and high winds in Texas north of the Dallas metro region caused widespread damage to structures and vehicles. Severe storms also caused damage across several other states (OK, TN, KY, MS, AL) due to the combination of high winds, hail and tornadoes.", "Dozens of tornadoes and severe storms affect the states AR, IL, IN, KY, MO, OH, TN, TX across the Ohio Valley and South.", "Severe, widespread flooding in central U.S. due to persistent heavy rains and thunderstorms. There was extensive damage to agriculture, infrastructure, homes and businesses in many areas across several states. Many river stations also established new records for historical flood heights. This is the most costly non-tropical, inland flood event to affect the United States on record.", "An outbreak of tornadoes, hail, and high wind caused damage east of the Rockies and across the central plains (CO, WY, IA, IL, MI, MN, OH).", "A powerful storm system packing unseasonably strong tornadoes caused widespread destruction in the Dallas metropolitan region, damaging well over 1,000 homes and businesses. This same potent system also produced intense rainfall over several Midwestern states triggering historic flooding that has approached or broken records at river gauges in several states (MO, IL, AR, TN, MS, LA). The flooding has overtopped levees and caused damage in numerous areas. This historic storm also produced high wind, snow and ice impacts from New Mexico through the Midwest and into New England. Overall, the storm caused at least 50 deaths from the combined impact of tornadoes, flooding and winter weather.", "A stalled frontal boundary over Colorado led to record rainfall, as some areas received > 15 inches over several days. This resulted in historic flooding across numerous cities and towns. Destruction of residences, businesses and transportation infrastructure was widespread.", "Tornado outbreak across the Southern Plain states (IA, KS, NE, OK, CO, SD, TX) with 122 tornadoes. The most costly damage occurred across Texas and Oklahoma.", "Heavy rainfall over portions of the Northeast in late March caused extensive flooding across several states (RI, CT, MA, NJ, NY, PA). The event caused the worst flooding in Rhode Island's history.", "Severe summer drought over much of the northern plains with significant losses to agriculture. The states impacted include CO, IA, IL, KS, MO, ND, NE, NV, SD, TX and UT.", "Severe storms affect the states IA, IL, IN, MI, MN, OH, VA, WV across the Midwest and Plains.", "Torrential rains (10-40 inches in 2 weeks) and snowmelt produce severe flooding over portions of CA, WA, OR, ID, NV, and MT.", "Drought conditions were present across numerous western states (CA, NV, OR, WA, ID, MT, UT, AZ) with the most severe conditions continuing to plague California for all of 2015. The agriculture sector was again impacted by a lack of rainfall resulting in hundreds of thousands of acres of farmland remaining fallow and requiring excess groundwater pumping to irrigate existing agriculture interests. Wildfire conditions were further enhanced by the ongoing drought. California experienced extensive damage from both drought and wildfire impacts. Drought conditions did improve dramatically across Texas and Oklahoma, in the form of several major flood events.", "Severe storms including tornadoes and hail cause damage across the Midwest, South, Southeast and Northeast regions. The states impacted include IA, IL, IN, KY, MI, MO, NC, NE, NY, OK, OH and WI.", "Severe drought and heat caused agricultural losses across a large portion of the U.S. Record low lake levels also occurred in areas of the southeast. The states impacted include AL, AR, CA, CO, GA, ID, IN, KS, KY, MD, MN, MS, MT, NC, ND, NJ, NM, OH, OK, OR, SC, TN, TX, UT, VA, WA and WI.", "Severe flooding in North Dakota, South Dakota and Minnesota due to heavy spring snow melt. This flooding caused widespread damage to agriculture, infrastructure, homes and businesses.", "\"The \"\"Storm of the Century\"\" impacts the entire Eastern seaboard from Florida to Maine. This historic storm dumped 2-4 feet of snow and caused hurricane force winds across many Eastern and Northeastern states. This caused power outages to over 10 million households. Additional impacts included numerous tornadoes across Florida causing substantial damage. This is the most destructive and costly winter storm to affect the United States since at least 1980.\"", "Category 3 hurricane initially impacts the U.S. as a Category 1 near Miami, FL, then as a strong Category 3 along the eastern LA-western MS coastlines, resulting in severe storm surge damage (maximum surge probably exceeded 30 feet) along the LA-MS-AL coasts, wind damage, and the failure of parts of the levee system in New Orleans. Inland effects included high winds and some flooding in the states of AL, MS, FL, TN, KY, IN, OH, and GA.", "Sustained outbreak of thunderstorms and high winds from a strong derecho event over the central, southern, and eastern states (TX, OK, MO, NE, KS, AR, AL, MS, TN, NC, SC, KY, PA).", "Numerous tornadoes and widespread hail damage over the Central and Eastern states including NC, GA, VA, TX, AR, MO, MS, TN, IL, IN, KY, PA, MD, NY, OH, WV, and KS.", "Category 3 hurricane strikes North Carolina and Virginia, over 10-inch 24-hour rains in some locations and extensive agricultural and other losses.", "States in the Southeast and Northeast regions are impacted by tornadoes, severe storms, and flooding. The states impacted include GA, FL, SC, NC, VA, MD, DE, NJ, NY, PA, CT, MA and RI.", "A historic flood devastated a large area of southern Louisiana resulting from 20 to 30 inches of rainfall over several days. Watson, Louisiana received an astounding 31.39 inches of rain from the storm. Two-day rainfall totals in the hardest hit areas have a 0.2% chance of occurring in any given year: a 1 in 500 year event. More than 30,000 people were rescued from the floodwaters that damaged or destroyed over 50,000 homes, 100,000 vehicles and 20,000 businesses. This is the most damaging U.S. flood event since Superstorm Sandy impacted the Northeast in 2012.", "Drought conditions occurred during much of the year across parts of the Southwest, Great Plains, and southern Texas causing agricultural losses in numerous states (TX, OK, KS, CA, NM, AZ). The largest agriculture losses occurred in TX and CA.", "Severe freeze in the Central and Southern San Joaquin Valley caused the loss of citrus, avocado trees, and other crops in many areas. Several days of subfreezing temperatures occurred, with some valley locations in the teens.", "Western/Central/Southeast Drought/Heatwave. The states impacted include AZ, AL, AR, CA, CO, FL, GA, IA, KS, LA, MS, MT, NE, NM, OK, OR, SC, TN, and TX.", "Extreme cold and winter storms in the Southeast, South, Southwest, Northeast, Midwest, and North", "Large outbreak of tornadoes affects numerous states across the South and Southeast. Additional damage also from large hail and straight-line wind during the multi-day thunderstorm event.", "Outbreak of tornadoes over the Midwest/Ohio Valley regions (IL, IN, IA, KS, MN, NE, OK, WY, CO) with 235 tornadoes confirmed.", "Widespread severe hail damage across north and central Texas including the cities of Plano, Wylie, Frisco, Allen and San Antonio. The damage in San Antonio was particularly severe as the National Weather Service verified reports of hail size reaching 4.5 inches in diameter. This ranks as one of the most costly hail events to affect the United States.", "Category 3 hurricane makes landfall on Gulf coast of Alabama, with significant wind, storm surge, and flooding damage in coastal AL and FL panhandle, along with wind/flood damage in the states of GA, MS, LA, SC, NC, VA, WV, MD, TN, KY, OH, DE, NJ, PA, and NY.", "Category 2 hurricane makes landfall in eastern North Carolina, causing considerable storm surge damage along the coasts of NC, VA, and MD, with wind damage and some flooding due to 4-12 inch rains in NC, VA, MD, DE, WV, NJ, NY, and PA.", "Outbreak of F4-F5 tornadoes hit the states of Oklahoma and Kansas, along with Texas and Tennessee, Oklahoma City area hardest hit.", "Western and Southern states experienced an active wildfire season with over 5.0 million acres burned nationally. Most notable was the firestorm that impacted Gatlinburg, Tennessee with hurricane-force wind gusts in extremely dry conditions creating volatile wildfire behavior. These wildfires destroyed nearly 2,500 structures and caused 14 fatalities. The drought conditions in many areas of the Southeast and California worsened the wildfire potential.", "Severe drought with periods of extreme heat over most of the southeast and portions of the Great Plains, Ohio Valley, and Great Lakes area, resulting in major reductions in crop yields, along with very low stream-flows and lake levels. Includes states of ND, SD, NE, KS, OK, TX, MN, WI, IA, MO, AR, LA, MS, AL, GA, NC, SC, FL, TN, VA, WV, KY, IN, IL, OH, MI, PA, NY.", "Rather severe localized drought causes significant crop losses (especially for corn and soybeans) in the states of AR, IL, IN, MO, OH, and WI.", "Severe storms in late May through early June hit the Midwest, North, Northeast, and Southeast", "Tornado outbreak across the Midwest, Southeast and Northeast states (AL, AR, DE, FL, GA, KS, MD, MO, MS, NC, NJ, NY, PA, TN, VA) with 83 confirmed tornadoes. Mississippi had its 3rd greatest number of tornadoes reported for any day since 1950. Torrential rainfall in the Florida panhandle also caused major flooding, as Pensacola set new 1-day and 2-day precipitation records of 15.55 and 20.47 inches, respectively. Flooding rains were also reported in coastal Alabama, as Mobile received 11.24 inches of rain, the third greatest calendar day rainfall total for the city.", "Tropical Storm Frances caused extensive flooding in Texas and Louisiana. The rainfall totals from Frances were 10 to 20 inches across eastern Texas into southern Louisiana.", "Denver, CO (including airport) hit by severe hail storm. This was the costliest hail storm on record for Colorado when it occurred.", "Category 1 hurricane makes landfall near Morgan City, Louisiana. Hurricane Juan's slow movement causes severe flooding in Louisiana, Mississippi, Alabama and Florida. Southern Louisiana was most severely affected due to widespread rainfall of 10-15 inches that caused substantial flooding.", "A slow-moving storm system created rainfall totals of 5 to 10 inches across northern and central Illinois including the Chicago metro. This resulted in damage to many homes and businesses. There was also severe weather damage from wind and hail across Indiana and Missouri.", "Dry weather, high winds, and resulting wildfires in Southern California burned over 3,700 homes. Nearly 4.0 million acres burned across numerous western states including Alaska.", "Severe storms hit the Midwest, Southeast, Northeast. The states impacted include KS, IL, MI, IN, MS, TN, KY, OH, AL, PA, NY, GA, SC and NC.", "Numerous wildfires driven by dry weather and high winds burned over 9.8 million acres, across the western half of the country including Alaska. This is the second highest annual total behind the 10.1 million acres burned in 2015 since record-keeping began in 1960. The most affected states were AK, AZ, CA, CO, FL, ID, MT, NM, NV, OK, OR, TX, WA, WY", "Widespread severe freeze over much of the east and midwest (AL, AR, GA, IA, IL, IN, KS, KY, MO, MS, NC, NE, OH, OK, SC, TN, VA, WV), causing significant losses in fruit crops, field crops (especially wheat), and the ornamental industry. Temperatures in the teens/20s accompanied by rather high winds nullified typical crop-protection systems.", "Severe storms cause widespread hail damage across numerous states including TX, AL, MS, GA, FL, NC and VA.", "Outbreak of tornadoes over central and southern states (NE, KS, OK, IA, TX, LA, MS, AL, GA, TN, KY) with 56 tornadoes confirmed.", "Very heavy snowstorm (1-4 feet) over Appalachians, Mid-Atlantic, and Northeast; followed by severe flooding in parts of same area due to rain and snowmelt.", "Severe storms cause damage in states across the South and Southeast. The states impacted include OK, TX, LA, MS, GA, SC, NC and VA.", "Severe weather over the midwest and Ohio Valley (TX, OK, KS, MO, IL, IN, KY) with 38 confirmed tornadoes. Considerable damage resulting from hail.", "Severe storms across the South and Southeastern states (AL, AR, FL, GA, KS, LA, MS, NC, OK, SC, TN, TX). High winds and severe hail created the most significant damage in Texas.", "The 2013 drought slowly dissipated from the historic levels of the 2012 drought, as conditions improved across many Midwestern and Plains states. However, moderate to extreme drought did remain or expand into western states (AZ, CA, CO, IA, ID, IL, KS, MI, MN, MO, ND, NE, NM, NV, OK, OR, SD, TX, UT, WA, WI, WY). In comparison to 2011 and 2012 drought conditions the US experienced only moderate crop losses across the central agriculture states.", "Hail storm and wind damage impacting several states including CO, OK, TX, NM, MO. The most costly impacts were in the Denver metro region where baseball-sized hail caused the most expensive hail storm in Colorado history, with insured losses exceeding 2.2 (2.3) billion.", "Numerous tornadoes over the midwest, Mississippi valley, OH/TN valleys, and portions of the southeast, with a modern record one-week total of approximately 400 tornadoes reported", "Severe wildfire season in the western states due to dry weather conditions. The states most impacted include CA, AZ, OR, WA, CO, UT, NV, NM and TX.", "Continued drought conditions and periods of extreme heat provided conditions favorable for a series of historic wildfires across Texas, New Mexico and Arizona. The Bastrop Fire in Texas was the most destructive fire in Texas history destroying over 1,500 homes. The Wallow Fire consumed over 500,000 acres in Arizona making it the largest on record in Arizona. The Las Conchas Fire in New Mexico was also the state's largest wildfire on record scorching over 150,000 acres while threatening the Los Alamos National Laboratory. Over 3 million acres have burned across Texas this wildfire season.", "Tornadoes and severe storms cause widespread damage across the Plains and Central states (NE, MO, TX, OK, KS, CO, IL, KY, TN) over a multi-day period. The damage from tornadoes and high wind was most costly in Nebraska and Missouri.", "Severe storms and damaging hail over several states (CO, NM, TX) with 25 confirmed tornadoes. Colorado experienced over 1.0 (1.1) billion in damage due to hail.", "Central and eastern U.S. drought/heat wave caused damage to agriculture and other related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 10,000.", "The 2012 drought is the most extensive drought to affect the U.S. since the 1930s. Moderate to extreme drought conditions affected more than half the country for a majority of 2012. The following states were affected: CA, NV, ID, MT, WY, UT, CO, AZ, NM, TX, ND, SD, NE, KS, OK, AR, MO, IA, MN, IL, IN, GA. Costly drought impacts occurred across the central agriculture states resulting in widespread harvest failure for corn, sorghum and soybean crops, among others. The associated summer heatwave also caused 123 direct deaths, but an estimate of the excess mortality due to heat stress is still unknown.", "Category 4 hurricane makes landfall in southwest Florida, resulting in major wind and some storm surge damage in FL, along with some damage in the states of SC and NC.", "Wildfires burned over 10.1 million acres across the U.S. in 2015, surpassing 2006 for the highest annual total of U.S. acreage burned since record-keeping began in 1960. The most costly wildfires occurred in California where over 2,500 structures were destroyed due to the Valley and Butte wildfires with the insured losses alone exceeding 1.0 (1.1) billion. The most extensive wildfires occurred in Alaska where over 5 million acres burned within the state. There was extensive burnt acreage across other western states, most notably (OR, WA, ID, MT, ND, CO, WY, TX).", "Tornadoes and severe storms with large hail cause widespread damage across many Southern and Eastern states (AR, FL, GA, LA, MD, MI, MS, MO, NJ, NY, NC, PA, SC, TX, VA) over a multi-day period. There were over 70 confirmed tornadoes largely clustered in Louisiana, Mississippi, North Carolina and Virginia. This same system also caused winter storm impacts of high wind and ice accumulation in northeastern states.", "Severe storms impact states across the South, Southeast, Midwest and Northeast regions. The states most impacted include AR, AL, MS, GA, FL, SC, TN, KY, MI, NY, OH, PA and VT.", "Drought and heat wave across Southeastern U.S. The states most impacted include AL, FL, GA, MD, NC, SC, TN, and VA.", "Major wildfires over 11 western states from the Rockies to the west coast due to drought and periodic high winds, with over 7.1 million acres burned.", "Category 5 hurricane hits Florida and later impacts Louisiana as a category 3. High winds damage or destroy over 125,000 homes and leave at least 160,000 people homeless in Dade County, Florida alone. Initially rated as a category 4, Andrew was later upgraded to a category 5 upon further analysis. Andrew joins Hurricane Camille (1969) and the Labor Day Hurricane (1935), as the only land falling category 5 hurricanes on record to affect the U.S. mainland. Adjusted to present-day dollars, Andrew is the 6th most costly hurricane to impact the U.S. since 1980, after Katrina (2005), Harvey (2017), Maria (2017), Sandy (2012) and Irma (2017).", "Severe hail storms cause golf ball to baseball-sized hail and widespread damage in many areas from northern Denver to Boulder and Fort Collins. Many homes, businesses and vehicles were impacted..", "The persistent remnants of Tropical Storm Allison produce rainfall amounts of 30-40 inches in portions of coastal Texas and Louisiana, causing severe flooding especially in the Houston area, then moves slowly northeastward; fatalities and significant damage reported in TX, LA, MS, FL, VA, and PA", "An outbreak of tornadoes, hail, and severe thunderstorms occurred across Oklahoma, Kansas, and Texas in mid-May. Oklahoma was hardest hit with > 1.5 (1.7) billion in damages.", "Flooding, hail, tornadoes, and severe thunderstorms occurred across many Southern states (TN, AR, AL, KY, MS, GA) on April 30-May 2. Flooding in the Nashville, TN area alone contributed > 1.0 (1.2) billion in damages. Western and Middle Tennessee were hardest hit with local rainfall amounts of 18-20 inches to the south and west of Greater Nashville.", "Outbreak of tornadoes over portions of the midwest and south during a week-long period-affecting the states of AL, AR, KY, MS, TN, TX, IN, KS, MO, and OK.", "Severe storm damage across many Central states including TX, KS, CO, OK, MO, IL, IN, IA and OH. This was followed by a derecho event across the Northeastern states of MD, NJ, NY, PA, VA, WV, MA and CT that caused widespread high wind damage. Also, there were one dozen tornadoes reported across PA, NY and CT causing further damage.", "Category 2 hurricane makes several landfalls along the eastern seaboard, affecting states from North Carolina to Maine.", "Category 3 hurricane approaches the Florida Panhandle prior to landfall near Biloxi, Mississippi. Considerable wind and rain impacts were felt from Florida to Louisiana.", "Severe storms across the Rockies and Central Plains states (NE, KS, WY, IA, AR). Wind gusts exceeding 90 mph and baseball to softball sized hail caused severe damage to structures and vehicles in central and eastern Nebraska.", "Severe flooding over portions of the northeast due to several weeks of heavy rainfall, affecting the states of NY, PA, DE, MD, NJ, and VA.", "Severe storms with hail hit Kansas and Oklahoma", "Slow-moving winter storm batters northeast U.S. coast, with the New England region hardest hit. The states impacted include VA, MD, DE, PA, NJ, NY, CT, RI, MA and WV.", "Severe freeze heavily damaged fruit crops across Florida. Over 25,000 Florida farms were impacted and sustained losses.", "\"Flooding, hail, tornadoes, and severe thunderstorms across numerous states (CT, DE, GA, LA, ME, MD, MA, MS, NH, NJ, NY, NC, PA, RI, SC, TX, VT, VA) in mid-April, including 3 \"\"killer\"\" tornadoes.\"", "Storms, tornadoes, and hail in the states of TX, OK, KS, NE, IA, MO, IL, IN, WI, MI, OH, KY, WV, and PA, over a 6-day period.", "Severe storms affect the South, Southeast. The states most impacted include Texas, Louisiana and Florida.", "Late-season outbreak of tornadoes and severe weather over the Ohio Valley (IL, IN, KY, MI, MO, OH) with 70 confirmed tornadoes. Most severe impacts occurred across Illinois and Indiana.", "Outbreak of tornadoes and severe weather over the Midwest, Plains and Eastern states (GA, IA, IL, KS, MO, NY, OK, TX) with 59 confirmed tornadoes including the deadly tornado that impacted Moore, OK. Many destructive tornadoes remained on the ground for an extended time.", "Melting of an above-average snow pack across the Northern Rocky Mountains combined with above-average precipitation caused the Missouri and Souris Rivers to swell beyond their banks across the Upper Midwest (MT, ND, SD, NE, IA, KS, MO). An estimated 11,000 people were forced to evacuate Minot, North Dakota due to the record high water level of the Souris River, where 4,000 homes were flooded. Numerous levees were breached along the Missouri River, flooding thousands of acres of farmland.", "Category 4 hurricane devastates South and North Carolina with ~20 foot storm surge and severe wind damage after hitting Puerto Rico and the U.S. Virgin Islands", "Severe storms and flooding affect the states CA, CO, NV, OR, WY across the West.", "Heavy rainfall in excess of 5 inches caused significant flooding in cities across Michigan damaging thousands of cars, business, homes and other infrastructure. Flooding also occurred across Maryland and New York's Long Island, as the slow-moving storm system delivered 24-hour rainfall exceeding 6 and 12 inches, respectively, creating more flood damage. Islip, NY received 13.57 inches of rain over a 24-hour period on Aug 12-13 setting a new 24-hour precipitation record for New York.", "Over 70 tornadoes developed during a widespread outbreak across many central and southern states causing significant damage. There was also widespread straight-line wind and hail damage. This was the second largest tornado outbreak to occur early in 2017.", "\"Residual and sustained drought conditions across western and south-central states resulted in thousands of wildfires. Most affected states include CA, AZ, NM, TX, OK, and UT. National acreage burned exceeding 5.9 million. Over 200 homes and structures destroyed in the California \"\"Station\"\" fire alone.\"", "Very heavy, persistent rains (10-30 inches) and melting snow over OR, WA, ID, and western MT.", "Category 4 hurricane made landfall near Rockport, Texas causing widespread damage. Harvey's devastation was most pronounced due to the large region of extreme rainfall producing historic flooding across Houston and surrounding areas. More than 30 inches of rainfall fell on 6.9 million people, while 1.25 million experienced over 45 inches and 11,000 had over 50 inches, based on 7-day rainfall totals ending August 31. This historic U.S. rainfall caused massive flooding that displaced over 30,000 people and damaged or destroyed over 200,000 homes and businesses.", "Outbreak of tornadoes and severe weather over the southeast and Ohio Valley (AL, GA, IN, OH, KY, TN) with 75 confirmed tornadoes.", "1983 flash drought in the southeastern U.S. with losses to agriculture, most notably corn and soybeans. The states impacted include AL, AR, GA, KY, LA, MO, MS, NC, SC, TN and VA.", "\"Hurricane Florence was a large and very slow moving hurricane that produced extreme rainfall across eastern North Carolina (up to 35.93\"\") and South Carolina (up to 23.81\"\")", "Outbreak of tornadoes, hail and severe thunderstorms over the south and southeastern states (AL, AR, GA, KY, MO, SC, TN) with 85 confirmed tornadoes.", "Numerous central states (KS, NE, OK, TX, NM, MO, IA, IL, IN, OH, WI) were impacted by large hail and tornadoes. Several northeastern states including NY, PA and VT were also impacted by high wind damage from severe storms.", "Outbreak of tornadoes and severe weather over the Midwest, Plains and Northeast (IL, IN, KS, MO, NY, OK, TX) with 92 confirmed tornadoes including the deadly tornado that struck El Reno, OK. There was also significant damage resulting from hail and straight-line wind.", "Severe wildfire season in the western states due to drought and frequent winds, with nearly 7 million acres burned.", "Severe freeze heavily damaged fruit crops across several southeastern states (SC, GA, NC, TN, AL, MS, FL, KY, VA). Mid-March freezes are not climatologically unusual in the Southeast, however many crops were blooming 3+ weeks early due to unusually warm temperatures during the preceding weeks. Damage was most severe in Georgia and South Carolina. Crops most impacted include peaches, blueberries, strawberries and apples, among others.", "Extensive damage across several northeastern states (MD, DE, NJ, NY, CT, MA, RI) due to high wind and coastal storm surge, particularly NY and NJ. Damage from wind, rain and heavy snow also extended more broadly to other states (NC, VA, WV, OH, PA, NH), as Sandy merged with a developing Nor'easter. Sandy's impact on major population centers caused widespread interruption to critical water / electrical services and also caused 159 deaths (72 direct, 87 indirect). Sandy also caused the New York Stock Exchange to close for two consecutive business days, which last happened in 1888 due to a major winter storm.", "Outbreak of tornadoes across the greater Dallas-Ft. Worth metropolitan area. Several moderate strength tornadoes (EF-2 and EF-3) affected towns in this area with a total of 22 confirmed tornadoes.", "2003 drought across western and central portions of the U.S. with losses to agriculture. The states impacted include AZ, CO, IA, ID, IL, KS, MI, MN, MO, MT, ND, NE, NM, OR, SD, WA and WI.", "Oakland, California firestorm due to low humidity and high winds burned over 3,000 homes. This is the costliest urban wildfire to affect the United States since 1980.", "Widespread agricultural freeze -- for nearly two weeks in January, overnight temperatures over a good portion of California dipped into the 20s, destroying numerous agricultural crops; with citrus, berry, and vegetable crops most affected.", "Outbreak of tornadoes over central and southern states (NC, SC, TN, AL, TX, OK, KS, IA, WI) with an estimated 59 tornadoes.", "A Nor'easter caused damage across many Northeastern states including MA, NJ, NY, CT, ME, NH, PA, MD, RI, SC, TN, VA, NC and GA.", "Severe storms across numerous Central and Northeast states (CO, CT, IA, IL, MD, MI, NJ, NY, PA, SD, VA, WI) with widespread hail and high wind damage.", "Category 3 hurricane hits Texas-Louisiana border coastal region, creating significant storm surge and wind damage along the coast, and some inland flooding in the FL panhandle, AL, MS, LA, AR, and TX. Prior to landfall, Rita reached the third lowest pressure (897 mb) ever recorded in the Atlantic basin.", "Category 2 hurricane strikes Puerto Rico, Virgin Islands, Florida Keys, and Gulf coasts of Louisiana, Mississippi, Alabama, and Florida panhandle, 15-30 inch 2-day rain totals in parts of Alabama and Florida", "Severe summer drought in parts of the southeastern U.S. with severe losses to agriculture. The states impacted include AL, AR, GA, LA, MS, NC, SC, TN and VA.", "A large winter storm and associated cold wave impacted many central, eastern and northeastern states (CT, DE, GA, IL, KY, MA, MD, ME, MI, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA). The city of Boston was particularly impacted as feet of snow continued to accumulate causing load-stress on buildings and clogging transportation corridors. Total, direct losses in Massachusetts alone exceed 1.0 (1.1) billion for this event, with considerable damage in many other states.", "Severe storms cause high wind and hail damage across numerous states including CO, NM, KS, OK, IL, IN, GA, SC and NC.", "Severe drought in agricultural regions of southern plains--Texas and Oklahoma most severely affected"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Event ID": {"label": ["10096", "10114", "10133", "10110", "10195", "10228", "10169", "10088", "10177", "10203", "10212", "10068", "10012", "10058", "10039", "10124", "10145", "10191", "10052", "10179", "10104", "10010", "10138", "10038", "10150", "10152", "10178", "10077", "10009", "10128", "10180", "10215", "10142", "10047", "10011", "10200", "10229", "10073", "10076", "10116", "10214", "10156", "10089", "10171", "10220", "10205", "10014", "10134", "10185", "10001", "10136", "10149", "10055", "10210", "10164", "10194", "10165", "10103", "10167", "10042", "10051", "10129", "10023", "10093", "10067", "10204", "10091", "10115", "10223", "10040", "10054", "10219", "10189", "10062", "10230", "10080", "10201", "10209", "10233", "10079", "10135", "10109", "10202", "10022", "10059", "10168", "10190", "10157", "10192", "10224", "10002", " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "10211", "10154", "10065", "10216", "10015", "10035", "10107", "10218", "10085", "10199", "10146", "10197", "10057", "10028", "10232", "10217", "10183", "10097", "10173", "10182", "10033", "10031", "10004", "10140", "10046", "10066", "10193", "10112", "10008", "10087", "10044", "10069", "10237", "10027", "10036", "10100", "10175", "10049", "10139", "10050", "10056", "10101", "10037", "10024", "10086", "10213", "10026", "10174", "10176", "10235", "10025", "10095", "10081", "10221", "10029", "10007", "10121", "10141", "10159", "10106", "10151", "10161", "10084", "10102", "10225", "10094", "10170", "10113", "10144", "10130", "10013", "10072", "10092", "10019", "10162", "10231", "10098", "10181", "10238", "10105", "10108", "10120", "10020", "10032", "10053", "10222", "10166", "10090", "10196", "10048", "10060", "10074", "10083", "10111", "10041", "10070", "10018", "10125", "10188", "10061", "10117", "10155", "10099", "10123", "10198", "10206", "10184", "10063", "10082", "10119", "10160", "10034", "10132", "10227", "10127", "10207", "10122", "10234", "10005", "10137", "10030", "10075", "10017", "10186", "10064", "10118", "10208", "10131", "10163", "10187", "10016", "10043", "10045", "10126", "10158", "10172", "10236", "10071", "10148", "10006", "10143", "10021", "10078", "10153", "10226", "10147"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "Disaster_stringindexer_transform": {"label": ["0.0 - 23.5", "23.5 - 47.0", "47.0 - 70.5", "70.5 - 94.0", "94.0 - 117.5", "117.5 - 141.0", "141.0 - 164.5", "164.5 - 188.0", "188.0 - 211.5", "211.5 - 235.0"], "data": [26, 23, 24, 23, 24, 23, 24, 23, 24, 24]}, "Disaster Type_stringindexer_transform": {"label": ["0.0", "1.0", "4.0", "3.0", "2.0", "6.0", "5.0"], "data": [101, 41, 16, 26, 29, 9, 16]}, "Beginning Date_stringindexer_transform": {"label": ["0.0 - 23.4", "23.4 - 46.8", "46.8 - 70.2", "70.2 - 93.6", "93.6 - 117.0", "117.0 - 140.4", "140.4 - 163.8", "163.8 - 187.2", "187.2 - 210.6", "210.6 - 234.0"], "data": [27, 23, 24, 23, 23, 24, 23, 24, 23, 24]}, "Ending Date_stringindexer_transform": {"label": ["0.0 - 23.1", "23.1 - 46.2", "46.2 - 69.3", "69.3 - 92.4", "92.4 - 115.5", "115.5 - 138.6", "138.6 - 161.7", "161.7 - 184.8", "184.8 - 207.9", "207.9 - 231.0"], "data": [30, 23, 23, 23, 23, 23, 23, 23, 23, 24]}, "Description_stringindexer_transform": {"label": ["0.0 - 23.7", "23.7 - 47.4", "47.4 - 71.1", "71.1 - 94.8", "94.8 - 118.5", "118.5 - 142.2", "142.2 - 165.9", "165.9 - 189.6", "189.6 - 213.3", "213.3 - 237.0"], "data": [24, 24, 24, 23, 24, 24, 23, 24, 24, 24]}, "Event ID_stringindexer_transform": {"label": ["0.0 - 23.7", "23.7 - 47.4", "47.4 - 71.1", "71.1 - 94.8", "94.8 - 118.5", "118.5 - 142.2", "142.2 - 165.9", "165.9 - 189.6", "189.6 - 213.3", "213.3 - 237.0"], "data": [24, 24, 24, 23, 24, 24, 23, 24, 24, 24]}}}, "ManualFE": {"FE": [{"transformationsData": [{"feature_label": "Disaster", "transformation_label": "String Indexer"}], "feature": "Disaster", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "Arizona Severe Weather (October 2010)", "max": "Western/Southeast Wildfires (Summer-Fall 2016)", "missing": "0", "distinct": "188"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Disaster"}, {"transformationsData": [{"feature_label": "Disaster Type", "transformation_label": "String Indexer"}], "feature": "Disaster Type", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "Drought", "max": "Winter Storm", "missing": "0", "distinct": "7"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Disaster Type"}, {"transformationsData": [{"feature_label": "Beginning Date", "transformation_label": "String Indexer"}], "feature": "Beginning Date", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "1/1/1995", "max": "9/6/2017", "missing": "0", "distinct": "187"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Beginning Date"}, {"transformationsData": [{"feature_label": "Ending Date", "transformation_label": "String Indexer"}], "feature": "Ending Date", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "1/11/1997", "max": "9/9/2004", "missing": "0", "distinct": "185"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Ending Date"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "190", "mean": "6838.76", "stddev": "17819.57", "min": "1000.0", "max": "165012.0", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "Total CPI-Adjusted Cost (..."}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "Deaths", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "190", "mean": "50.8", "stddev": "256.46", "min": "0", "max": "2981", "missing": "0"}, "updatedLabel": "Deaths"}, {"transformationsData": [{"feature_label": "Description", "transformation_label": "String Indexer"}], "feature": "Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "max": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "missing": "0", "distinct": "190"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Description"}, {"transformationsData": [{"feature_label": "Event ID", "transformation_label": "String Indexer"}], "feature": "Event ID", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "10095.99", "stddev": "54.72", "min": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "max": "10190", "missing": "0", "distinct": "190"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Event ID"}, {"feature": "Disaster_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "190", "mean": "92.52", "stddev": "54.96", "min": "0.0", "max": "187.0", "missing": "0"}, "updatedLabel": "Disaster_stringindexer_tr..."}, {"feature": "Disaster Type_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "190", "mean": "1.38", "stddev": "1.68", "min": "0.0", "max": "6.0", "missing": "0"}, "updatedLabel": "Disaster Type_stringindex..."}, {"feature": "Beginning Date_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "190", "mean": "91.55", "stddev": "54.91", "min": "0.0", "max": "186.0", "missing": "0"}, "updatedLabel": "Beginning Date_stringinde..."}, {"feature": "Ending Date_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "190", "mean": "89.63", "stddev": "54.78", "min": "0.0", "max": "184.0", "missing": "0"}, "updatedLabel": "Ending Date_stringindexer..."}, {"feature": "Description_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "190", "mean": "94.5", "stddev": "54.99", "min": "0.0", "max": "189.0", "missing": "0"}, "updatedLabel": "Description_stringindexer..."}, {"feature": "Event ID_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "190", "mean": "94.5", "stddev": "54.99", "min": "0.0", "max": "189.0", "missing": "0"}, "updatedLabel": "Event ID_stringindexer_tr..."}], "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "autoFE_flag": true, "stageId": "65daa6ebc55b7f0042d67ca5", "FESamplePath": "/FileStore/platform/sampleData/65daa6ebc55b7f0042d67ca5_AutoFE/part-00000-2b59d2b2-0395-4e8c-ac99-a6d8f5969fd9-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/65daa6ebc55b7f0042d67ca5_AutoFE/part-00000-2b59d2b2-0395-4e8c-ac99-a6d8f5969fd9-c000.csv", "samplecount": 190, "originalcount": 238, "dataPercentage": "80", "FEGraph": [{"values": {"label": ["Western Wildfires (Summer-Fall 2018)", "Southwest/Southern Plains Drought (Summer-Fall 2018)", "Hurricane Florence (September 2018)", "Colorado Hail Storm (June 2018)", "Texas Hail Storm (June 2018)", "Central and Eastern Severe Weather (May 2018)", "Central and Northeastern Severe Weather (May 2018)", "Southern and Eastern Tornadoes and Severe Weather (April 2018)", "Southeastern Tornadoes and Severe Weather (March 2018)", "Northeast Winter Storm (March 2018)", "Central and Eastern Winter Storm (January 2018)", "Western Wildfires, California Firestorm (Summer-Fall 2017)", "North Dakota, South Dakota and Montana Drought (Spring-Fall 2017)", "Hurricane Maria (September 2017)", "Hurricane Irma (September 2017)", "Hurricane Harvey (August 2017)", "Midwest Severe Weather (June 2017)", "Minnesota Hail Storm and Upper Midwest Severe Weather (June 2017)", "Colorado Hail Storm and Central Severe Weather (May 2017)", "Missouri and Arkansas Flooding and Central Severe Weather (May 2017)", "South/Southeast Severe Weather (March 2017)", "Southeast Freeze (March 2017)", "Midwest Tornado Outbreak (March 2017)", "Central/Southeast Tornado Outbreak (March 2017)", "California Flooding (February 2017)", "Southern Tornado Outbreak and Western Storms (January 2017)", "Western/Southeast Wildfires (Summer-Fall 2016)", "West/Northeast/Southeast Drought (2016)", "Hurricane Matthew (October 2016)", "Louisiana Flooding (August 2016)", "Rockies and Northeast Severe Weather (July 2016)", "West Virginia Flooding and Ohio Valley Tornadoes (June 2016)", "Rockies/Central Tornadoes and Severe Weather (May 2016)", "Plains Tornadoes and Central Severe Weather (May 2016)", "South/Southeast Tornadoes (April 2016)", "Houston Flooding (April 2016)", "North/Central Texas Hail Storm (April 2016)", "North Texas Hail Storm (March 2016)", "Southern Severe Weather (March 2016)", "Texas and Louisiana Flooding (March 2016)", "Southeast and Eastern Tornadoes (February 2016)", "Western Drought (2015)", "Texas Tornadoes and Midwest Flooding (December 2015)", "Western and Alaskan Wildfires (Summer-Fall 2015)", "South Carolina and East Coast Flooding (October 2015)", "Central and Northeast Severe Weather (June 2015)", "Texas and Oklahoma Flooding and Severe Weather (May 2015)", "Southern Plains Tornadoes (May 2015)", "South/Southeast Severe Weather (April 2015)", "Midwest/Ohio Valley Severe Weather (April 2015)", "Central and Eastern Winter storm, Cold Wave (February 2015)", "Western Drought (2014)", "Rockies/Plains Severe Weather (September 2014)", "Michigan and Northeast Flooding (August 2014)", "Rockies/Central Plains Severe Weather (June 2014)", "Rockies/Midwest/Eastern Severe Weather (May 2014)", "Midwest/Southeast/Northeast Tornadoes and Flooding (April 2014)", "Plains Severe Weather (April 2014)", "Midwest/Southeast/Northeast Winter Storm (January 2014)", "Western/Plains Drought/Heatwave (Spring-Fall 2013)", "Ohio Valley Tornadoes (November 2013)", "Colorado Flooding (September 2013)", "Midwest Severe Weather (August 2013)", "Midwest/Plains/Northeast Tornadoes (May 2013)", "Midwest/Plains/East Tornadoes (May 2013)", "Illinois Flooding and Severe Weather (April 2013)", "Midwest/Plains Severe Weather (April 2013)", "Southeast Severe Weather (March 2013)", "U.S. Drought/Heatwave (2012)", "Western Wildfires (Summer-Fall 2012)", "Hurricane Sandy (October 2012)", "Hurricane Isaac (August 2012)", "Plains/East/Northeast Severe Weather (June-July 2012)", "Rockies/Southwest Severe Weather (June 2012)", "Southern Plains/Midwest/Northeast Severe Weather (May 2012)", "Midwest/Ohio Valley Severe Weather (April-May 2012)", "Midwest Tornadoes (April 2012)", "Texas Tornadoes (April 2012)", "Southeast/Ohio Valley Tornadoes (March 2012)", "Texas, New Mexico, Arizona Wildfires (Summer-Fall 2011)", "Tropical Storm Lee (September 2011)", "Southern Plains/Southwest Drought & Heat Wave (Spring-Summer 2011)", "Hurricane Irene (August 2011)", "Midwest/Southeast Severe Weather (August 2011)", "Rockies and Midwest Severe Weather (July 2011)", "Missouri River flooding (May-June 2011)", "Midwest/Southeast Tornadoes and Severe Weather (June 2011)", "Mississippi River flooding (April-May 2011)", "Midwest/Southeast Tornadoes (May 2011)", "Southeast/Ohio Valley/Midwest Tornadoes (April 2011)", "Ohio Valley/South Tornadoes (April 2011)", "Midwest/Southeast Tornadoes (April 2011)", "Southeast/Midwest Tornadoes (April 2011)", "Groundhog Day Blizzard (February 2011)", "Arizona Severe Weather (October 2010)", "Midwest/Northeast Severe Storms and Flooding (July 2010)", "Rockies/Central/East Severe Weather (June 2010)", "Oklahoma, Kansas, and Texas Tornadoes and Severe Weather (May 2010)", "East/South Flooding and Severe Weather (May 2010)", "Northeast Flooding (March 2010)", "Southwest/Great Plains Drought (2009)", "Western Wildfires (Summer-Fall 2009)", "Colorado Hail Storm (July 2009)", "Midwest, South and East Severe Weather (June 2009)", "South/Southeast Severe Weather & Tornadoes (April 2009)", "Midwest/Southeast Tornadoes (March 2009)", "Southeast/Ohio Valley Severe Weather (February 2009)", "U.S. Drought (2008)", "U.S. Wildfires (Fall 2008)", "Hurricane Ike (September 2008)", "Hurricane Gustav (September 2008)", "Hurricane Dolly (July 2008)", "Midwest Flooding (Summer 2008)", "Midwest/Mid-Atlantic Severe Weather (June 2008)", "Midwest Tornadoes and Severe Weather (May 2008)", "Southern Severe Weather (April 2008)", "Southeast Tornadoes (March 2008)", "Southeast Tornadoes and Severe Weather (February 2008)", "Western/Eastern Drought/Heatwave (Summer-Fall 2007)", "Western Wildfires (Summer 2007)", "East/South Severe Weather and Flooding (April 2007)", "Spring Freeze (April 2007)", "California Freeze (January 2007)", "Numerous Wildfires (2006)", "Central Severe Weather (October 2006)", "Midwest/Plains/Southeast Drought (Spring-Summer 2006)", "Northeast Flooding (June 2006)", "Midwest Tornadoes (April 2006)", "Midwest/Southeast Tornadoes (April 6-8, 2006)", "Severe Storms and Tornadoes (March 2006)", "Hurricane Wilma (October 2005)", "Hurricane Rita (September 2005)", "Midwest Drought (Spring-Summer 2005)", "Hurricane Katrina (August 2005)", "Hurricane Dennis (July 2005)", "Southeast Severe Weather (March 2005)", "Hurricane Jeanne (September 2004)", "Hurricane Ivan (September 2004)", "Hurricane Frances (September 2004)", "Hurricane Charley (August 2004)", "Severe Storms, Hail, Tornadoes (May 2004)", "California Wildfires (Fall 2003)", "Western/Central Drought/Heatwave (Spring-Fall 2003)", "Hurricane Isabel (September 2003)", "Severe Weather (July 2003)", "Midwest/Plains Severe Weather (July 2003)", "Severe Storms/Tornadoes (May 2003)", "Severe Storms/Hail (April 2003)", "Western Fire Season (Fall 2002)", "U.S. Drought (Spring-Fall 2002)", "Hurricane Lili (October 2002)", "Severe Storms and Tornadoes (April 2002)", "Tropical Storm Allison (June 2001)", "Midwest/Ohio Valley Hail and Tornadoes (April 2001)", "Western/Central/Southeast Drought/Heatwave (Spring-Fall 2000)", "South Florida Flooding (October 2000)", "Western Fire Season (Spring-Summer 2000)", "Hurricane Floyd (September 1999)", "Eastern Drought/Heatwave (Summer 1999)", "Oklahoma and Kansas Tornadoes (May 1999)", "Central and Eastern Winter Storm (Mid-January 1999)", "Central and Eastern Winter Storm (January 1999)", "California Freeze (December 1998)", "Texas Flooding (October 1998)", "Hurricane Georges (September 1998)", "Southern Drought/Heat Wave (Summer 1998)", "Hurricane Bonnie (August 1998)", "Tropical Storm Frances (September 1998)", "Severe Storms, Tornadoes (June 1998)", "Minnesota Severe Storms/Hail (May 1998)", "Western/Eastern Severe Weather and Flooding (Winter-Spring 1998)", "Northeast Ice Storm (January 1998)", "Northern Plains Flooding (Spring 1997)", "Mississippi and Ohio Valley Severe Weather and Flooding (March 1997)", "West Coast Flooding (December 1996-January 1997)", "Hurricane Fran (September 1996)", "Southern Plains Drought (Spring-Summer 1996)", "Pacific Northwest Severe Flooding (February 1996)", "Blizzard/Floods (January 1996)", "Hurricane Opal (October 1995)", "Hurricane Marilyn (September 1995)", "Hurricane Erin (August 1995)", "South Plains Severe Weather (May 1995)", "California Flooding (January-March 1995)", "Western Fire Season (Summer-Fall 1994)", "Texas Flooding (October 1994)", "Tropical Storm Alberto (July 1994)", "Midwest/Plains Tornadoes (April 1994)"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Disaster", "count": 188, "min": "Arizona Severe Weather (October 2010)", "max": "Western/Southeast Wildfires (Summer-Fall 2016)"}, {"values": {"label": ["Wildfire", "Drought", "Tropical Cyclone", "Severe Storm", "Winter Storm", "Flooding", "Freeze"], "data": [14, 19, 32, 88, 9, 24, 4]}, "label": "Disaster Type", "count": 7, "min": "Drought", "max": "Winter Storm"}, {"values": {"label": ["6/1/2018", "9/13/2018", "6/18/2018", "6/6/2018", "5/13/2018", "5/1/2018", "4/13/2018", "3/18/2018", "3/1/2018", "1/3/2018", "6/1/2017", "3/1/2017", "9/19/2017", "9/6/2017", "8/25/2017", "6/27/2017", "6/12/2017", "6/9/2017", "5/8/2017", "4/25/2017", "3/26/2017", "3/14/2017", "3/6/2017", "2/28/2017", "2/8/2017", "1/20/2017", "6/1/2016", "1/1/2016", "10/8/2016", "8/12/2016", "7/28/2016", "6/22/2016", "5/21/2016", "5/8/2016", "4/26/2016", "4/17/2016", "4/10/2016", "3/23/2016", "3/17/2016", "3/8/2016", "2/22/2016", "1/1/2015", "12/26/2015", "6/1/2015", "10/1/2015", "6/21/2015", "5/23/2015", "5/6/2015", "4/18/2015", "4/7/2015", "2/14/2015", "1/1/2014", "9/29/2014", "8/11/2014", "6/3/2014", "5/18/2014", "4/27/2014", "4/2/2014", "1/5/2014", "3/1/2013", "11/17/2013", "9/10/2013", "8/6/2013", "5/27/2013", "5/18/2013", "4/16/2013", "4/7/2013", "3/18/2013", "1/1/2012", "6/1/2012", "10/30/2012", "8/26/2012", "6/29/2012", "6/6/2012", "5/25/2012", "4/28/2012", "4/13/2012", "4/2/2012", "3/2/2012", "6/1/2011", "9/1/2011", "3/1/2011", "8/26/2011", "8/17/2011", "7/10/2011", "5/1/2011", "6/18/2011", "4/1/2011", "5/22/2011", "4/25/2011", "4/19/2011", "4/14/2011", "4/8/2011", "4/4/2011", "2/1/2011", "10/5/2010", "7/20/2010", "6/10/2010", "5/10/2010", "4/30/2010", "3/1/2010", "1/1/2009", "6/1/2009", "7/20/2009", "6/9/2009", "4/9/2009", "3/25/2009", "2/10/2009", "1/1/2008", "9/1/2008", "9/12/2008", "8/31/2008", "7/23/2008", "4/1/2008", "6/6/2008", "5/22/2008", "4/9/2008", "3/14/2008", "2/5/2008", "6/1/2007", "4/13/2007", "4/4/2007", "1/11/2007", "1/1/2006", "10/2/2006", "3/1/2006", "6/25/2006", "4/13/2006", "4/6/2006", "3/8/2006", "10/24/2005", "9/20/2005", "3/1/2005", "8/25/2005", "7/9/2005", "3/24/2005", "9/15/2004", "9/12/2004", "9/3/2004", "8/13/2004", "5/21/2004", "9/1/2003", "3/1/2003", "9/18/2003", "7/21/2003", "7/4/2003", "5/3/2003", "4/4/2003", "9/1/2002", "3/1/2002", "8/1/2002", "4/27/2002", "6/5/2001", "4/6/2001", "3/1/2000", "10/3/2000", "9/14/1999", "6/1/1999", "5/3/1999", "1/13/1999", "1/1/1999", "12/20/1998", "10/16/1998", "9/20/1998", "6/1/1998", "8/27/1998", "8/8/1998", "5/30/1998", "5/15/1998", "12/1/1997", "1/5/1998", "2/3/1997", "2/28/1997", "1/1/1997", "9/5/1996", "3/1/1996", "2/7/1996", "1/1/1996", "10/4/1995", "9/15/1995", "8/1/1995", "5/5/1995", "1/1/1995", "6/1/1994", "10/16/1994", "7/7/1994", "4/25/1994"], "data": [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Beginning Date", "count": 187, "min": "1/1/1995", "max": "9/6/2017"}, {"values": {"label": ["9/30/2018", "9/16/2018", "6/19/2018", "6/6/2018", "5/15/2018", "5/4/2018", "4/16/2018", "3/21/2018", "3/3/2018", "1/5/2018", "12/31/2017", "9/21/2017", "9/12/2017", "8/31/2017", "6/29/2017", "6/16/2017", "6/11/2017", "5/11/2017", "5/7/2017", "3/28/2017", "3/16/2017", "3/8/2017", "3/1/2017", "2/22/2017", "1/22/2017", "12/31/2016", "10/12/2016", "8/15/2016", "7/30/2016", "6/24/2016", "5/26/2016", "5/11/2016", "5/2/2016", "4/18/2016", "4/12/2016", "3/24/2016", "3/18/2016", "3/12/2016", "2/24/2016", "12/31/2015", "12/29/2015", "11/30/2015", "10/5/2015", "6/25/2015", "5/26/2015", "5/10/2015", "4/20/2015", "4/9/2015", "2/20/2015", "12/31/2014", "10/2/2014", "8/13/2014", "6/5/2014", "5/23/2014", "5/1/2014", "4/3/2014", "1/8/2014", "11/30/2013", "11/17/2013", "9/16/2013", "8/7/2013", "5/31/2013", "5/22/2013", "4/19/2013", "4/11/2013", "3/18/2013", "12/31/2012", "11/30/2012", "10/31/2012", "8/31/2012", "7/2/2012", "6/12/2012", "5/30/2012", "5/1/2012", "4/14/2012", "4/3/2012", "3/3/2012", "11/30/2011", "9/5/2011", "8/31/2011", "8/28/2011", "8/18/2011", "7/14/2011", "6/30/2011", "6/22/2011", "5/31/2011", "5/27/2011", "4/28/2011", "4/20/2011", "4/16/2011", "4/11/2011", "4/5/2011", "2/3/2011", "10/6/2010", "7/23/2010", "6/15/2010", "5/12/2010", "5/2/2010", "3/31/2010", "12/31/2009", "11/30/2009", "7/20/2009", "6/12/2009", "4/10/2009", "3/28/2009", "2/11/2009", "12/31/2008", "11/30/2008", "9/14/2008", "9/3/2008", "7/25/2008", "6/30/2008", "6/12/2008", "5/27/2008", "4/11/2008", "3/15/2008", "2/6/2008", "11/30/2007", "8/31/2007", "4/17/2007", "4/10/2007", "1/17/2007", "12/31/2006", "10/5/2006", "8/31/2006", "6/28/2006", "4/16/2006", "4/8/2006", "3/13/2006", "10/24/2005", "9/24/2005", "8/31/2005", "8/30/2005", "7/11/2005", "3/27/2005", "9/29/2004", "9/21/2004", "9/9/2004", "8/14/2004", "5/27/2004", "11/30/2003", "9/19/2003", "7/23/2003", "7/9/2003", "5/10/2003", "4/7/2003", "11/30/2002", "8/5/2002", "4/28/2002", "6/17/2001", "4/11/2001", "11/30/2000", "10/4/2000", "8/31/2000", "9/16/1999", "8/31/1999", "5/6/1999", "1/16/1999", "1/4/1999", "12/28/1998", "10/24/1998", "9/29/1998", "8/31/1998", "8/29/1998", "8/13/1998", "6/2/1998", "5/15/1998", "2/28/1998", "1/9/1998", "5/24/1997", "3/5/1997", "1/11/1997", "9/8/1996", "8/31/1996", "2/12/1996", "1/31/1996", "10/6/1995", "9/17/1995", "8/7/1995", "5/7/1995", "3/31/1995", "11/30/1994", "10/25/1994", "7/10/1994", "4/27/1994"], "data": [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Ending Date", "count": 185, "min": "1/11/1997", "max": "9/9/2004"}, {"values": {"label": ["1000.0 - 17401.2", "17401.2 - 33802.4", "33802.4 - 50203.6", "50203.6 - 66604.8", "66604.8 - 83006.0", "83006.0 - 99407.2", "99407.2 - 115808.4", "115808.4 - 132209.6", "132209.6 - 148610.8", "148610.8 - 165012.0"], "data": [177, 7, 1, 1, 1, 1, 0, 1, 0, 1]}, "label": "Total CPI-Adjusted Cost (Millions of Dollars)", "count": 10, "min": 1000.0, "max": 165012.0}, {"values": {"label": ["0.0 - 298.1", "298.1 - 596.2", "596.2 - 894.3", "894.3 - 1192.4", "1192.4 - 1490.5", "1490.5 - 1788.6", "1788.6 - 2086.7", "2086.7 - 2384.8", "2384.8 - 2682.9", "2682.9 - 2981"], "data": [186, 2, 0, 0, 0, 0, 1, 0, 0, 1]}, "label": "Deaths", "count": 10, "min": 0.0, "max": 2981}, {"values": {"label": ["California has again been impacted by a damaging and costly wildfire season. Of note, the Medincino Complex Fire was the largest wildfire on record in California burning over 450,000 acres while the Carr Fire in Northern California damaged or destroyed over 1,500 homes and businesses. Several other Western states (OR, WA, UT, WY, ID, MT, CO) have also had active and damaging wildfire seasons. In total, over 7.7 million acres has burned across the U.S. during the first 9 months of 2018, which is well above the 10-year average (2008-2017) of 5.9 million acres for the January-September period.", "Drought conditions were present across numerous Southwestern and Plains states (TX, OK, KS, MO, CO, NM, AZ, UT). The most extreme drought conditions continue to persist across the Four Corners region of the Southwest. The agriculture sector has been impacted across the affected states including damage to field crops from lack of rainfall. Ranchers have also be forced to sell-off livestock early in some regions due to high feeding costs.", "\"Hurricane Florence was a large and very slow moving hurricane that produced extreme rainfall across eastern North Carolina (up to 35.93\"\") and South Carolina (up to 23.81\"\")", "Severe hail storms cause golf ball to baseball-sized hail and widespread damage in many areas from northern Denver to Boulder and Fort Collins. Many homes, businesses and vehicles were impacted..", "Large-hail impacts highly-populated area of the Dallas-Ft. Worth metroplex. Golfball to baseball-sized hail damages many homes, vehicles and businesses.", "Severe storm damage across many Central states including TX, KS, CO, OK, MO, IL, IN, IA and OH. This was followed by a derecho event across the Northeastern states of MD, NJ, NY, PA, VA, WV, MA and CT that caused widespread high wind damage. Also, there were one dozen tornadoes reported across PA, NY and CT causing further damage.", "Numerous central states (KS, NE, OK, TX, NM, MO, IA, IL, IN, OH, WI) were impacted by large hail and tornadoes. Several northeastern states including NY, PA and VT were also impacted by high wind damage from severe storms.", "Tornadoes and severe storms with large hail cause widespread damage across many Southern and Eastern states (AR, FL, GA, LA, MD, MI, MS, MO, NJ, NY, NC, PA, SC, TX, VA) over a multi-day period. There were over 70 confirmed tornadoes largely clustered in Louisiana, Mississippi, North Carolina and Virginia. This same system also caused winter storm impacts of high wind and ice accumulation in northeastern states.", "A potent severe storm system caused over 20 tornadoes across Alabama and also widespread hail damage from Texas to Florida. Most notably this system produced an EF-3 tornado that caused extensive damage in Jacksonville, Alabama and across the campus of Jacksonville State University.", "Powerful Nor'easter impacted many Northeastern states including MD, MA, NH, NJ, NY, PA, CT, DE, RA and VA. Widespread damage resulted from the combination of high winds, heavy snow and heavy coastal erosion.", "A Nor'easter caused damage across many Northeastern states including MA, NJ, NY, CT, ME, NH, PA, MD, RI, SC, TN, VA, NC and GA.", "A historic firestorm damages or destroys over 15,000 homes, businesses and other structures across California in October. The combined destruction of the Tubbs, Atlas, Nuns and Redwood Valley wildfires represent the most costly wildfire event on record, also causing 44 deaths. Extreme wildfire conditions in early December also burned hundreds of homes in Los Angeles. Numerous other wildfires across many western and northwestern states burn over 9.8 million acres exceeding the 10-year annual average of 6.5 million acres. Montana in particular was affected by wildfires that burned in excess of 1 million acres. These wildfire conditions were enhanced by the preceding drought conditions in several states.", "Extreme drought causes extensive impacts to agriculture in North Dakota, South Dakota and Montana. Field crops including wheat were severely damaged and the lack of feed for cattle forced ranchers to sell off livestock. This drought has also contributed to the increased potential for severe wildfires.", "Category 4 hurricane made landfall in southeast Puerto Rico after striking the U.S. Virgin Island of St. Croix. Maria's high winds caused widespread devastation to Puerto Rico's transportation, agriculture, communication and energy infrastructure. Extreme rainfall up to 37 inches caused widespread flooding and mudslides across the island. The interruption to commerce and standard living conditions will be sustained for a long period, as much of Puerto Rico's infrastructure is rebuilt. Maria tied Hurricane Wilma (2005) for the most rapid intensification, strengthening from tropical depression to a category 5 storm in 54 hours. Maria's landfall at Category 4 strength gives the U.S. a record three Category 4+ landfalls this year (Maria, Harvey, and Irma). Maria was one of the deadliest storms to impact the U.S., with numerous indirect deaths in the wake of the storm's devastation.", "Category 4 hurricane made landfall at Cudjoe Key, Florida after devastating the U.S. Virgin Islands - St John and St Thomas - as a category 5 storm. The Florida Keys were heavily impacted, as 25% of buildings were destroyed while 65% were significantly damaged. Severe wind and storm surge damage also occurred along the coasts of Florida and South Carolina. Jacksonville, FL and Charleston, SC received near-historic levels of storm surge causing significant coastal flooding. Irma maintained a maximum sustained wind of 185 mph for 37 hours, the longest in the satellite era. Irma also was a category 5 storm for longer than all other Atlantic hurricanes except Ivan in 2004.", "Category 4 hurricane made landfall near Rockport, Texas causing widespread damage. Harvey's devastation was most pronounced due to the large region of extreme rainfall producing historic flooding across Houston and surrounding areas. More than 30 inches of rainfall fell on 6.9 million people, while 1.25 million experienced over 45 inches and 11,000 had over 50 inches, based on 7-day rainfall totals ending August 31. This historic U.S. rainfall caused massive flooding that displaced over 30,000 people and damaged or destroyed over 200,000 homes and businesses.", "Severe hail and high wind damage impacting Nebraska, Illinois and Iowa. More than one dozen tornadoes touched down across parts of Iowa, in addition to other storm damage.", "Severe hail, high winds and numerous tornadoes impact many states over several days including WY, TX, NE, KS, MO, IA, IL, PA, VA, NY.", "Severe hail and high winds cause considerable damage across Minnesota and Wisconsin. The Minneapolis metro area in particular was damaged from large, destructive hail impacting many buildings and vehicles. This damage is comparable to the May 15, 1998 Minnesota hail storm that was also very costly.", "Hail storm and wind damage impacting several states including CO, OK, TX, NM, MO. The most costly impacts were in the Denver metro region where baseball-sized hail caused the most expensive hail storm in Colorado history, with insured losses exceeding 2.2 (2.3) billion.", "A period of heavy rainfall up to 15 inches over a multi-state region in the Midwest caused historic levels of flooding along many rivers. The flooding was most severe in Missouri, Arkansas and southern Illinois where levees were breached and towns were flooded. There was widespread damage to homes, businesses, infrastructure and agriculture. Severe storms also caused additional impacts during the flooding event across a number of central and southern states.", "Large hail and high winds in Texas north of the Dallas metro region caused widespread damage to structures and vehicles. Severe storms also caused damage across several other states (OK, TN, KY, MS, AL) due to the combination of high winds, hail and tornadoes.", "Severe freeze heavily damaged fruit crops across several southeastern states (SC, GA, NC, TN, AL, MS, FL, KY, VA). Mid-March freezes are not climatologically unusual in the Southeast, however many crops were blooming 3+ weeks early due to unusually warm temperatures during the preceding weeks. Damage was most severe in Georgia and South Carolina. Crops most impacted include peaches, blueberries, strawberries and apples, among others.", "Tornado outbreak and wind damage across many Midwestern states (AR, IA, IL, KS, MI, MN, MO, NE, NY, OH, WI). Missouri and Illinois were impacted by numerous tornadoes while Michigan and New York were affected by destructive, straight-line winds following the storm system. Nearly one million customers lost power in Michigan alone due to sustained high winds, which affected several states from Illinois to New York.", "Over 70 tornadoes developed during a widespread outbreak across many central and southern states causing significant damage. There was also widespread straight-line wind and hail damage. This was the second largest tornado outbreak to occur early in 2017.", "Heavy, persistent rainfall across northern and central California created substantial property and infrastructure damage from flooding, landslides and erosion. Notable impacts include severe damage to the Oroville Dam spillway, which caused a multi-day evacuation of 188,000 residents downstream. Excessive rainfall also caused flood damage in the city of San Jose, as Coyote Creek overflowed its banks and inundated neighborhoods forcing 14,000 residents to evacuate.", "High wind damage occurred across southern California near San Diego followed by 79 confirmed tornadoes during an outbreak across many southern states including AL, FL, GA, LA, MS, SC and TX. This was the 3rd most tornadoes to occur in a single outbreak during a winter month (Dec.-Feb.) for records going back to 1950.", "Western and Southern states experienced an active wildfire season with over 5.0 million acres burned nationally. Most notable was the firestorm that impacted Gatlinburg, Tennessee with hurricane-force wind gusts in extremely dry conditions creating volatile wildfire behavior. These wildfires destroyed nearly 2,500 structures and caused 14 fatalities. The drought conditions in many areas of the Southeast and California worsened the wildfire potential.", "California's 5-year drought persisted during 2016 while new areas of extreme drought developed in states across the Northeast and Southeast. The long-term impacts of the drought in California have damaged forests where 100+ million trees have perished and are a public safety hazard. The agricultural impacts were reduced in California as water prices and crop fallowing declined. However, agricultural impacts developed in Northeast and Southeast due to stressed water supplies.", "Hurricane Matthew paralleled the Southeast coast from Florida to North Carolina causing widespread damage from wind, storm surge and inland flooding. The most costly impacts were due to historic levels of river flooding in eastern North Carolina where 100,000 homes, businesses and other structures were damaged. This inland flooding was comparable to Hurricane Floyd (1999) that also impacted eastern North Carolina. Matthew narrowly missed landall on Florida's east coast as a powerful category 4 storm.", "A historic flood devastated a large area of southern Louisiana resulting from 20 to 30 inches of rainfall over several days. Watson, Louisiana received an astounding 31.39 inches of rain from the storm. Two-day rainfall totals in the hardest hit areas have a 0.2% chance of occurring in any given year: a 1 in 500 year event. More than 30,000 people were rescued from the floodwaters that damaged or destroyed over 50,000 homes, 100,000 vehicles and 20,000 businesses. This is the most damaging U.S. flood event since Superstorm Sandy impacted the Northeast in 2012.", "Severe storms across the Rockies and Northeastern states (CO, WY, VA, MD, PA, NJ, NY) caused large hail and high wind damage. Storm damage in Colorado was the most costly due to hail.", "Torrential rainfall caused destructive flooding through many West Virginia towns, damaging thousands of homes and businesses and causing considerable loss of life. Over 1,500 roads and bridges were damaged or destroyed making the impact on infrastructure comparable to the historic 2013 Colorado flood. The storm system also produced numerous tornadoes causing damage across several Ohio Valley states.", "Sustained period of severe thunderstorms and tornadoes affecting several states including Montana, Colorado, Kansas, Missouri and Texas. The most concentrated days for tornado development were on May 22 and 24. Additional damage was created by straight-line high wind and hail damage.", "Tornadoes and severe storms cause widespread damage across the Plains and Central states (NE, MO, TX, OK, KS, CO, IL, KY, TN) over a multi-day period. The damage from tornadoes and high wind was most costly in Nebraska and Missouri.", "Large outbreak of tornadoes affects numerous states across the South and Southeast. Additional damage also from large hail and straight-line wind during the multi-day thunderstorm event.", "A period of extreme rainfall up to 17 inches created widespread urban flooding in Houston and surrounding suburbs. Thousands of homes and businesses were damaged and more than 1,800 high water rescues were conducted. This represents the most widespread flooding event to affect Houston since Tropical Storm Allison in 2001.", "Widespread severe hail damage across north and central Texas including the cities of Plano, Wylie, Frisco, Allen and San Antonio. The damage in San Antonio was particularly severe as the National Weather Service verified reports of hail size reaching 4.5 inches in diameter. This ranks as one of the most costly hail events to affect the United States.", "Large hail and strong winds caused considerable damage in heavily populated areas of north Texas. This damage was most notable in the cities of Dallas, Fort Worth and Plano.", "Severe hail impacts the Fort Worth and Arlington metro region in Texas. Additional large hail and high wind damage occurred in other locations of Texas, Louisiana and Mississippi.", "Multiple days of heavy rainfall averaging 15 to 20 inches led to widespread flooding along the Sabine River basin on the Texas and Louisiana border. This prompted numerous evacuations, high-water rescues and destruction, as more than 1,000 homes and businesses were damaged or destroyed.", "Early outbreak of tornadoes and severe weather across many southern and eastern states including (AL, CT, FL, GA, LA, MA, MD, MS, NC, NJ, NY, PA, SC, TX, VA). There were at least 50 confirmed tornadoes causing widespread damage.", "Drought conditions were present across numerous western states (CA, NV, OR, WA, ID, MT, UT, AZ) with the most severe conditions continuing to plague California for all of 2015. The agriculture sector was again impacted by a lack of rainfall resulting in hundreds of thousands of acres of farmland remaining fallow and requiring excess groundwater pumping to irrigate existing agriculture interests. Wildfire conditions were further enhanced by the ongoing drought. California experienced extensive damage from both drought and wildfire impacts. Drought conditions did improve dramatically across Texas and Oklahoma, in the form of several major flood events.", "A powerful storm system packing unseasonably strong tornadoes caused widespread destruction in the Dallas metropolitan region, damaging well over 1,000 homes and businesses. This same potent system also produced intense rainfall over several Midwestern states triggering historic flooding that has approached or broken records at river gauges in several states (MO, IL, AR, TN, MS, LA). The flooding has overtopped levees and caused damage in numerous areas. This historic storm also produced high wind, snow and ice impacts from New Mexico through the Midwest and into New England. Overall, the storm caused at least 50 deaths from the combined impact of tornadoes, flooding and winter weather.", "Wildfires burned over 10.1 million acres across the U.S. in 2015, surpassing 2006 for the highest annual total of U.S. acreage burned since record-keeping began in 1960. The most costly wildfires occurred in California where over 2,500 structures were destroyed due to the Valley and Butte wildfires with the insured losses alone exceeding 1.0 (1.1) billion. The most extensive wildfires occurred in Alaska where over 5 million acres burned within the state. There was extensive burnt acreage across other western states, most notably (OR, WA, ID, MT, ND, CO, WY, TX).", "Historic levels of flooding impacted South Carolina causing widespread damage to many homes, businesses, public buildings and infrastructure. This interrupted commerce and closed major transportation corridors (such as I-95) for weeks as rivers slowly receded. Locally extreme rainfall totals exceeding 20-inches were common resulting from the convergence of a powerful low pressure system / frontal boundary and copious moisture from Hurricane Joaquin in the Atlantic.", "Severe storms across numerous Central and Northeast states (CO, CT, IA, IL, MD, MI, NJ, NY, PA, SD, VA, WI) with widespread hail and high wind damage.", "A slow-moving system caused tremendous rainfall and subsequent flooding to occur in Texas and Oklahoma. The Blanco river in Texas swelled from 5 feet to a crest of more than 40 feet over several hours causing considerable property damage and loss of life. The city of Houston also experienced flooding which resulted in hundreds of high-water rescues. The damage in Texas alone exceeded 1.0 (1.1) billion. There was also damage in other states (KS, CO, AR, OH, LA, GA, SC) from associated severe storms.", "Tornado outbreak across the Southern Plain states (IA, KS, NE, OK, CO, SD, TX) with 122 tornadoes. The most costly damage occurred across Texas and Oklahoma.", "Severe storms across the South and Southeastern states (AL, AR, FL, GA, KS, LA, MS, NC, OK, SC, TN, TX). High winds and severe hail created the most significant damage in Texas.", "Severe storms across the Midwest and Ohio Valley including the states (AR, IA, IL, IN, KS, KY, MI, MO, NC, OH, OK, PA, TN, TX, WI, WV). Large hail and high winds created the most damage across Missouri and Illinois.", "A large winter storm and associated cold wave impacted many central, eastern and northeastern states (CT, DE, GA, IL, KY, MA, MD, ME, MI, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA). The city of Boston was particularly impacted as feet of snow continued to accumulate causing load-stress on buildings and clogging transportation corridors. Total, direct losses in Massachusetts alone exceed 1.0 (1.1) billion for this event, with considerable damage in many other states.", "Historic drought conditions affected the majority of California for all of 2014 making it the worst drought on record for the state. Surrounding states and parts of Texas, Oklahoma and Kansas also experienced continued severe drought conditions. This is a continuation of drought conditions that have persisted for several years.", "Severe storms across the Rockies and Plains states (CO, KS, TX). Large hail and high winds created significant damage across eastern Colorado and Texas, particularly in the Dallas metro area.", "Heavy rainfall in excess of 5 inches caused significant flooding in cities across Michigan damaging thousands of cars, business, homes and other infrastructure. Flooding also occurred across Maryland and New York's Long Island, as the slow-moving storm system delivered 24-hour rainfall exceeding 6 and 12 inches, respectively, creating more flood damage. Islip, NY received 13.57 inches of rain over a 24-hour period on Aug 12-13 setting a new 24-hour precipitation record for New York.", "Severe storms across the Rockies and Central Plains states (NE, KS, WY, IA, AR). Wind gusts exceeding 90 mph and baseball to softball sized hail caused severe damage to structures and vehicles in central and eastern Nebraska.", "Severe storms across the Rockies, Midwest and Eastern states (CO, MT, IA, IL, IN, OH, SC, VA, PA, DE, NY) with the most costly damage in Colorado, Illinois and Pennsylvania.", "Tornado outbreak across the Midwest, Southeast and Northeast states (AL, AR, DE, FL, GA, KS, MD, MO, MS, NC, NJ, NY, PA, TN, VA) with 83 confirmed tornadoes. Mississippi had its 3rd greatest number of tornadoes reported for any day since 1950. Torrential rainfall in the Florida panhandle also caused major flooding, as Pensacola set new 1-day and 2-day precipitation records of 15.55 and 20.47 inches, respectively. Flooding rains were also reported in coastal Alabama, as Mobile received 11.24 inches of rain, the third greatest calendar day rainfall total for the city.", "Severe storms across the Plains states (IL, KS, MO, TX) causing considerable hail and wind damage in Texas.", "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "The 2013 drought slowly dissipated from the historic levels of the 2012 drought, as conditions improved across many Midwestern and Plains states. However, moderate to extreme drought did remain or expand into western states (AZ, CA, CO, IA, ID, IL, KS, MI, MN, MO, ND, NE, NM, NV, OK, OR, SD, TX, UT, WA, WI, WY). In comparison to 2011 and 2012 drought conditions the US experienced only moderate crop losses across the central agriculture states.", "Late-season outbreak of tornadoes and severe weather over the Ohio Valley (IL, IN, KY, MI, MO, OH) with 70 confirmed tornadoes. Most severe impacts occurred across Illinois and Indiana.", "A stalled frontal boundary over Colorado led to record rainfall, as some areas received > 15 inches over several days. This resulted in historic flooding across numerous cities and towns. Destruction of residences, businesses and transportation infrastructure was widespread.", "Severe weather and large hail causes considerable damage across Minnesota and Wisconsin.", "Outbreak of tornadoes and severe weather over the Midwest, Plains and Northeast (IL, IN, KS, MO, NY, OK, TX) with 92 confirmed tornadoes including the deadly tornado that struck El Reno, OK. There was also significant damage resulting from hail and straight-line wind.", "Outbreak of tornadoes and severe weather over the Midwest, Plains and Eastern states (GA, IA, IL, KS, MO, NY, OK, TX) with 59 confirmed tornadoes including the deadly tornado that impacted Moore, OK. Many destructive tornadoes remained on the ground for an extended time.", "A slow-moving storm system created rainfall totals of 5 to 10 inches across northern and central Illinois including the Chicago metro. This resulted in damage to many homes and businesses. There was also severe weather damage from wind and hail across Indiana and Missouri.", "Severe weather across the Midwest and Plains states (IN, KS, MO, NE) with a total of 26 confirmed tornadoes. Considerable damage resulting from hail and straight-line wind.", "Severe weather over the Southeast (MS, AL, GA, TN) with 10 confirmed tornadoes. Considerable damage resulting from large hail and straight-line wind.", "The 2012 drought is the most extensive drought to affect the U.S. since the 1930s. Moderate to extreme drought conditions affected more than half the country for a majority of 2012. The following states were affected: CA, NV, ID, MT, WY, UT, CO, AZ, NM, TX, ND, SD, NE, KS, OK, AR, MO, IA, MN, IL, IN, GA. Costly drought impacts occurred across the central agriculture states resulting in widespread harvest failure for corn, sorghum and soybean crops, among others. The associated summer heatwave also caused 123 direct deaths, but an estimate of the excess mortality due to heat stress is still unknown.", "Wildfires burned over 9.2 million acres across the U.S. in 2012. This is the 3rd highest annual total since the year 2000. The most damaging wildfires occurred in the western states (CO, ID, WY, MT, CA, NV, OR, WA). Colorado experienced the most costly wildfires (e.g., Waldo Canyon fire) where several hundred residences were destroyed.", "Extensive damage across several northeastern states (MD, DE, NJ, NY, CT, MA, RI) due to high wind and coastal storm surge, particularly NY and NJ. Damage from wind, rain and heavy snow also extended more broadly to other states (NC, VA, WV, OH, PA, NH), as Sandy merged with a developing Nor'easter. Sandy's impact on major population centers caused widespread interruption to critical water / electrical services and also caused 159 deaths (72 direct, 87 indirect). Sandy also caused the New York Stock Exchange to close for two consecutive business days, which last happened in 1888 due to a major winter storm.", "Category 1 hurricane made landfall over Louisiana. Isaac's slow motion and large size led to a large storm surge and flooding rains. This created damage across several southeastern states (LA, MS, AL, FL) including 9 deaths (5 direct, 4 indirect).", "Sustained outbreak of thunderstorms / high winds from a strong derecho event over the central, eastern, and northeastern states (IL, IN, KY, OH, WV, SC, NC, VA, MD, DC, NJ).", "Severe storms and damaging hail over several states (CO, NM, TX) with 25 confirmed tornadoes. Colorado experienced over 1.0 (1.1) billion in damage due to hail.", "Severe storms over the southern plains, midwest and northeast (TX, OK, KS, MN, PA, NY) with 27 confirmed tornadoes. Significant damage also from severe hail and straight-line winds.", "Severe weather over the midwest and Ohio Valley (TX, OK, KS, MO, IL, IN, KY) with 38 confirmed tornadoes. Considerable damage resulting from hail.", "Outbreak of tornadoes and severe weather over the midwest (OK, KS, NE, IA) with 98 confirmed tornadoes including many tornadoes that remained on the ground for an extended time - traveling tens of miles.", "Outbreak of tornadoes across the greater Dallas-Ft. Worth metropolitan area. Several moderate strength tornadoes (EF-2 and EF-3) affected towns in this area with a total of 22 confirmed tornadoes.", "Outbreak of tornadoes and severe weather over the southeast and Ohio Valley (AL, GA, IN, OH, KY, TN) with 75 confirmed tornadoes.", "Continued drought conditions and periods of extreme heat provided conditions favorable for a series of historic wildfires across Texas, New Mexico and Arizona. The Bastrop Fire in Texas was the most destructive fire in Texas history destroying over 1,500 homes. The Wallow Fire consumed over 500,000 acres in Arizona making it the largest on record in Arizona. The Las Conchas Fire in New Mexico was also the state's largest wildfire on record scorching over 150,000 acres while threatening the Los Alamos National Laboratory. Over 3 million acres have burned across Texas this wildfire season.", "Wind and flood damage across the southeast (LA, MS, AL, GA, TN) but considerably more damage from record flooding across the northeast (PA, NY, NJ, CT, VA, MD). Pennsylvania and New York were most affected.", "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "Category 1 hurricane made landfall over coastal NC and moved northward along the Mid-Atlantic Coast (NC, VA, MD, NJ, NY, CT, RI, MA, VT) causing torrential rainfall and flooding across the Northeast. Wind damage in coastal NC, VA, and MD was moderate with considerable damage resulting from falling trees and power lines, while flooding caused extensive flood damage across NJ, NY, and VT. Over seven million homes and businesses lost power during the storm. Numerous tornadoes were also reported in several states further adding to the damage.", "Severe weather impacts the states IA, KS, MO, NE, SD across the Midwest and Southeast.", "An outbreak of tornadoes, hail, and high wind caused damage east of the Rockies and across the central plains (CO, WY, IA, IL, MI, MN, OH).", "Melting of an above-average snow pack across the Northern Rocky Mountains combined with above-average precipitation caused the Missouri and Souris Rivers to swell beyond their banks across the Upper Midwest (MT, ND, SD, NE, IA, KS, MO). An estimated 11,000 people were forced to evacuate Minot, North Dakota due to the record high water level of the Souris River, where 4,000 homes were flooded. Numerous levees were breached along the Missouri River, flooding thousands of acres of farmland.", "Outbreak of tornadoes over central states (OK, TX, KS, NE, MO, IA, IL) with an estimated 81 tornadoes. Additional wind and hail damage across the Southeast (TN, GA, NC, SC).", "Persistent rainfall (nearly 300 percent normal precipitation amounts in the Ohio Valley) combined with melting snowpack caused historical flooding along the Mississippi River and its tributaries. Examples of economic damage include: 500 (570.0) million to agriculture in Arkansas; 320 (364.8) million in damage to Memphis, Tennessee; 800 (912.0) million to agriculture in Mississippi; 317 (361.4) million to agriculture and property in Missouri's Birds Point-New Madrid Spillway; 80 (91.2) million for the first 30 days of flood fighting efforts in Louisiana.", "Outbreak of tornadoes over central and southern states (MO, TX, OK, KS, AR, GA, TN, VA, KY, IN, IL, OH, WI, MN, PA) with an estimated 180 tornadoes. Notably, an EF-5 tornado struck Joplin, MO resulting in at least 160 deaths, making it the deadliest single tornado to strike the U.S. since modern tornado record keeping began in 1950.", "Outbreak of tornadoes over central and southern states (AL, AR, LA, MS, GA, TN, VA, KY, IL, MO, OH, TX, OK) with an estimated 343 tornadoes. The deadliest tornado of the outbreak, an EF-5, hit northern Alabama, killing 78 people. Several major metropolitan areas were directly impacted by strong tornadoes including Tuscaloosa, Birmingham, and Huntsville in Alabama and Chattanooga, Tennessee, causing the estimated damage costs to soar.", "Dozens of tornadoes and severe storms affect the states AR, IL, IN, KY, MO, OH, TN, TX across the Ohio Valley and South.", "Outbreak of tornadoes over central and southern states (OK, TX, AR, MS, AL, GA, NC, SC, VA, PA) with an estimated 177 tornadoes.", "Outbreak of tornadoes over central and southern states (NC, SC, TN, AL, TX, OK, KS, IA, WI) with an estimated 59 tornadoes.", "Outbreak of tornadoes over central and southern states (KS, MO, IA, IL, WI, KY, GA, TN, NC, SC) with an estimated 46 tornadoes.", "A large winter storm impacted many central, eastern and northeastern states. The city of Chicago was brought to a virtual standstill as between 1 and 2 feet of snow fell over the area.", "An unusual series of severe thunderstorms across Arizona produced numerous tornadoes and widespread, severe hail damage. Over one-hundred buildings were damaged or destroyed by tornadoes while thousands of automobiles and buildings were damaged by large hail across Phoenix and surrounding cities.", "Severe storms and flooding affect the states IA, IL, MD, NY, PA, WI across the Midwest and Northeast.", "Severe storms cause high wind and hail damage across numerous states including CO, NM, KS, OK, IL, IN, GA, SC and NC.", "An outbreak of tornadoes, hail, and severe thunderstorms occurred across Oklahoma, Kansas, and Texas in mid-May. Oklahoma was hardest hit with > 1.5 (1.7) billion in damages.", "Flooding, hail, tornadoes, and severe thunderstorms occurred across many Southern states (TN, AR, AL, KY, MS, GA) on April 30-May 2. Flooding in the Nashville, TN area alone contributed > 1.0 (1.2) billion in damages. Western and Middle Tennessee were hardest hit with local rainfall amounts of 18-20 inches to the south and west of Greater Nashville.", "Heavy rainfall over portions of the Northeast in late March caused extensive flooding across several states (RI, CT, MA, NJ, NY, PA). The event caused the worst flooding in Rhode Island's history.", "Drought conditions occurred during much of the year across parts of the Southwest, Great Plains, and southern Texas causing agricultural losses in numerous states (TX, OK, KS, CA, NM, AZ). The largest agriculture losses occurred in TX and CA.", "\"Residual and sustained drought conditions across western and south-central states resulted in thousands of wildfires. Most affected states include CA, AZ, NM, TX, OK, and UT. National acreage burned exceeding 5.9 million. Over 200 homes and structures destroyed in the California \"\"Station\"\" fire alone.\"", "Severe hail impacts Colorado. Jefferson County was most affected with hail at least 8 inches deep. The hail damage from this storm was comparable to the July 11, 1990 Colorado hail storm.", "Sustained outbreak of thunderstorms and high winds from a strong derecho event over the central, southern, and eastern states (TX, OK, MO, NE, KS, AR, AL, MS, TN, NC, SC, KY, PA).", "Outbreak of tornadoes, hail and severe thunderstorms over the south and southeastern states (AL, AR, GA, KY, MO, SC, TN) with 85 confirmed tornadoes.", "Outbreak of tornadoes over central and southern states (NE, KS, OK, IA, TX, LA, MS, AL, GA, TN, KY) with 56 tornadoes confirmed.", "Complex of severe thunderstorms and high winds across the region (TN, KY, OK, OH, VA, WV, PA).", "Severe drought and heat caused agricultural losses across a large portion of the U.S. Record low lake levels also occurred in areas of the southeast. The states impacted include AL, AR, CA, CO, GA, ID, IN, KS, KY, MD, MN, MS, MT, NC, ND, NJ, NM, OH, OK, OR, SC, TN, TX, UT, VA, WA and WI.", "Drought conditions across numerous western, central and southeastern states (AK, AZ, CA, NM, ID, UT, MT, NV, OR, WA, CO, TX, OK, NC, FL ) resulted in thousands of wildfires; national acreage burned exceeding 5.2 million acres (mainly in the west) and over 1,000 homes and structures destroyed in California fires alone.", "Category 2 hurricane makes landfall in Texas, as the largest (in size) Atlantic hurricane on record, causing considerable storm surge in coastal TX and significant wind and flooding damage in TX, LA, AR, TN, IL, IN, KY, MO, OH, MI and PA. Severe gasoline shortages occurred in the southeast U.S. due to damaged oil platforms, storage tanks, pipelines and off-line refineries.", "Category 2 hurricane makes landfall in Louisiana causing significant wind, storm surge, and flooding damage in AL, AR, LA, and MS.", "Category 2 hurricane makes landfall in southern Texas causing considerable wind and flooding damage in TX and NM.", "Heavy rain and flooding caused significant agricultural loss and property damage in IA, IL, IN, MO, MN, NE, and WI with IA being hardest hit with widespread rainfall totals ranging from 4 to over 16 inches.", "An outbreak of tornadoes and thunderstorms over the Midwest/Mid-Atlantic states (IA, IL, IN, KS, NE, MI, MN, MO, OK, WI, MD, VA, WV).", "Outbreak of tornadoes over the Midwest/Ohio Valley regions (IL, IN, IA, KS, MN, NE, OK, WY, CO) with 235 tornadoes confirmed.", "Severe storms affect Arkansas, Oklahoma and Texas across the South.", "Tornadoes and severe weather across Georgia and South Carolina. This includes an EF-2 tornado causing damage to numerous buildings in downtown Atlanta.", "Series of tornadoes and severe thunderstorms across the Southeast and Midwest states (AL, AR, IN, KY, MS, OH, TN, TX) with 87 tornadoes confirmed.", "Severe drought with periods of extreme heat over most of the southeast and portions of the Great Plains, Ohio Valley, and Great Lakes area, resulting in major reductions in crop yields, along with very low stream-flows and lake levels. Includes states of ND, SD, NE, KS, OK, TX, MN, WI, IA, MO, AR, LA, MS, AL, GA, NC, SC, FL, TN, VA, WV, KY, IN, IL, OH, MI, PA, NY.", "Continued drought conditions and high winds over much of the western U.S. (AK, AZ, CA, ID, UT, MT, NV, OR, WA) resulting in numerous wildfires; with national acreage burned exceeding 8.9 million acres (mainly in the west) and over 3,000 homes and structures destroyed in southern California alone.", "\"Flooding, hail, tornadoes, and severe thunderstorms across numerous states (CT, DE, GA, LA, ME, MD, MA, MS, NH, NJ, NY, NC, PA, RI, SC, TX, VT, VA) in mid-April, including 3 \"\"killer\"\" tornadoes.\"", "Widespread severe freeze over much of the east and midwest (AL, AR, GA, IA, IL, IN, KS, KY, MO, MS, NC, NE, OH, OK, SC, TN, VA, WV), causing significant losses in fruit crops, field crops (especially wheat), and the ornamental industry. Temperatures in the teens/20s accompanied by rather high winds nullified typical crop-protection systems.", "Widespread agricultural freeze -- for nearly two weeks in January, overnight temperatures over a good portion of California dipped into the 20s, destroying numerous agricultural crops; with citrus, berry, and vegetable crops most affected.", "Numerous wildfires driven by dry weather and high winds burned over 9.8 million acres, across the western half of the country including Alaska. This is the second highest annual total behind the 10.1 million acres burned in 2015 since record-keeping began in 1960. The most affected states were AK, AZ, CA, CO, FL, ID, MT, NM, NV, OK, OR, TX, WA, WY", "Severe storms cause high wind and hail damage across numerous states including OH, IL, IN, MI, MN and WI.", "Rather severe drought affected crops especially during the spring-summer, centered over the Great Plains region with other areas affected across portions of the south -- including states of ND, SD, NE, KS, OK, TX, MN, IA, MO, AR, LA, MS, AL, GA, FL, MT, WY, CO, NM.", "Severe flooding over portions of the northeast due to several weeks of heavy rainfall, affecting the states of NY, PA, DE, MD, NJ, and VA.", "Tornadoes and severe weather cause significant damage in the states of IA, IL, IN, and WI. The state of Indiana was most affected with over one billion dollars in damage.", "\"Severe weather and numerous tornadoes affecting the states of OK, KS, MO, NE, KY, OH, TN, IN, MS, GA, and AL on April 6-8 with 3 \"\"killer\"\" tornadoes in TN.\"", "Outbreak of tornadoes over portions of the midwest and south during a week-long period-affecting the states of AL, AR, KY, MS, TN, TX, IN, KS, MO, and OK.", "Category 3 hurricane hits SW Florida resulting in strong damaging winds and major flooding across southeastern Florida. Prior to landfall, Wilma as a Category 5 recorded the lowest pressure (882 mb) ever recorded in the Atlantic basin.", "Category 3 hurricane hits Texas-Louisiana border coastal region, creating significant storm surge and wind damage along the coast, and some inland flooding in the FL panhandle, AL, MS, LA, AR, and TX. Prior to landfall, Rita reached the third lowest pressure (897 mb) ever recorded in the Atlantic basin.", "Rather severe localized drought causes significant crop losses (especially for corn and soybeans) in the states of AR, IL, IN, MO, OH, and WI.", "Category 3 hurricane initially impacts the U.S. as a Category 1 near Miami, FL, then as a strong Category 3 along the eastern LA-western MS coastlines, resulting in severe storm surge damage (maximum surge probably exceeded 30 feet) along the LA-MS-AL coasts, wind damage, and the failure of parts of the levee system in New Orleans. Inland effects included high winds and some flooding in the states of AL, MS, FL, TN, KY, IN, OH, and GA.", "Category 3 hurricane makes landfall in western Florida panhandle resulting in storm surge and wind damage along the FL and AL coasts, along with scattered wind and flood damage in GA and MS.", "Severe storms cause widespread hail damage across numerous states including TX, AL, MS, GA, FL, NC and VA.", "Category 3 hurricane makes landfall in east-central Florida, causing considerable wind, storm surge, and flooding damage in FL, with some flood damage also in the states of GA, SC, NC, VA, MD, DE, NJ, PA, and NY. Puerto Rico also affected.", "Category 3 hurricane makes landfall on Gulf coast of Alabama, with significant wind, storm surge, and flooding damage in coastal AL and FL panhandle, along with wind/flood damage in the states of GA, MS, LA, SC, NC, VA, WV, MD, TN, KY, OH, DE, NJ, PA, and NY.", "Category 2 hurricane makes landfall in east-central Florida, causing significant wind, storm surge, and flooding damage in FL, along with considerable flood damage in the states of GA, SC, NC, and NY due to 5-15 inch rains.", "Category 4 hurricane makes landfall in southwest Florida, resulting in major wind and some storm surge damage in FL, along with some damage in the states of SC and NC.", "Severe storms including tornadoes and hail cause damage across the Midwest, South, Southeast and Northeast regions. The states impacted include IA, IL, IN, KY, MI, MO, NC, NE, NY, OK, OH and WI.", "Dry weather, high winds, and resulting wildfires in Southern California burned over 3,700 homes. Nearly 4.0 million acres burned across numerous western states including Alaska.", "2003 drought across western and central portions of the U.S. with losses to agriculture. The states impacted include AZ, CO, IA, ID, IL, KS, MI, MN, MO, MT, ND, NE, NM, OR, SD, WA and WI.", "Category 2 hurricane makes landfall in eastern North Carolina, causing considerable storm surge damage along the coasts of NC, VA, and MD, with wind damage and some flooding due to 4-12 inch rains in NC, VA, MD, DE, WV, NJ, NY, and PA.", "Severe storms impact states across the South, Southeast, Midwest and Northeast regions. The states most impacted include AR, AL, MS, GA, FL, SC, TN, KY, MI, NY, OH, PA and VT.", "Severe storms affect the states IA, IL, IN, MI, MN, OH, VA, WV across the Midwest and Plains.", "Numerous tornadoes over the midwest, Mississippi valley, OH/TN valleys, and portions of the southeast, with a modern record one-week total of approximately 400 tornadoes reported", "Severe storms and large hail over the southern plains and lower MS valley, with Texas hardest hit, and much of the monetary losses due to hail.", "Major wildfires over 11 western states from the Rockies to the west coast due to drought and periodic high winds, with over 7.1 million acres burned.", "Moderate to extreme drought over large portions of 30 states, including the western states, the Great Plains, and much of the eastern U.S.", "Category 1 hurricane makes landfall in Louisiana after causing damage across Saint Lucia, Jamaica, Haiti and Cuba.", "Numerous tornadoes and widespread hail damage over the Central and Eastern states including NC, GA, VA, TX, AR, MO, MS, TN, IL, IN, KY, PA, MD, NY, OH, WV, and KS.", "The persistent remnants of Tropical Storm Allison produce rainfall amounts of 30-40 inches in portions of coastal Texas and Louisiana, causing severe flooding especially in the Houston area, then moves slowly northeastward; fatalities and significant damage reported in TX, LA, MS, FL, VA, and PA", "Storms, tornadoes, and hail in the states of TX, OK, KS, NE, IA, MO, IL, IN, WI, MI, OH, KY, WV, and PA, over a 6-day period.", "Western/Central/Southeast Drought/Heatwave. The states impacted include AZ, AL, AR, CA, CO, FL, GA, IA, KS, LA, MS, MT, NE, NM, OK, OR, SC, TN, and TX.", "Heavy rainfall up to 15 inches affected south Florida surrounding Miami that resulted in severe flooding that damaged thousands of homes and businesses. There was also several hundred million in damage done to agriculture.", "Severe wildfire season in the western states due to drought and frequent winds, with nearly 7 million acres burned.", "Large, category 2 hurricane makes landfall in eastern NC, causing 10-20 inch rains in 2 days, with severe flooding in NC and some flooding in SC, VA, MD, PA, NY, NJ, DE, RI, CT, MA, NH, and VT.", "Very dry summer and high temperatures, mainly in eastern U.S., with extensive agricultural losses. The states impacted include AL, AR, FL, GA, KY, LA, MD, MS, NC, NJ, OH, SC, TN, VA, WV and PA.", "Outbreak of F4-F5 tornadoes hit the states of Oklahoma and Kansas, along with Texas and Tennessee, Oklahoma City area hardest hit.", "Winter storm affecting the Central and Eastern states including IL, IN, OH, MI, WV, VA, MD, PA, NJ, NY, MA, CT, VT, NH and ME.", "South, Southeast, Midwest, Northeast affected by damaging winter storm", "A severe freeze damaged fruit and vegetable crops in the Central and Southern San Joaquin Valley. Extended intervals of sub 27\u00b0 F temperatures occurred over an 8-day period.", "Severe flooding in southeast Texas from 2 heavy rain events, with 10-20 inch rainfall totals", "Category 2 hurricane strikes Puerto Rico, Virgin Islands, Florida Keys, and Gulf coasts of Louisiana, Mississippi, Alabama, and Florida panhandle, 15-30 inch 2-day rain totals in parts of Alabama and Florida", "Severe drought and heat wave from Texas/Oklahoma eastward to the Carolinas. The states impacted include AL, AR, FL, GA, LA, MS, NC, OK, SC, TN, TX, and VA.", "Category 3 hurricane strikes eastern North Carolina and Virginia, extensive agricultural damage due to winds and flooding, with 10-inch rains in 2 days in some locations.", "Tropical Storm Frances caused extensive flooding in Texas and Louisiana. The rainfall totals from Frances were 10 to 20 inches across eastern Texas into southern Louisiana.", "Severe storms in late May through early June hit the Midwest, North, Northeast, and Southeast", "Very damaging severe thunderstorms with large hail over wide areas of Minnesota", "Tornadoes and flooding cause damage across the West and Southeast. The states impacted include CA, TX, FL, AL, GA, LA, MS, NC and SC.", "Intense ice storm hits Maine, New Hampshire, Vermont, and New York, with extensive forestry losses", "Severe flooding in North Dakota, South Dakota and Minnesota due to heavy spring snow melt. This flooding caused widespread damage to agriculture, infrastructure, homes and businesses.", "Tornadoes and severe flooding hit the states of AR, MO, MS, TN, IL, IN, KY, OH, and WV, with over 10 inches of rain in 24 hours in Louisville.", "Torrential rains (10-40 inches in 2 weeks) and snowmelt produce severe flooding over portions of CA, WA, OR, ID, NV, and MT.", "Category 3 hurricane strikes North Carolina and Virginia, over 10-inch 24-hour rains in some locations and extensive agricultural and other losses.", "Severe drought in agricultural regions of southern plains--Texas and Oklahoma most severely affected", "Very heavy, persistent rains (10-30 inches) and melting snow over OR, WA, ID, and western MT.", "Very heavy snowstorm (1-4 feet) over Appalachians, Mid-Atlantic, and Northeast; followed by severe flooding in parts of same area due to rain and snowmelt.", "Category 3 hurricane strikes Florida panhandle, Alabama, western Georgia, eastern Tennessee, and the western Carolinas, causing storm surge, wind, and flooding damage.", "Category 2 hurricane impacts the U.S. Virgin Islands and Puerto Rico with maximum sustained winds of 110 mph.", "Hurricane Erin impacted Florida as a category 1 hurricane. Most of the damage resulted from heavy rainfall and flooding in Florida, Alabama and Mississippi.", "Torrential rains, hail, and tornadoes across Texas-Oklahoma and southeast Louisiana-southern Mississippi, with Dallas and New Orleans areas (10-25 inch rains in 5 days) hardest hit.", "Frequent winter storms cause 20-70 inch rainfall and periodic flooding across much of California", "Severe wildfire season in the western states due to dry weather conditions. The states most impacted include CA, AZ, OR, WA, CO, UT, NV, NM and TX.", "Torrential rain (10-25 inches in 5 days) and thunderstorms cause flooding across much of southeast Texas", "Remnants of slow-moving Alberto bring torrential 10-25 inch rains in 3 days, widespread flooding and agricultural damage in parts of Georgia, Alabama, and panhandle of Florida.", "Tornadoes and severe storms cause damage in states across the South, Southeast and Midwest. The states impacted include TX, OK, AR, CO, KS, NE, IA, SD, IL, IN, MN and MO."], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Description", "count": 190, "min": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "max": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA)."}, {"values": {"label": ["10001", "10002", " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "10004", "10005", "10006", "10007", "10008", "10009", "10010", "10011", "10012", "10013", "10014", "10015", "10016", "10017", "10018", "10019", "10020", "10021", "10022", "10023", "10024", "10025", "10026", "10027", "10028", "10029", "10030", "10031", "10032", "10033", "10034", "10035", "10036", "10037", "10038", "10039", "10040", "10041", "10042", "10043", "10044", "10045", "10046", "10047", "10048", "10049", "10050", "10051", "10052", "10053", "10054", "10055", "10056", "10057", "10058", "10059", "10060", "10061", "10062", "10063", "10064", "10065", "10066", "10067", "10068", "10069", "10070", "10071", "10072", "10073", "10074", "10075", "10076", "10077", "10078", "10079", "10080", "10081", "10082", "10083", "10084", "10085", "10086", "10087", "10088", "10089", "10090", "10091", "10092", "10093", "10094", "10095", "10096", "10097", "10098", "10099", "10100", "10101", "10102", "10103", "10104", "10105", "10106", "10107", "10108", "10109", "10110", "10111", "10112", "10113", "10114", "10115", "10116", "10117", "10118", "10119", "10120", "10121", "10122", "10123", "10124", "10125", "10126", "10127", "10128", "10129", "10130", "10131", "10132", "10133", "10134", "10135", "10136", "10137", "10138", "10139", "10140", "10141", "10142", "10143", "10144", "10145", "10146", "10147", "10148", "10149", "10150", "10151", "10152", "10153", "10154", "10155", "10156", "10157", "10158", "10159", "10160", "10161", "10162", "10163", "10164", "10165", "10166", "10167", "10168", "10169", "10170", "10171", "10172", "10173", "10174", "10175", "10176", "10177", "10178", "10179", "10180", "10181", "10182", "10183", "10184", "10185", "10186", "10187", "10188", "10189", "10190"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "Event ID", "count": 190, "min": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "max": "10190"}, {"values": {"label": ["0.0 - 18.7", "18.7 - 37.4", "37.4 - 56.1", "56.1 - 74.8", "74.8 - 93.5", "93.5 - 112.2", "112.2 - 130.9", "130.9 - 149.6", "149.6 - 168.3", "168.3 - 187.0"], "data": [21, 19, 19, 18, 19, 19, 18, 19, 19, 19]}, "label": "Disaster_stringindexer_transform", "count": 10, "min": 0.0, "max": 187.0}, {"values": {"label": ["4.0", "3.0", "1.0", "0.0", "5.0", "2.0", "6.0"], "data": [14, 19, 32, 88, 9, 24, 4]}, "label": "Disaster Type_stringindexer_transform", "count": 7, "min": "0.0", "max": "6.0"}, {"values": {"label": ["0.0 - 18.6", "18.6 - 37.2", "37.2 - 55.8", "55.8 - 74.4", "74.4 - 93.0", "93.0 - 111.6", "111.6 - 130.2", "130.2 - 148.8", "148.8 - 167.4", "167.4 - 186.0"], "data": [22, 19, 18, 19, 18, 19, 19, 18, 19, 19]}, "label": "Beginning Date_stringindexer_transform", "count": 10, "min": 0.0, "max": 186.0}, {"values": {"label": ["0.0 - 18.4", "18.4 - 36.8", "36.8 - 55.2", "55.2 - 73.6", "73.6 - 92.0", "92.0 - 110.4", "110.4 - 128.8", "128.8 - 147.2", "147.2 - 165.6", "165.6 - 184.0"], "data": [24, 18, 19, 18, 18, 19, 18, 19, 18, 19]}, "label": "Ending Date_stringindexer_transform", "count": 10, "min": 0.0, "max": 184.0}, {"values": {"label": ["0.0 - 18.9", "18.9 - 37.8", "37.8 - 56.7", "56.7 - 75.6", "75.6 - 94.5", "94.5 - 113.4", "113.4 - 132.3", "132.3 - 151.2", "151.2 - 170.1", "170.1 - 189.0"], "data": [19, 19, 19, 19, 19, 19, 19, 19, 19, 19]}, "label": "Description_stringindexer_transform", "count": 10, "min": 0.0, "max": 189.0}, {"values": {"label": ["0.0 - 18.9", "18.9 - 37.8", "37.8 - 56.7", "56.7 - 75.6", "75.6 - 94.5", "94.5 - 113.4", "113.4 - 132.3", "132.3 - 151.2", "151.2 - 170.1", "170.1 - 189.0"], "data": [19, 19, 19, 19, 19, 19, 19, 19, 19, 19]}, "label": "Event ID_stringindexer_transform", "count": 10, "min": 0.0, "max": 189.0}]}, "selectedFE": [{"transformationsData": [{"feature_label": "Disaster", "transformation_label": "String Indexer"}], "feature": "Disaster", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "Arizona Severe Weather (October 2010)", "max": "Western/Southeast Wildfires (Summer-Fall 2016)", "missing": "0", "distinct": "188"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Disaster"}, {"transformationsData": [{"feature_label": "Disaster Type", "transformation_label": "String Indexer"}], "feature": "Disaster Type", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "Drought", "max": "Winter Storm", "missing": "0", "distinct": "7"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Disaster Type"}, {"transformationsData": [{"feature_label": "Beginning Date", "transformation_label": "String Indexer"}], "feature": "Beginning Date", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "1/1/1995", "max": "9/6/2017", "missing": "0", "distinct": "187"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Beginning Date"}, {"transformationsData": [{"feature_label": "Ending Date", "transformation_label": "String Indexer"}], "feature": "Ending Date", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "1/11/1997", "max": "9/9/2004", "missing": "0", "distinct": "185"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Ending Date"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "190", "mean": "6838.76", "stddev": "17819.57", "min": "1000.0", "max": "165012.0", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "Total CPI-Adjusted Cost (..."}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "Deaths", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "190", "mean": "50.8", "stddev": "256.46", "min": "0", "max": "2981", "missing": "0"}, "updatedLabel": "Deaths"}, {"transformationsData": [{"feature_label": "Description", "transformation_label": "String Indexer"}], "feature": "Description", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "", "stddev": "", "min": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "max": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "missing": "0", "distinct": "190"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Description"}, {"transformationsData": [{"feature_label": "Event ID", "transformation_label": "String Indexer"}], "feature": "Event ID", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "190", "mean": "10095.99", "stddev": "54.72", "min": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1", "max": "10190", "missing": "0", "distinct": "190"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "Event ID"}], "autoFE_flag": false}, "status": "new", "position": {"x": 62, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/transformation/feature-transformation.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "transformation", "text": "Auto FE", "slug": "auto-fe", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10"}, "ManualFE": {"FE": []}, "selectedFE": [], "autoFE_flag": true}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "Total CPI-Adjusted Cost (Millions of Dollars)", "alias": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "position": 0}, {"inherited": true, "checked": true, "field": "Deaths", "alias": "Deaths", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "Disaster_stringindexer", "alias": "Disaster_stringindexer", "type": "real", "position": 2}, {"inherited": true, "checked": true, "field": "Disaster Type_stringindexer", "alias": "Disaster Type_stringindexer", "type": "real", "position": 3}, {"inherited": true, "checked": true, "field": "Beginning Date_stringindexer", "alias": "Beginning Date_stringindexer", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "Ending Date_stringindexer", "alias": "Ending Date_stringindexer", "type": "real", "position": 5}, {"inherited": true, "checked": true, "field": "Description_stringindexer", "alias": "Description_stringindexer", "type": "real", "position": 6}, {"inherited": true, "checked": true, "field": "Event ID_stringindexer", "alias": "Event ID_stringindexer", "type": "real", "position": 7}], "actual_schema": [{"inherited": true, "checked": true, "field": "Disaster", "alias": "Disaster", "type": "String", "position": 0}, {"inherited": true, "checked": true, "field": "Disaster Type", "alias": "Disaster Type", "type": "String", "position": 1}, {"inherited": true, "checked": true, "field": "Beginning Date", "alias": "Beginning Date", "type": "date", "position": 2}, {"inherited": true, "checked": true, "field": "Ending Date", "alias": "Ending Date", "type": "date", "position": 3}, {"inherited": true, "checked": true, "field": "Total CPI-Adjusted Cost (Millions of Dollars)", "alias": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "Deaths", "alias": "Deaths", "type": "numeric", "position": 5}, {"inherited": true, "checked": true, "field": "Description", "alias": "Description", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "Event ID", "alias": "Event ID", "type": "String", "position": 7}], "selected_schema": [], "created_at": "2024-02-25 02:33:15.205000", "originalcount": 238, "samplecount": 238, "samplefile": "/FileStore/platform/sampleData/65daa6ebc55b7f0042d67ca4/part-00000-84c46422-b3f8-4c91-9701-47a5d45a96e1-c000.csv", "joinSchema": [], "updated_at": "2024-02-25 02:34:42.570000", "__v": 0, "datacache": 0, "sampleData": [{"Disaster": "Western Wildfires (Summer-Fall 2018)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2018", "Ending Date": "9/30/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2200.0, "Deaths": 15, "Description": "California has again been impacted by a damaging and costly wildfire season. Of note, the Medincino Complex Fire was the largest wildfire on record in California burning over 450,000 acres while the Carr Fire in Northern California damaged or destroyed over 1,500 homes and businesses. Several other Western states (OR, WA, UT, WY, ID, MT, CO) have also had active and damaging wildfire seasons. In total, over 7.7 million acres has burned across the U.S. during the first 9 months of 2018, which is well above the 10-year average (2008-2017) of 5.9 million acres for the January-September period.", "Event ID": "10001"}, {"Disaster": "Southwest/Southern Plains Drought (Summer-Fall 2018)", "Disaster Type": "Drought", "Beginning Date": "6/1/2018", "Ending Date": "9/30/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2800.0, "Deaths": 0, "Description": "Drought conditions were present across numerous Southwestern and Plains states (TX, OK, KS, MO, CO, NM, AZ, UT). The most extreme drought conditions continue to persist across the Four Corners region of the Southwest. The agriculture sector has been impacted across the affected states including damage to field crops from lack of rainfall. Ranchers have also be forced to sell-off livestock early in some regions due to high feeding costs.", "Event ID": "10002"}, {"Disaster": "Hurricane Florence (September 2018)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/13/2018", "Ending Date": "9/16/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 22500.0, "Deaths": 51, "Description": "\"Hurricane Florence was a large and very slow moving hurricane that produced extreme rainfall across eastern North Carolina (up to 35.93\"\") and South Carolina (up to 23.81\"\")", "Event ID": " as prodigious amounts of rainfall were common in many locations. Florence made landfall as a category 1"}, {"Disaster": "Colorado Hail Storm (June 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "6/18/2018", "Ending Date": "6/19/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2100.0, "Deaths": 0, "Description": "Severe hail storms cause golf ball to baseball-sized hail and widespread damage in many areas from northern Denver to Boulder and Fort Collins. Many homes, businesses and vehicles were impacted..", "Event ID": "10004"}, {"Disaster": "Texas Hail Storm (June 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2018", "Ending Date": "6/6/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1000.0, "Deaths": 0, "Description": "Large-hail impacts highly-populated area of the Dallas-Ft. Worth metroplex. Golfball to baseball-sized hail damages many homes, vehicles and businesses.", "Event ID": "10005"}, {"Disaster": "Central and Eastern Severe Weather (May 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "5/13/2018", "Ending Date": "5/15/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1383.9, "Deaths": 5, "Description": "Severe storm damage across many Central states including TX, KS, CO, OK, MO, IL, IN, IA and OH. This was followed by a derecho event across the Northeastern states of MD, NJ, NY, PA, VA, WV, MA and CT that caused widespread high wind damage. Also, there were one dozen tornadoes reported across PA, NY and CT causing further damage.", "Event ID": "10006"}, {"Disaster": "Central and Northeastern Severe Weather (May 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "5/1/2018", "Ending Date": "5/4/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1018.4, "Deaths": 0, "Description": "Numerous central states (KS, NE, OK, TX, NM, MO, IA, IL, IN, OH, WI) were impacted by large hail and tornadoes. Several northeastern states including NY, PA and VT were also impacted by high wind damage from severe storms.", "Event ID": "10007"}, {"Disaster": "Southern and Eastern Tornadoes and Severe Weather (April 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2018", "Ending Date": "4/16/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1331.4, "Deaths": 3, "Description": "Tornadoes and severe storms with large hail cause widespread damage across many Southern and Eastern states (AR, FL, GA, LA, MD, MI, MS, MO, NJ, NY, NC, PA, SC, TX, VA) over a multi-day period. There were over 70 confirmed tornadoes largely clustered in Louisiana, Mississippi, North Carolina and Virginia. This same system also caused winter storm impacts of high wind and ice accumulation in northeastern states.", "Event ID": "10008"}, {"Disaster": "Southeastern Tornadoes and Severe Weather (March 2018)", "Disaster Type": "Severe Storm", "Beginning Date": "3/18/2018", "Ending Date": "3/21/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1378.8, "Deaths": 0, "Description": "A potent severe storm system caused over 20 tornadoes across Alabama and also widespread hail damage from Texas to Florida. Most notably this system produced an EF-3 tornado that caused extensive damage in Jacksonville, Alabama and across the campus of Jacksonville State University.", "Event ID": "10009"}, {"Disaster": "Northeast Winter Storm (March 2018)", "Disaster Type": "Winter Storm", "Beginning Date": "3/1/2018", "Ending Date": "3/3/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 2216.0, "Deaths": 9, "Description": "Powerful Nor'easter impacted many Northeastern states including MD, MA, NH, NJ, NY, PA, CT, DE, RA and VA. Widespread damage resulted from the combination of high winds, heavy snow and heavy coastal erosion.", "Event ID": "10010"}, {"Disaster": "Central and Eastern Winter Storm (January 2018)", "Disaster Type": "Winter Storm", "Beginning Date": "1/3/2018", "Ending Date": "1/5/2018", "Total CPI-Adjusted Cost (Millions of Dollars)": 1063.8, "Deaths": 22, "Description": "A Nor'easter caused damage across many Northeastern states including MA, NJ, NY, CT, ME, NH, PA, MD, RI, SC, TN, VA, NC and GA.", "Event ID": "10011"}, {"Disaster": "Western Wildfires, California Firestorm (Summer-Fall 2017)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2017", "Ending Date": "12/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 18365.1, "Deaths": 54, "Description": "A historic firestorm damages or destroys over 15,000 homes, businesses and other structures across California in October. The combined destruction of the Tubbs, Atlas, Nuns and Redwood Valley wildfires represent the most costly wildfire event on record, also causing 44 deaths. Extreme wildfire conditions in early December also burned hundreds of homes in Los Angeles. Numerous other wildfires across many western and northwestern states burn over 9.8 million acres exceeding the 10-year annual average of 6.5 million acres. Montana in particular was affected by wildfires that burned in excess of 1 million acres. These wildfire conditions were enhanced by the preceding drought conditions in several states.", "Event ID": "10012"}, {"Disaster": "North Dakota, South Dakota and Montana Drought (Spring-Fall 2017)", "Disaster Type": "Drought", "Beginning Date": "3/1/2017", "Ending Date": "12/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2550.0, "Deaths": 0, "Description": "Extreme drought causes extensive impacts to agriculture in North Dakota, South Dakota and Montana. Field crops including wheat were severely damaged and the lack of feed for cattle forced ranchers to sell off livestock. This drought has also contributed to the increased potential for severe wildfires.", "Event ID": "10013"}, {"Disaster": "Hurricane Maria (September 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/19/2017", "Ending Date": "9/21/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 91800.0, "Deaths": 2981, "Description": "Category 4 hurricane made landfall in southeast Puerto Rico after striking the U.S. Virgin Island of St. Croix. Maria's high winds caused widespread devastation to Puerto Rico's transportation, agriculture, communication and energy infrastructure. Extreme rainfall up to 37 inches caused widespread flooding and mudslides across the island. The interruption to commerce and standard living conditions will be sustained for a long period, as much of Puerto Rico's infrastructure is rebuilt. Maria tied Hurricane Wilma (2005) for the most rapid intensification, strengthening from tropical depression to a category 5 storm in 54 hours. Maria's landfall at Category 4 strength gives the U.S. a record three Category 4+ landfalls this year (Maria, Harvey, and Irma). Maria was one of the deadliest storms to impact the U.S., with numerous indirect deaths in the wake of the storm's devastation.", "Event ID": "10014"}, {"Disaster": "Hurricane Irma (September 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/6/2017", "Ending Date": "9/12/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 50974.5, "Deaths": 97, "Description": "Category 4 hurricane made landfall at Cudjoe Key, Florida after devastating the U.S. Virgin Islands - St John and St Thomas - as a category 5 storm. The Florida Keys were heavily impacted, as 25% of buildings were destroyed while 65% were significantly damaged. Severe wind and storm surge damage also occurred along the coasts of Florida and South Carolina. Jacksonville, FL and Charleston, SC received near-historic levels of storm surge causing significant coastal flooding. Irma maintained a maximum sustained wind of 185 mph for 37 hours, the longest in the satellite era. Irma also was a category 5 storm for longer than all other Atlantic hurricanes except Ivan in 2004.", "Event ID": "10015"}, {"Disaster": "Hurricane Harvey (August 2017)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/25/2017", "Ending Date": "8/31/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 127500.0, "Deaths": 89, "Description": "Category 4 hurricane made landfall near Rockport, Texas causing widespread damage. Harvey's devastation was most pronounced due to the large region of extreme rainfall producing historic flooding across Houston and surrounding areas. More than 30 inches of rainfall fell on 6.9 million people, while 1.25 million experienced over 45 inches and 11,000 had over 50 inches, based on 7-day rainfall totals ending August 31. This historic U.S. rainfall caused massive flooding that displaced over 30,000 people and damaged or destroyed over 200,000 homes and businesses.", "Event ID": "10016"}, {"Disaster": "Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/27/2017", "Ending Date": "6/29/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1453.5, "Deaths": 0, "Description": "Severe hail and high wind damage impacting Nebraska, Illinois and Iowa. More than one dozen tornadoes touched down across parts of Iowa, in addition to other storm damage.", "Event ID": "10017"}, {"Disaster": "Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/12/2017", "Ending Date": "6/16/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1569.3, "Deaths": 0, "Description": "Severe hail, high winds and numerous tornadoes impact many states over several days including WY, TX, NE, KS, MO, IA, IL, PA, VA, NY.", "Event ID": "10018"}, {"Disaster": "Minnesota Hail Storm and Upper Midwest Severe Weather (June 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "6/9/2017", "Ending Date": "6/11/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2444.0, "Deaths": 0, "Description": "Severe hail and high winds cause considerable damage across Minnesota and Wisconsin. The Minneapolis metro area in particular was damaged from large, destructive hail impacting many buildings and vehicles. This damage is comparable to the May 15, 1998 Minnesota hail storm that was also very costly.", "Event ID": "10019"}, {"Disaster": "Colorado Hail Storm and Central Severe Weather (May 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "5/8/2017", "Ending Date": "5/11/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 3484.0, "Deaths": 0, "Description": "Hail storm and wind damage impacting several states including CO, OK, TX, NM, MO. The most costly impacts were in the Denver metro region where baseball-sized hail caused the most expensive hail storm in Colorado history, with insured losses exceeding 2.2 (2.3) billion.", "Event ID": "10020"}, {"Disaster": "Missouri and Arkansas Flooding and Central Severe Weather (May 2017)", "Disaster Type": "Flooding", "Beginning Date": "4/25/2017", "Ending Date": "5/7/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1725.4, "Deaths": 20, "Description": "A period of heavy rainfall up to 15 inches over a multi-state region in the Midwest caused historic levels of flooding along many rivers. The flooding was most severe in Missouri, Arkansas and southern Illinois where levees were breached and towns were flooded. There was widespread damage to homes, businesses, infrastructure and agriculture. Severe storms also caused additional impacts during the flooding event across a number of central and southern states.", "Event ID": "10021"}, {"Disaster": "South/Southeast Severe Weather (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "3/26/2017", "Ending Date": "3/28/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2802.8, "Deaths": 0, "Description": "Large hail and high winds in Texas north of the Dallas metro region caused widespread damage to structures and vehicles. Severe storms also caused damage across several other states (OK, TN, KY, MS, AL) due to the combination of high winds, hail and tornadoes.", "Event ID": "10022"}, {"Disaster": "Southeast Freeze (March 2017)", "Disaster Type": "Freeze", "Beginning Date": "3/14/2017", "Ending Date": "3/16/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1040.0, "Deaths": 0, "Description": "Severe freeze heavily damaged fruit crops across several southeastern states (SC, GA, NC, TN, AL, MS, FL, KY, VA). Mid-March freezes are not climatologically unusual in the Southeast, however many crops were blooming 3+ weeks early due to unusually warm temperatures during the preceding weeks. Damage was most severe in Georgia and South Carolina. Crops most impacted include peaches, blueberries, strawberries and apples, among others.", "Event ID": "10023"}, {"Disaster": "Midwest Tornado Outbreak (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "3/6/2017", "Ending Date": "3/8/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 2263.0, "Deaths": 2, "Description": "Tornado outbreak and wind damage across many Midwestern states (AR, IA, IL, KS, MI, MN, MO, NE, NY, OH, WI). Missouri and Illinois were impacted by numerous tornadoes while Michigan and New York were affected by destructive, straight-line winds following the storm system. Nearly one million customers lost power in Michigan alone due to sustained high winds, which affected several states from Illinois to New York.", "Event ID": "10024"}, {"Disaster": "Central/Southeast Tornado Outbreak (March 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "2/28/2017", "Ending Date": "3/1/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1878.1, "Deaths": 6, "Description": "Over 70 tornadoes developed during a widespread outbreak across many central and southern states causing significant damage. There was also widespread straight-line wind and hail damage. This was the second largest tornado outbreak to occur early in 2017.", "Event ID": "10025"}, {"Disaster": "California Flooding (February 2017)", "Disaster Type": "Flooding", "Beginning Date": "2/8/2017", "Ending Date": "2/22/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1560.0, "Deaths": 5, "Description": "Heavy, persistent rainfall across northern and central California created substantial property and infrastructure damage from flooding, landslides and erosion. Notable impacts include severe damage to the Oroville Dam spillway, which caused a multi-day evacuation of 188,000 residents downstream. Excessive rainfall also caused flood damage in the city of San Jose, as Coyote Creek overflowed its banks and inundated neighborhoods forcing 14,000 residents to evacuate.", "Event ID": "10026"}, {"Disaster": "Southern Tornado Outbreak and Western Storms (January 2017)", "Disaster Type": "Severe Storm", "Beginning Date": "1/20/2017", "Ending Date": "1/22/2017", "Total CPI-Adjusted Cost (Millions of Dollars)": 1149.2, "Deaths": 24, "Description": "High wind damage occurred across southern California near San Diego followed by 79 confirmed tornadoes during an outbreak across many southern states including AL, FL, GA, LA, MS, SC and TX. This was the 3rd most tornadoes to occur in a single outbreak during a winter month (Dec.-Feb.) for records going back to 1950.", "Event ID": "10027"}, {"Disaster": "Western/Southeast Wildfires (Summer-Fall 2016)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2016", "Ending Date": "12/31/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2538.7, "Deaths": 21, "Description": "Western and Southern states experienced an active wildfire season with over 5.0 million acres burned nationally. Most notable was the firestorm that impacted Gatlinburg, Tennessee with hurricane-force wind gusts in extremely dry conditions creating volatile wildfire behavior. These wildfires destroyed nearly 2,500 structures and caused 14 fatalities. The drought conditions in many areas of the Southeast and California worsened the wildfire potential.", "Event ID": "10028"}, {"Disaster": "West/Northeast/Southeast Drought (2016)", "Disaster Type": "Drought", "Beginning Date": "1/1/2016", "Ending Date": "12/31/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 3660.2, "Deaths": 0, "Description": "California's 5-year drought persisted during 2016 while new areas of extreme drought developed in states across the Northeast and Southeast. The long-term impacts of the drought in California have damaged forests where 100+ million trees have perished and are a public safety hazard. The agricultural impacts were reduced in California as water prices and crop fallowing declined. However, agricultural impacts developed in Northeast and Southeast due to stressed water supplies.", "Event ID": "10029"}, {"Disaster": "Hurricane Matthew (October 2016)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/8/2016", "Ending Date": "10/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 10600.0, "Deaths": 49, "Description": "Hurricane Matthew paralleled the Southeast coast from Florida to North Carolina causing widespread damage from wind, storm surge and inland flooding. The most costly impacts were due to historic levels of river flooding in eastern North Carolina where 100,000 homes, businesses and other structures were damaged. This inland flooding was comparable to Hurricane Floyd (1999) that also impacted eastern North Carolina. Matthew narrowly missed landall on Florida's east coast as a powerful category 4 storm.", "Event ID": "10030"}, {"Disaster": "Louisiana Flooding (August 2016)", "Disaster Type": "Flooding", "Beginning Date": "8/12/2016", "Ending Date": "8/15/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 10600.0, "Deaths": 13, "Description": "A historic flood devastated a large area of southern Louisiana resulting from 20 to 30 inches of rainfall over several days. Watson, Louisiana received an astounding 31.39 inches of rain from the storm. Two-day rainfall totals in the hardest hit areas have a 0.2% chance of occurring in any given year: a 1 in 500 year event. More than 30,000 people were rescued from the floodwaters that damaged or destroyed over 50,000 homes, 100,000 vehicles and 20,000 businesses. This is the most damaging U.S. flood event since Superstorm Sandy impacted the Northeast in 2012.", "Event ID": "10031"}, {"Disaster": "Rockies and Northeast Severe Weather (July 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "7/28/2016", "Ending Date": "7/30/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1553.6, "Deaths": 0, "Description": "Severe storms across the Rockies and Northeastern states (CO, WY, VA, MD, PA, NJ, NY) caused large hail and high wind damage. Storm damage in Colorado was the most costly due to hail.", "Event ID": "10032"}, {"Disaster": "West Virginia Flooding and Ohio Valley Tornadoes (June 2016)", "Disaster Type": "Flooding", "Beginning Date": "6/22/2016", "Ending Date": "6/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1027.1, "Deaths": 23, "Description": "Torrential rainfall caused destructive flooding through many West Virginia towns, damaging thousands of homes and businesses and causing considerable loss of life. Over 1,500 roads and bridges were damaged or destroyed making the impact on infrastructure comparable to the historic 2013 Colorado flood. The storm system also produced numerous tornadoes causing damage across several Ohio Valley states.", "Event ID": "10033"}, {"Disaster": "Rockies/Central Tornadoes and Severe Weather (May 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "5/21/2016", "Ending Date": "5/26/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1215.0, "Deaths": 0, "Description": "Sustained period of severe thunderstorms and tornadoes affecting several states including Montana, Colorado, Kansas, Missouri and Texas. The most concentrated days for tornado development were on May 22 and 24. Additional damage was created by straight-line high wind and hail damage.", "Event ID": "10034"}, {"Disaster": "Plains Tornadoes and Central Severe Weather (May 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "5/8/2016", "Ending Date": "5/11/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1823.0, "Deaths": 2, "Description": "Tornadoes and severe storms cause widespread damage across the Plains and Central states (NE, MO, TX, OK, KS, CO, IL, KY, TN) over a multi-day period. The damage from tornadoes and high wind was most costly in Nebraska and Missouri.", "Event ID": "10035"}, {"Disaster": "South/Southeast Tornadoes (April 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "4/26/2016", "Ending Date": "5/2/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2538.1, "Deaths": 6, "Description": "Large outbreak of tornadoes affects numerous states across the South and Southeast. Additional damage also from large hail and straight-line wind during the multi-day thunderstorm event.", "Event ID": "10036"}, {"Disaster": "Houston Flooding (April 2016)", "Disaster Type": "Flooding", "Beginning Date": "4/17/2016", "Ending Date": "4/18/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2836.6, "Deaths": 8, "Description": "A period of extreme rainfall up to 17 inches created widespread urban flooding in Houston and surrounding suburbs. Thousands of homes and businesses were damaged and more than 1,800 high water rescues were conducted. This represents the most widespread flooding event to affect Houston since Tropical Storm Allison in 2001.", "Event ID": "10037"}, {"Disaster": "North/Central Texas Hail Storm (April 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "4/10/2016", "Ending Date": "4/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 3708.5, "Deaths": 0, "Description": "Widespread severe hail damage across north and central Texas including the cities of Plano, Wylie, Frisco, Allen and San Antonio. The damage in San Antonio was particularly severe as the National Weather Service verified reports of hail size reaching 4.5 inches in diameter. This ranks as one of the most costly hail events to affect the United States.", "Event ID": "10038"}, {"Disaster": "North Texas Hail Storm (March 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "3/23/2016", "Ending Date": "3/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2188.7, "Deaths": 0, "Description": "Large hail and strong winds caused considerable damage in heavily populated areas of north Texas. This damage was most notable in the cities of Dallas, Fort Worth and Plano.", "Event ID": "10039"}, {"Disaster": "Southern Severe Weather (March 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "3/17/2016", "Ending Date": "3/18/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1282.9, "Deaths": 1, "Description": "Severe hail impacts the Fort Worth and Arlington metro region in Texas. Additional large hail and high wind damage occurred in other locations of Texas, Louisiana and Mississippi.", "Event ID": "10040"}, {"Disaster": "Texas and Louisiana Flooding (March 2016)", "Disaster Type": "Flooding", "Beginning Date": "3/8/2016", "Ending Date": "3/12/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 2432.5, "Deaths": 5, "Description": "Multiple days of heavy rainfall averaging 15 to 20 inches led to widespread flooding along the Sabine River basin on the Texas and Louisiana border. This prompted numerous evacuations, high-water rescues and destruction, as more than 1,000 homes and businesses were damaged or destroyed.", "Event ID": "10041"}, {"Disaster": "Southeast and Eastern Tornadoes (February 2016)", "Disaster Type": "Severe Storm", "Beginning Date": "2/22/2016", "Ending Date": "2/24/2016", "Total CPI-Adjusted Cost (Millions of Dollars)": 1102.3, "Deaths": 10, "Description": "Early outbreak of tornadoes and severe weather across many southern and eastern states including (AL, CT, FL, GA, LA, MA, MD, MS, NC, NJ, NY, PA, SC, TX, VA). There were at least 50 confirmed tornadoes causing widespread damage.", "Event ID": "10042"}, {"Disaster": "Western Drought (2015)", "Disaster Type": "Drought", "Beginning Date": "1/1/2015", "Ending Date": "12/31/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 4823.3, "Deaths": 0, "Description": "Drought conditions were present across numerous western states (CA, NV, OR, WA, ID, MT, UT, AZ) with the most severe conditions continuing to plague California for all of 2015. The agriculture sector was again impacted by a lack of rainfall resulting in hundreds of thousands of acres of farmland remaining fallow and requiring excess groundwater pumping to irrigate existing agriculture interests. Wildfire conditions were further enhanced by the ongoing drought. California experienced extensive damage from both drought and wildfire impacts. Drought conditions did improve dramatically across Texas and Oklahoma, in the form of several major flood events.", "Event ID": "10043"}, {"Disaster": "Texas Tornadoes and Midwest Flooding (December 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "12/26/2015", "Ending Date": "12/29/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2118.8, "Deaths": 50, "Description": "A powerful storm system packing unseasonably strong tornadoes caused widespread destruction in the Dallas metropolitan region, damaging well over 1,000 homes and businesses. This same potent system also produced intense rainfall over several Midwestern states triggering historic flooding that has approached or broken records at river gauges in several states (MO, IL, AR, TN, MS, LA). The flooding has overtopped levees and caused damage in numerous areas. This historic storm also produced high wind, snow and ice impacts from New Mexico through the Midwest and into New England. Overall, the storm caused at least 50 deaths from the combined impact of tornadoes, flooding and winter weather.", "Event ID": "10044"}, {"Disaster": "Western and Alaskan Wildfires (Summer-Fall 2015)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2015", "Ending Date": "11/30/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 3248.7, "Deaths": 12, "Description": "Wildfires burned over 10.1 million acres across the U.S. in 2015, surpassing 2006 for the highest annual total of U.S. acreage burned since record-keeping began in 1960. The most costly wildfires occurred in California where over 2,500 structures were destroyed due to the Valley and Butte wildfires with the insured losses alone exceeding 1.0 (1.1) billion. The most extensive wildfires occurred in Alaska where over 5 million acres burned within the state. There was extensive burnt acreage across other western states, most notably (OR, WA, ID, MT, ND, CO, WY, TX).", "Event ID": "10045"}, {"Disaster": "South Carolina and East Coast Flooding (October 2015)", "Disaster Type": "Flooding", "Beginning Date": "10/1/2015", "Ending Date": "10/5/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2158.1, "Deaths": 25, "Description": "Historic levels of flooding impacted South Carolina causing widespread damage to many homes, businesses, public buildings and infrastructure. This interrupted commerce and closed major transportation corridors (such as I-95) for weeks as rivers slowly receded. Locally extreme rainfall totals exceeding 20-inches were common resulting from the convergence of a powerful low pressure system / frontal boundary and copious moisture from Hurricane Joaquin in the Atlantic.", "Event ID": "10046"}, {"Disaster": "Central and Northeast Severe Weather (June 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "6/21/2015", "Ending Date": "6/25/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1265.7, "Deaths": 1, "Description": "Severe storms across numerous Central and Northeast states (CO, CT, IA, IL, MD, MI, NJ, NY, PA, SD, VA, WI) with widespread hail and high wind damage.", "Event ID": "10047"}, {"Disaster": "Texas and Oklahoma Flooding and Severe Weather (May 2015)", "Disaster Type": "Flooding", "Beginning Date": "5/23/2015", "Ending Date": "5/26/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 2700.6, "Deaths": 31, "Description": "A slow-moving system caused tremendous rainfall and subsequent flooding to occur in Texas and Oklahoma. The Blanco river in Texas swelled from 5 feet to a crest of more than 40 feet over several hours causing considerable property damage and loss of life. The city of Houston also experienced flooding which resulted in hundreds of high-water rescues. The damage in Texas alone exceeded 1.0 (1.1) billion. There was also damage in other states (KS, CO, AR, OH, LA, GA, SC) from associated severe storms.", "Event ID": "10048"}, {"Disaster": "Southern Plains Tornadoes (May 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "5/6/2015", "Ending Date": "5/10/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1373.9, "Deaths": 4, "Description": "Tornado outbreak across the Southern Plain states (IA, KS, NE, OK, CO, SD, TX) with 122 tornadoes. The most costly damage occurred across Texas and Oklahoma.", "Event ID": "10049"}, {"Disaster": "South/Southeast Severe Weather (April 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "4/18/2015", "Ending Date": "4/20/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1386.4, "Deaths": 0, "Description": "Severe storms across the South and Southeastern states (AL, AR, FL, GA, KS, LA, MS, NC, OK, SC, TN, TX). High winds and severe hail created the most significant damage in Texas.", "Event ID": "10050"}, {"Disaster": "Midwest/Ohio Valley Severe Weather (April 2015)", "Disaster Type": "Severe Storm", "Beginning Date": "4/7/2015", "Ending Date": "4/9/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 1680.2, "Deaths": 2, "Description": "Severe storms across the Midwest and Ohio Valley including the states (AR, IA, IL, IN, KS, KY, MI, MO, NC, OH, OK, PA, TN, TX, WI, WV). Large hail and high winds created the most damage across Missouri and Illinois.", "Event ID": "10051"}, {"Disaster": "Central and Eastern Winter storm, Cold Wave (February 2015)", "Disaster Type": "Winter Storm", "Beginning Date": "2/14/2015", "Ending Date": "2/20/2015", "Total CPI-Adjusted Cost (Millions of Dollars)": 3199.2, "Deaths": 30, "Description": "A large winter storm and associated cold wave impacted many central, eastern and northeastern states (CT, DE, GA, IL, KY, MA, MD, ME, MI, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA). The city of Boston was particularly impacted as feet of snow continued to accumulate causing load-stress on buildings and clogging transportation corridors. Total, direct losses in Massachusetts alone exceed 1.0 (1.1) billion for this event, with considerable damage in many other states.", "Event ID": "10052"}, {"Disaster": "Western Drought (2014)", "Disaster Type": "Drought", "Beginning Date": "1/1/2014", "Ending Date": "12/31/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 4287.6, "Deaths": 0, "Description": "Historic drought conditions affected the majority of California for all of 2014 making it the worst drought on record for the state. Surrounding states and parts of Texas, Oklahoma and Kansas also experienced continued severe drought conditions. This is a continuation of drought conditions that have persisted for several years.", "Event ID": "10053"}, {"Disaster": "Rockies/Plains Severe Weather (September 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "9/29/2014", "Ending Date": "10/2/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1512.5, "Deaths": 0, "Description": "Severe storms across the Rockies and Plains states (CO, KS, TX). Large hail and high winds created significant damage across eastern Colorado and Texas, particularly in the Dallas metro area.", "Event ID": "10054"}, {"Disaster": "Michigan and Northeast Flooding (August 2014)", "Disaster Type": "Flooding", "Beginning Date": "8/11/2014", "Ending Date": "8/13/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1114.3, "Deaths": 2, "Description": "Heavy rainfall in excess of 5 inches caused significant flooding in cities across Michigan damaging thousands of cars, business, homes and other infrastructure. Flooding also occurred across Maryland and New York's Long Island, as the slow-moving storm system delivered 24-hour rainfall exceeding 6 and 12 inches, respectively, creating more flood damage. Islip, NY received 13.57 inches of rain over a 24-hour period on Aug 12-13 setting a new 24-hour precipitation record for New York.", "Event ID": "10055"}, {"Disaster": "Rockies/Central Plains Severe Weather (June 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "6/3/2014", "Ending Date": "6/5/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 2072.8, "Deaths": 2, "Description": "Severe storms across the Rockies and Central Plains states (NE, KS, WY, IA, AR). Wind gusts exceeding 90 mph and baseball to softball sized hail caused severe damage to structures and vehicles in central and eastern Nebraska.", "Event ID": "10056"}, {"Disaster": "Rockies/Midwest/Eastern Severe Weather (May 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "5/18/2014", "Ending Date": "5/23/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 4010.2, "Deaths": 0, "Description": "Severe storms across the Rockies, Midwest and Eastern states (CO, MT, IA, IL, IN, OH, SC, VA, PA, DE, NY) with the most costly damage in Colorado, Illinois and Pennsylvania.", "Event ID": "10057"}, {"Disaster": "Midwest/Southeast/Northeast Tornadoes and Flooding (April 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "4/27/2014", "Ending Date": "5/1/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1875.1, "Deaths": 33, "Description": "Tornado outbreak across the Midwest, Southeast and Northeast states (AL, AR, DE, FL, GA, KS, MD, MO, MS, NC, NJ, NY, PA, TN, VA) with 83 confirmed tornadoes. Mississippi had its 3rd greatest number of tornadoes reported for any day since 1950. Torrential rainfall in the Florida panhandle also caused major flooding, as Pensacola set new 1-day and 2-day precipitation records of 15.55 and 20.47 inches, respectively. Flooding rains were also reported in coastal Alabama, as Mobile received 11.24 inches of rain, the third greatest calendar day rainfall total for the city.", "Event ID": "10058"}, {"Disaster": "Plains Severe Weather (April 2014)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/2014", "Ending Date": "4/3/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 1537.9, "Deaths": 0, "Description": "Severe storms across the Plains states (IL, KS, MO, TX) causing considerable hail and wind damage in Texas.", "Event ID": "10059"}, {"Disaster": "Midwest/Southeast/Northeast Winter Storm (January 2014)", "Disaster Type": "Winter Storm", "Beginning Date": "1/5/2014", "Ending Date": "1/8/2014", "Total CPI-Adjusted Cost (Millions of Dollars)": 2346.5, "Deaths": 16, "Description": "Winter storm caused widespread damage across numerous Midwest, Southeast and Northeastern states (AL, GA, IL, IN, KY, MD, MI, MO, MS, NC, NJ, NY, OH, PA, SC, TN, VA).", "Event ID": "10060"}, {"Disaster": "Western/Plains Drought/Heatwave (Spring-Fall 2013)", "Disaster Type": "Drought", "Beginning Date": "3/1/2013", "Ending Date": "11/30/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 11364.1, "Deaths": 53, "Description": "The 2013 drought slowly dissipated from the historic levels of the 2012 drought, as conditions improved across many Midwestern and Plains states. However, moderate to extreme drought did remain or expand into western states (AZ, CA, CO, IA, ID, IL, KS, MI, MN, MO, ND, NE, NM, NV, OK, OR, SD, TX, UT, WA, WI, WY). In comparison to 2011 and 2012 drought conditions the US experienced only moderate crop losses across the central agriculture states.", "Event ID": "10061"}, {"Disaster": "Ohio Valley Tornadoes (November 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "11/17/2013", "Ending Date": "11/17/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1188.9, "Deaths": 8, "Description": "Late-season outbreak of tornadoes and severe weather over the Ohio Valley (IL, IN, KY, MI, MO, OH) with 70 confirmed tornadoes. Most severe impacts occurred across Illinois and Indiana.", "Event ID": "10062"}, {"Disaster": "Colorado Flooding (September 2013)", "Disaster Type": "Flooding", "Beginning Date": "9/10/2013", "Ending Date": "9/16/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1644.3, "Deaths": 9, "Description": "A stalled frontal boundary over Colorado led to record rainfall, as some areas received > 15 inches over several days. This resulted in historic flooding across numerous cities and towns. Destruction of residences, businesses and transportation infrastructure was widespread.", "Event ID": "10063"}, {"Disaster": "Midwest Severe Weather (August 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "8/6/2013", "Ending Date": "8/7/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1135.8, "Deaths": 0, "Description": "Severe weather and large hail causes considerable damage across Minnesota and Wisconsin.", "Event ID": "10064"}, {"Disaster": "Midwest/Plains/Northeast Tornadoes (May 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "5/27/2013", "Ending Date": "5/31/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1976.7, "Deaths": 10, "Description": "Outbreak of tornadoes and severe weather over the Midwest, Plains and Northeast (IL, IN, KS, MO, NY, OK, TX) with 92 confirmed tornadoes including the deadly tornado that struck El Reno, OK. There was also significant damage resulting from hail and straight-line wind.", "Event ID": "10065"}, {"Disaster": "Midwest/Plains/East Tornadoes (May 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "5/18/2013", "Ending Date": "5/22/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 2616.3, "Deaths": 27, "Description": "Outbreak of tornadoes and severe weather over the Midwest, Plains and Eastern states (GA, IA, IL, KS, MO, NY, OK, TX) with 59 confirmed tornadoes including the deadly tornado that impacted Moore, OK. Many destructive tornadoes remained on the ground for an extended time.", "Event ID": "10066"}, {"Disaster": "Illinois Flooding and Severe Weather (April 2013)", "Disaster Type": "Flooding", "Beginning Date": "4/16/2013", "Ending Date": "4/19/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1174.0, "Deaths": 4, "Description": "A slow-moving storm system created rainfall totals of 5 to 10 inches across northern and central Illinois including the Chicago metro. This resulted in damage to many homes and businesses. There was also severe weather damage from wind and hail across Indiana and Missouri.", "Event ID": "10067"}, {"Disaster": "Midwest/Plains Severe Weather (April 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "4/7/2013", "Ending Date": "4/11/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 1574.0, "Deaths": 1, "Description": "Severe weather across the Midwest and Plains states (IN, KS, MO, NE) with a total of 26 confirmed tornadoes. Considerable damage resulting from hail and straight-line wind.", "Event ID": "10068"}, {"Disaster": "Southeast Severe Weather (March 2013)", "Disaster Type": "Severe Storm", "Beginning Date": "3/18/2013", "Ending Date": "3/18/2013", "Total CPI-Adjusted Cost (Millions of Dollars)": 2201.8, "Deaths": 1, "Description": "Severe weather over the Southeast (MS, AL, GA, TN) with 10 confirmed tornadoes. Considerable damage resulting from large hail and straight-line wind.", "Event ID": "10069"}, {"Disaster": "U.S. Drought/Heatwave (2012)", "Disaster Type": "Drought", "Beginning Date": "1/1/2012", "Ending Date": "12/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 33304.2, "Deaths": 123, "Description": "The 2012 drought is the most extensive drought to affect the U.S. since the 1930s. Moderate to extreme drought conditions affected more than half the country for a majority of 2012. The following states were affected: CA, NV, ID, MT, WY, UT, CO, AZ, NM, TX, ND, SD, NE, KS, OK, AR, MO, IA, MN, IL, IN, GA. Costly drought impacts occurred across the central agriculture states resulting in widespread harvest failure for corn, sorghum and soybean crops, among others. The associated summer heatwave also caused 123 direct deaths, but an estimate of the excess mortality due to heat stress is still unknown.", "Event ID": "10070"}, {"Disaster": "Western Wildfires (Summer-Fall 2012)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2012", "Ending Date": "11/30/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1929.7, "Deaths": 8, "Description": "Wildfires burned over 9.2 million acres across the U.S. in 2012. This is the 3rd highest annual total since the year 2000. The most damaging wildfires occurred in the western states (CO, ID, WY, MT, CA, NV, OR, WA). Colorado experienced the most costly wildfires (e.g., Waldo Canyon fire) where several hundred residences were destroyed.", "Event ID": "10071"}, {"Disaster": "Hurricane Sandy (October 2012)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/30/2012", "Ending Date": "10/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 72193.8, "Deaths": 159, "Description": "Extensive damage across several northeastern states (MD, DE, NJ, NY, CT, MA, RI) due to high wind and coastal storm surge, particularly NY and NJ. Damage from wind, rain and heavy snow also extended more broadly to other states (NC, VA, WV, OH, PA, NH), as Sandy merged with a developing Nor'easter. Sandy's impact on major population centers caused widespread interruption to critical water / electrical services and also caused 159 deaths (72 direct, 87 indirect). Sandy also caused the New York Stock Exchange to close for two consecutive business days, which last happened in 1888 due to a major winter storm.", "Event ID": "10072"}, {"Disaster": "Hurricane Isaac (August 2012)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/26/2012", "Ending Date": "8/31/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3067.6, "Deaths": 9, "Description": "Category 1 hurricane made landfall over Louisiana. Isaac's slow motion and large size led to a large storm surge and flooding rains. This created damage across several southeastern states (LA, MS, AL, FL) including 9 deaths (5 direct, 4 indirect).", "Event ID": "10073"}, {"Disaster": "Plains/East/Northeast Severe Weather (June-July 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "6/29/2012", "Ending Date": "7/2/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3206.2, "Deaths": 28, "Description": "Sustained outbreak of thunderstorms / high winds from a strong derecho event over the central, eastern, and northeastern states (IL, IN, KY, OH, WV, SC, NC, VA, MD, DC, NJ).", "Event ID": "10074"}, {"Disaster": "Rockies/Southwest Severe Weather (June 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2012", "Ending Date": "6/12/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 2883.5, "Deaths": 0, "Description": "Severe storms and damaging hail over several states (CO, NM, TX) with 25 confirmed tornadoes. Colorado experienced over 1.0 (1.1) billion in damage due to hail.", "Event ID": "10075"}, {"Disaster": "Southern Plains/Midwest/Northeast Severe Weather (May 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "5/25/2012", "Ending Date": "5/30/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 2557.0, "Deaths": 1, "Description": "Severe storms over the southern plains, midwest and northeast (TX, OK, KS, MN, PA, NY) with 27 confirmed tornadoes. Significant damage also from severe hail and straight-line winds.", "Event ID": "10076"}, {"Disaster": "Midwest/Ohio Valley Severe Weather (April-May 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/28/2012", "Ending Date": "5/1/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3636.6, "Deaths": 1, "Description": "Severe weather over the midwest and Ohio Valley (TX, OK, KS, MO, IL, IN, KY) with 38 confirmed tornadoes. Considerable damage resulting from hail.", "Event ID": "10077"}, {"Disaster": "Midwest Tornadoes (April 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2012", "Ending Date": "4/14/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1247.2, "Deaths": 6, "Description": "Outbreak of tornadoes and severe weather over the midwest (OK, KS, NE, IA) with 98 confirmed tornadoes including many tornadoes that remained on the ground for an extended time - traveling tens of miles.", "Event ID": "10078"}, {"Disaster": "Texas Tornadoes (April 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/2012", "Ending Date": "4/3/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 1126.9, "Deaths": 0, "Description": "Outbreak of tornadoes across the greater Dallas-Ft. Worth metropolitan area. Several moderate strength tornadoes (EF-2 and EF-3) affected towns in this area with a total of 22 confirmed tornadoes.", "Event ID": "10079"}, {"Disaster": "Southeast/Ohio Valley Tornadoes (March 2012)", "Disaster Type": "Severe Storm", "Beginning Date": "3/2/2012", "Ending Date": "3/3/2012", "Total CPI-Adjusted Cost (Millions of Dollars)": 3473.0, "Deaths": 42, "Description": "Outbreak of tornadoes and severe weather over the southeast and Ohio Valley (AL, GA, IN, OH, KY, TN) with 75 confirmed tornadoes.", "Event ID": "10080"}, {"Disaster": "Texas, New Mexico, Arizona Wildfires (Summer-Fall 2011)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2011", "Ending Date": "11/30/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2075.7, "Deaths": 5, "Description": "Continued drought conditions and periods of extreme heat provided conditions favorable for a series of historic wildfires across Texas, New Mexico and Arizona. The Bastrop Fire in Texas was the most destructive fire in Texas history destroying over 1,500 homes. The Wallow Fire consumed over 500,000 acres in Arizona making it the largest on record in Arizona. The Las Conchas Fire in New Mexico was also the state's largest wildfire on record scorching over 150,000 acres while threatening the Los Alamos National Laboratory. Over 3 million acres have burned across Texas this wildfire season.", "Event ID": "10081"}, {"Disaster": "Tropical Storm Lee (September 2011)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/1/2011", "Ending Date": "9/5/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2864.3, "Deaths": 21, "Description": "Wind and flood damage across the southeast (LA, MS, AL, GA, TN) but considerably more damage from record flooding across the northeast (PA, NY, NJ, CT, VA, MD). Pennsylvania and New York were most affected.", "Event ID": "10082"}, {"Disaster": "Southern Plains/Southwest Drought & Heat Wave (Spring-Summer 2011)", "Disaster Type": "Drought", "Beginning Date": "3/1/2011", "Ending Date": "8/31/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 13684.3, "Deaths": 95, "Description": "\"Drought and heat wave conditions created major impacts across Texas, Oklahoma, New Mexico, Arizona, southern Kansas, and western Louisiana. In Texas and Oklahoma, a majority of range and pastures were classified in \"\"very poor\"\" condition for much of the 2011 crop growing season.\"", "Event ID": "10083"}, {"Disaster": "Hurricane Irene (August 2011)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/26/2011", "Ending Date": "8/28/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 15383.3, "Deaths": 45, "Description": "Category 1 hurricane made landfall over coastal NC and moved northward along the Mid-Atlantic Coast (NC, VA, MD, NJ, NY, CT, RI, MA, VT) causing torrential rainfall and flooding across the Northeast. Wind damage in coastal NC, VA, and MD was moderate with considerable damage resulting from falling trees and power lines, while flooding caused extensive flood damage across NJ, NY, and VT. Over seven million homes and businesses lost power during the storm. Numerous tornadoes were also reported in several states further adding to the damage.", "Event ID": "10084"}, {"Disaster": "Midwest/Southeast Severe Weather (August 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "8/17/2011", "Ending Date": "8/18/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1312.7, "Deaths": 0, "Description": "Severe weather impacts the states IA, KS, MO, NE, SD across the Midwest and Southeast.", "Event ID": "10085"}, {"Disaster": "Rockies and Midwest Severe Weather (July 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "7/10/2011", "Ending Date": "7/14/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1396.6, "Deaths": 2, "Description": "An outbreak of tornadoes, hail, and high wind caused damage east of the Rockies and across the central plains (CO, WY, IA, IL, MI, MN, OH).", "Event ID": "10086"}, {"Disaster": "Missouri River flooding (May-June 2011)", "Disaster Type": "Flooding", "Beginning Date": "5/1/2011", "Ending Date": "6/30/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2282.5, "Deaths": 5, "Description": "Melting of an above-average snow pack across the Northern Rocky Mountains combined with above-average precipitation caused the Missouri and Souris Rivers to swell beyond their banks across the Upper Midwest (MT, ND, SD, NE, IA, KS, MO). An estimated 11,000 people were forced to evacuate Minot, North Dakota due to the record high water level of the Souris River, where 4,000 homes were flooded. Numerous levees were breached along the Missouri River, flooding thousands of acres of farmland.", "Event ID": "10087"}, {"Disaster": "Midwest/Southeast Tornadoes and Severe Weather (June 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "6/18/2011", "Ending Date": "6/22/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1752.6, "Deaths": 3, "Description": "Outbreak of tornadoes over central states (OK, TX, KS, NE, MO, IA, IL) with an estimated 81 tornadoes. Additional wind and hail damage across the Southeast (TN, GA, NC, SC).", "Event ID": "10088"}, {"Disaster": "Mississippi River flooding (April-May 2011)", "Disaster Type": "Flooding", "Beginning Date": "4/1/2011", "Ending Date": "5/31/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 3404.2, "Deaths": 7, "Description": "Persistent rainfall (nearly 300 percent normal precipitation amounts in the Ohio Valley) combined with melting snowpack caused historical flooding along the Mississippi River and its tributaries. Examples of economic damage include: 500 (570.0) million to agriculture in Arkansas; 320 (364.8) million in damage to Memphis, Tennessee; 800 (912.0) million to agriculture in Mississippi; 317 (361.4) million to agriculture and property in Missouri's Birds Point-New Madrid Spillway; 80 (91.2) million for the first 30 days of flood fighting efforts in Louisiana.", "Event ID": "10089"}, {"Disaster": "Midwest/Southeast Tornadoes (May 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "5/22/2011", "Ending Date": "5/27/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 10370.5, "Deaths": 177, "Description": "Outbreak of tornadoes over central and southern states (MO, TX, OK, KS, AR, GA, TN, VA, KY, IN, IL, OH, WI, MN, PA) with an estimated 180 tornadoes. Notably, an EF-5 tornado struck Joplin, MO resulting in at least 160 deaths, making it the deadliest single tornado to strike the U.S. since modern tornado record keeping began in 1950.", "Event ID": "10090"}, {"Disaster": "Southeast/Ohio Valley/Midwest Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/25/2011", "Ending Date": "4/28/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 11653.3, "Deaths": 321, "Description": "Outbreak of tornadoes over central and southern states (AL, AR, LA, MS, GA, TN, VA, KY, IL, MO, OH, TX, OK) with an estimated 343 tornadoes. The deadliest tornado of the outbreak, an EF-5, hit northern Alabama, killing 78 people. Several major metropolitan areas were directly impacted by strong tornadoes including Tuscaloosa, Birmingham, and Huntsville in Alabama and Chattanooga, Tennessee, causing the estimated damage costs to soar.", "Event ID": "10091"}, {"Disaster": "Ohio Valley/South Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/19/2011", "Ending Date": "4/20/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 1182.8, "Deaths": 0, "Description": "Dozens of tornadoes and severe storms affect the states AR, IL, IN, KY, MO, OH, TN, TX across the Ohio Valley and South.", "Event ID": "10092"}, {"Disaster": "Midwest/Southeast Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/14/2011", "Ending Date": "4/16/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2347.5, "Deaths": 38, "Description": "Outbreak of tornadoes over central and southern states (OK, TX, AR, MS, AL, GA, NC, SC, VA, PA) with an estimated 177 tornadoes.", "Event ID": "10093"}, {"Disaster": "Southeast/Midwest Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/8/2011", "Ending Date": "4/11/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2484.4, "Deaths": 0, "Description": "Outbreak of tornadoes over central and southern states (NC, SC, TN, AL, TX, OK, KS, IA, WI) with an estimated 59 tornadoes.", "Event ID": "10094"}, {"Disaster": "Midwest/Southeast Tornadoes (April 2011)", "Disaster Type": "Severe Storm", "Beginning Date": "4/4/2011", "Ending Date": "4/5/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 3163.7, "Deaths": 9, "Description": "Outbreak of tornadoes over central and southern states (KS, MO, IA, IL, WI, KY, GA, TN, NC, SC) with an estimated 46 tornadoes.", "Event ID": "10095"}, {"Disaster": "Groundhog Day Blizzard (February 2011)", "Disaster Type": "Winter Storm", "Beginning Date": "2/1/2011", "Ending Date": "2/3/2011", "Total CPI-Adjusted Cost (Millions of Dollars)": 2045.4, "Deaths": 36, "Description": "A large winter storm impacted many central, eastern and northeastern states. The city of Chicago was brought to a virtual standstill as between 1 and 2 feet of snow fell over the area.", "Event ID": "10096"}, {"Disaster": "Arizona Severe Weather (October 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "10/5/2010", "Ending Date": "10/6/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 4408.0, "Deaths": 0, "Description": "An unusual series of severe thunderstorms across Arizona produced numerous tornadoes and widespread, severe hail damage. Over one-hundred buildings were damaged or destroyed by tornadoes while thousands of automobiles and buildings were damaged by large hail across Phoenix and surrounding cities.", "Event ID": "10097"}, {"Disaster": "Midwest/Northeast Severe Storms and Flooding (July 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "7/20/2010", "Ending Date": "7/23/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 1100.0, "Deaths": 0, "Description": "Severe storms and flooding affect the states IA, IL, MD, NY, PA, WI across the Midwest and Northeast.", "Event ID": "10098"}, {"Disaster": "Rockies/Central/East Severe Weather (June 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "6/10/2010", "Ending Date": "6/15/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 1045.1, "Deaths": 2, "Description": "Severe storms cause high wind and hail damage across numerous states including CO, NM, KS, OK, IL, IN, GA, SC and NC.", "Event ID": "10099"}, {"Disaster": "Oklahoma, Kansas, and Texas Tornadoes and Severe Weather (May 2010)", "Disaster Type": "Severe Storm", "Beginning Date": "5/10/2010", "Ending Date": "5/12/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 3867.2, "Deaths": 3, "Description": "An outbreak of tornadoes, hail, and severe thunderstorms occurred across Oklahoma, Kansas, and Texas in mid-May. Oklahoma was hardest hit with > 1.5 (1.7) billion in damages.", "Event ID": "10100"}, {"Disaster": "East/South Flooding and Severe Weather (May 2010)", "Disaster Type": "Flooding", "Beginning Date": "4/30/2010", "Ending Date": "5/2/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 2628.9, "Deaths": 32, "Description": "Flooding, hail, tornadoes, and severe thunderstorms occurred across many Southern states (TN, AR, AL, KY, MS, GA) on April 30-May 2. Flooding in the Nashville, TN area alone contributed > 1.0 (1.2) billion in damages. Western and Middle Tennessee were hardest hit with local rainfall amounts of 18-20 inches to the south and west of Greater Nashville.", "Event ID": "10101"}, {"Disaster": "Northeast Flooding (March 2010)", "Disaster Type": "Flooding", "Beginning Date": "3/1/2010", "Ending Date": "3/31/2010", "Total CPI-Adjusted Cost (Millions of Dollars)": 2139.3, "Deaths": 11, "Description": "Heavy rainfall over portions of the Northeast in late March caused extensive flooding across several states (RI, CT, MA, NJ, NY, PA). The event caused the worst flooding in Rhode Island's history.", "Event ID": "10102"}, {"Disaster": "Southwest/Great Plains Drought (2009)", "Disaster Type": "Drought", "Beginning Date": "1/1/2009", "Ending Date": "12/31/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 4155.4, "Deaths": 0, "Description": "Drought conditions occurred during much of the year across parts of the Southwest, Great Plains, and southern Texas causing agricultural losses in numerous states (TX, OK, KS, CA, NM, AZ). The largest agriculture losses occurred in TX and CA.", "Event ID": "10103"}, {"Disaster": "Western Wildfires (Summer-Fall 2009)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2009", "Ending Date": "11/30/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1206.6, "Deaths": 10, "Description": "\"Residual and sustained drought conditions across western and south-central states resulted in thousands of wildfires. Most affected states include CA, AZ, NM, TX, OK, and UT. National acreage burned exceeding 5.9 million. Over 200 homes and structures destroyed in the California \"\"Station\"\" fire alone.\"", "Event ID": "10104"}, {"Disaster": "Colorado Hail Storm (July 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "7/20/2009", "Ending Date": "7/20/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1190.0, "Deaths": 0, "Description": "Severe hail impacts Colorado. Jefferson County was most affected with hail at least 8 inches deep. The hail damage from this storm was comparable to the July 11, 1990 Colorado hail storm.", "Event ID": "10105"}, {"Disaster": "Midwest, South and East Severe Weather (June 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "6/9/2009", "Ending Date": "6/12/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1580.4, "Deaths": 0, "Description": "Sustained outbreak of thunderstorms and high winds from a strong derecho event over the central, southern, and eastern states (TX, OK, MO, NE, KS, AR, AL, MS, TN, NC, SC, KY, PA).", "Event ID": "10106"}, {"Disaster": "South/Southeast Severe Weather & Tornadoes (April 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "4/9/2009", "Ending Date": "4/10/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1701.8, "Deaths": 6, "Description": "Outbreak of tornadoes, hail and severe thunderstorms over the south and southeastern states (AL, AR, GA, KY, MO, SC, TN) with 85 confirmed tornadoes.", "Event ID": "10107"}, {"Disaster": "Midwest/Southeast Tornadoes (March 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "3/25/2009", "Ending Date": "3/28/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 1952.3, "Deaths": 0, "Description": "Outbreak of tornadoes over central and southern states (NE, KS, OK, IA, TX, LA, MS, AL, GA, TN, KY) with 56 tornadoes confirmed.", "Event ID": "10108"}, {"Disaster": "Southeast/Ohio Valley Severe Weather (February 2009)", "Disaster Type": "Severe Storm", "Beginning Date": "2/10/2009", "Ending Date": "2/11/2009", "Total CPI-Adjusted Cost (Millions of Dollars)": 2070.8, "Deaths": 10, "Description": "Complex of severe thunderstorms and high winds across the region (TN, KY, OK, OH, VA, WV, PA).", "Event ID": "10109"}, {"Disaster": "U.S. Drought (2008)", "Disaster Type": "Drought", "Beginning Date": "1/1/2008", "Ending Date": "12/31/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 8341.8, "Deaths": 0, "Description": "Severe drought and heat caused agricultural losses across a large portion of the U.S. Record low lake levels also occurred in areas of the southeast. The states impacted include AL, AR, CA, CO, GA, ID, IN, KS, KY, MD, MN, MS, MT, NC, ND, NJ, NM, OH, OK, OR, SC, TN, TX, UT, VA, WA and WI.", "Event ID": "10110"}, {"Disaster": "U.S. Wildfires (Fall 2008)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2008", "Ending Date": "11/30/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1468.6, "Deaths": 16, "Description": "Drought conditions across numerous western, central and southeastern states (AK, AZ, CA, NM, ID, UT, MT, NV, OR, WA, CO, TX, OK, NC, FL ) resulted in thousands of wildfires; national acreage burned exceeding 5.2 million acres (mainly in the west) and over 1,000 homes and structures destroyed in California fires alone.", "Event ID": "10111"}, {"Disaster": "Hurricane Ike (September 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/12/2008", "Ending Date": "9/14/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 35698.6, "Deaths": 112, "Description": "Category 2 hurricane makes landfall in Texas, as the largest (in size) Atlantic hurricane on record, causing considerable storm surge in coastal TX and significant wind and flooding damage in TX, LA, AR, TN, IL, IN, KY, MO, OH, MI and PA. Severe gasoline shortages occurred in the southeast U.S. due to damaged oil platforms, storage tanks, pipelines and off-line refineries.", "Event ID": "10112"}, {"Disaster": "Hurricane Gustav (September 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/31/2008", "Ending Date": "9/3/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 7136.4, "Deaths": 53, "Description": "Category 2 hurricane makes landfall in Louisiana causing significant wind, storm surge, and flooding damage in AL, AR, LA, and MS.", "Event ID": "10113"}, {"Disaster": "Hurricane Dolly (July 2008)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/23/2008", "Ending Date": "7/25/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1508.1, "Deaths": 3, "Description": "Category 2 hurricane makes landfall in southern Texas causing considerable wind and flooding damage in TX and NM.", "Event ID": "10114"}, {"Disaster": "Midwest Flooding (Summer 2008)", "Disaster Type": "Flooding", "Beginning Date": "4/1/2008", "Ending Date": "6/30/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 11850.7, "Deaths": 24, "Description": "Heavy rain and flooding caused significant agricultural loss and property damage in IA, IL, IN, MO, MN, NE, and WI with IA being hardest hit with widespread rainfall totals ranging from 4 to over 16 inches.", "Event ID": "10115"}, {"Disaster": "Midwest/Mid-Atlantic Severe Weather (June 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "6/6/2008", "Ending Date": "6/12/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1946.6, "Deaths": 18, "Description": "An outbreak of tornadoes and thunderstorms over the Midwest/Mid-Atlantic states (IA, IL, IN, KS, NE, MI, MN, MO, OK, WI, MD, VA, WV).", "Event ID": "10116"}, {"Disaster": "Midwest Tornadoes and Severe Weather (May 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "5/22/2008", "Ending Date": "5/27/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 3605.0, "Deaths": 13, "Description": "Outbreak of tornadoes over the Midwest/Ohio Valley regions (IL, IN, IA, KS, MN, NE, OK, WY, CO) with 235 tornadoes confirmed.", "Event ID": "10117"}, {"Disaster": "Southern Severe Weather (April 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "4/9/2008", "Ending Date": "4/11/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1237.2, "Deaths": 2, "Description": "Severe storms affect Arkansas, Oklahoma and Texas across the South.", "Event ID": "10118"}, {"Disaster": "Southeast Tornadoes (March 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "3/14/2008", "Ending Date": "3/15/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1345.9, "Deaths": 5, "Description": "Tornadoes and severe weather across Georgia and South Carolina. This includes an EF-2 tornado causing damage to numerous buildings in downtown Atlanta.", "Event ID": "10119"}, {"Disaster": "Southeast Tornadoes and Severe Weather (February 2008)", "Disaster Type": "Severe Storm", "Beginning Date": "2/5/2008", "Ending Date": "2/6/2008", "Total CPI-Adjusted Cost (Millions of Dollars)": 1441.8, "Deaths": 57, "Description": "Series of tornadoes and severe thunderstorms across the Southeast and Midwest states (AL, AR, IN, KY, MS, OH, TN, TX) with 87 tornadoes confirmed.", "Event ID": "10120"}, {"Disaster": "Western/Eastern Drought/Heatwave (Summer-Fall 2007)", "Disaster Type": "Drought", "Beginning Date": "6/1/2007", "Ending Date": "11/30/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 4422.9, "Deaths": 15, "Description": "Severe drought with periods of extreme heat over most of the southeast and portions of the Great Plains, Ohio Valley, and Great Lakes area, resulting in major reductions in crop yields, along with very low stream-flows and lake levels. Includes states of ND, SD, NE, KS, OK, TX, MN, WI, IA, MO, AR, LA, MS, AL, GA, NC, SC, FL, TN, VA, WV, KY, IN, IL, OH, MI, PA, NY.", "Event ID": "10121"}, {"Disaster": "Western Wildfires (Summer 2007)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/2007", "Ending Date": "8/31/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 3426.6, "Deaths": 12, "Description": "Continued drought conditions and high winds over much of the western U.S. (AK, AZ, CA, ID, UT, MT, NV, OR, WA) resulting in numerous wildfires; with national acreage burned exceeding 8.9 million acres (mainly in the west) and over 3,000 homes and structures destroyed in southern California alone.", "Event ID": "10122"}, {"Disaster": "East/South Severe Weather and Flooding (April 2007)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2007", "Ending Date": "4/17/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 3135.2, "Deaths": 9, "Description": "\"Flooding, hail, tornadoes, and severe thunderstorms across numerous states (CT, DE, GA, LA, ME, MD, MA, MS, NH, NJ, NY, NC, PA, RI, SC, TX, VT, VA) in mid-April, including 3 \"\"killer\"\" tornadoes.\"", "Event ID": "10123"}, {"Disaster": "Spring Freeze (April 2007)", "Disaster Type": "Freeze", "Beginning Date": "4/4/2007", "Ending Date": "4/10/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 2555.4, "Deaths": 0, "Description": "Widespread severe freeze over much of the east and midwest (AL, AR, GA, IA, IL, IN, KS, KY, MO, MS, NC, NE, OH, OK, SC, TN, VA, WV), causing significant losses in fruit crops, field crops (especially wheat), and the ornamental industry. Temperatures in the teens/20s accompanied by rather high winds nullified typical crop-protection systems.", "Event ID": "10124"}, {"Disaster": "California Freeze (January 2007)", "Disaster Type": "Freeze", "Beginning Date": "1/11/2007", "Ending Date": "1/17/2007", "Total CPI-Adjusted Cost (Millions of Dollars)": 1750.0, "Deaths": 1, "Description": "Widespread agricultural freeze -- for nearly two weeks in January, overnight temperatures over a good portion of California dipped into the 20s, destroying numerous agricultural crops; with citrus, berry, and vegetable crops most affected.", "Event ID": "10125"}, {"Disaster": "Numerous Wildfires (2006)", "Disaster Type": "Wildfire", "Beginning Date": "1/1/2006", "Ending Date": "12/31/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1863.1, "Deaths": 28, "Description": "Numerous wildfires driven by dry weather and high winds burned over 9.8 million acres, across the western half of the country including Alaska. This is the second highest annual total behind the 10.1 million acres burned in 2015 since record-keeping began in 1960. The most affected states were AK, AZ, CA, CO, FL, ID, MT, NM, NV, OK, OR, TX, WA, WY", "Event ID": "10126"}, {"Disaster": "Central Severe Weather (October 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "10/2/2006", "Ending Date": "10/5/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1116.5, "Deaths": 1, "Description": "Severe storms cause high wind and hail damage across numerous states including OH, IL, IN, MI, MN and WI.", "Event ID": "10127"}, {"Disaster": "Midwest/Plains/Southeast Drought (Spring-Summer 2006)", "Disaster Type": "Drought", "Beginning Date": "3/1/2006", "Ending Date": "8/31/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 7617.4, "Deaths": 0, "Description": "Rather severe drought affected crops especially during the spring-summer, centered over the Great Plains region with other areas affected across portions of the south -- including states of ND, SD, NE, KS, OK, TX, MN, IA, MO, AR, LA, MS, AL, GA, FL, MT, WY, CO, NM.", "Event ID": "10128"}, {"Disaster": "Northeast Flooding (June 2006)", "Disaster Type": "Flooding", "Beginning Date": "6/25/2006", "Ending Date": "6/28/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1932.4, "Deaths": 20, "Description": "Severe flooding over portions of the northeast due to several weeks of heavy rainfall, affecting the states of NY, PA, DE, MD, NJ, and VA.", "Event ID": "10129"}, {"Disaster": "Midwest Tornadoes (April 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "4/13/2006", "Ending Date": "4/16/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 3078.0, "Deaths": 27, "Description": "Tornadoes and severe weather cause significant damage in the states of IA, IL, IN, and WI. The state of Indiana was most affected with over one billion dollars in damage.", "Event ID": "10130"}, {"Disaster": "Midwest/Southeast Tornadoes (April 6-8, 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "4/6/2006", "Ending Date": "4/8/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 2037.0, "Deaths": 10, "Description": "\"Severe weather and numerous tornadoes affecting the states of OK, KS, MO, NE, KY, OH, TN, IN, MS, GA, and AL on April 6-8 with 3 \"\"killer\"\" tornadoes in TN.\"", "Event ID": "10131"}, {"Disaster": "Severe Storms and Tornadoes (March 2006)", "Disaster Type": "Severe Storm", "Beginning Date": "3/8/2006", "Ending Date": "3/13/2006", "Total CPI-Adjusted Cost (Millions of Dollars)": 1698.8, "Deaths": 10, "Description": "Outbreak of tornadoes over portions of the midwest and south during a week-long period-affecting the states of AL, AR, KY, MS, TN, TX, IN, KS, MO, and OK.", "Event ID": "10132"}, {"Disaster": "Hurricane Wilma (October 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/24/2005", "Ending Date": "10/24/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 25080.0, "Deaths": 35, "Description": "Category 3 hurricane hits SW Florida resulting in strong damaging winds and major flooding across southeastern Florida. Prior to landfall, Wilma as a Category 5 recorded the lowest pressure (882 mb) ever recorded in the Atlantic basin.", "Event ID": "10133"}, {"Disaster": "Hurricane Rita (September 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/20/2005", "Ending Date": "9/24/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 24420.1, "Deaths": 119, "Description": "Category 3 hurricane hits Texas-Louisiana border coastal region, creating significant storm surge and wind damage along the coast, and some inland flooding in the FL panhandle, AL, MS, LA, AR, and TX. Prior to landfall, Rita reached the third lowest pressure (897 mb) ever recorded in the Atlantic basin.", "Event ID": "10134"}, {"Disaster": "Midwest Drought (Spring-Summer 2005)", "Disaster Type": "Drought", "Beginning Date": "3/1/2005", "Ending Date": "8/31/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 1946.7, "Deaths": 0, "Description": "Rather severe localized drought causes significant crop losses (especially for corn and soybeans) in the states of AR, IL, IN, MO, OH, and WI.", "Event ID": "10135"}, {"Disaster": "Hurricane Katrina (August 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/25/2005", "Ending Date": "8/30/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 165012.0, "Deaths": 1833, "Description": "Category 3 hurricane initially impacts the U.S. as a Category 1 near Miami, FL, then as a strong Category 3 along the eastern LA-western MS coastlines, resulting in severe storm surge damage (maximum surge probably exceeded 30 feet) along the LA-MS-AL coasts, wind damage, and the failure of parts of the levee system in New Orleans. Inland effects included high winds and some flooding in the states of AL, MS, FL, TN, KY, IN, OH, and GA.", "Event ID": "10136"}, {"Disaster": "Hurricane Dennis (July 2005)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/9/2005", "Ending Date": "7/11/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 3293.4, "Deaths": 15, "Description": "Category 3 hurricane makes landfall in western Florida panhandle resulting in storm surge and wind damage along the FL and AL coasts, along with scattered wind and flood damage in GA and MS.", "Event ID": "10137"}, {"Disaster": "Southeast Severe Weather (March 2005)", "Disaster Type": "Severe Storm", "Beginning Date": "3/24/2005", "Ending Date": "3/27/2005", "Total CPI-Adjusted Cost (Millions of Dollars)": 1141.8, "Deaths": 0, "Description": "Severe storms cause widespread hail damage across numerous states including TX, AL, MS, GA, FL, NC and VA.", "Event ID": "10138"}, {"Disaster": "Hurricane Jeanne (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/15/2004", "Ending Date": "9/29/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 10195.3, "Deaths": 28, "Description": "Category 3 hurricane makes landfall in east-central Florida, causing considerable wind, storm surge, and flooding damage in FL, with some flood damage also in the states of GA, SC, NC, VA, MD, DE, NJ, PA, and NY. Puerto Rico also affected.", "Event ID": "10139"}, {"Disaster": "Hurricane Ivan (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/12/2004", "Ending Date": "9/21/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 27880.6, "Deaths": 57, "Description": "Category 3 hurricane makes landfall on Gulf coast of Alabama, with significant wind, storm surge, and flooding damage in coastal AL and FL panhandle, along with wind/flood damage in the states of GA, MS, LA, SC, NC, VA, WV, MD, TN, KY, OH, DE, NJ, PA, and NY.", "Event ID": "10140"}, {"Disaster": "Hurricane Frances (September 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/3/2004", "Ending Date": "9/9/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 13328.0, "Deaths": 48, "Description": "Category 2 hurricane makes landfall in east-central Florida, causing significant wind, storm surge, and flooding damage in FL, along with considerable flood damage in the states of GA, SC, NC, and NY due to 5-15 inch rains.", "Event ID": "10141"}, {"Disaster": "Hurricane Charley (August 2004)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/13/2004", "Ending Date": "8/14/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 21759.4, "Deaths": 35, "Description": "Category 4 hurricane makes landfall in southwest Florida, resulting in major wind and some storm surge damage in FL, along with some damage in the states of SC and NC.", "Event ID": "10142"}, {"Disaster": "Severe Storms, Hail, Tornadoes (May 2004)", "Disaster Type": "Severe Storm", "Beginning Date": "5/21/2004", "Ending Date": "5/27/2004", "Total CPI-Adjusted Cost (Millions of Dollars)": 1378.9, "Deaths": 4, "Description": "Severe storms including tornadoes and hail cause damage across the Midwest, South, Southeast and Northeast regions. The states impacted include IA, IL, IN, KY, MI, MO, NC, NE, NY, OK, OH and WI.", "Event ID": "10143"}, {"Disaster": "California Wildfires (Fall 2003)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2003", "Ending Date": "11/30/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 5407.6, "Deaths": 22, "Description": "Dry weather, high winds, and resulting wildfires in Southern California burned over 3,700 homes. Nearly 4.0 million acres burned across numerous western states including Alaska.", "Event ID": "10144"}, {"Disaster": "Western/Central Drought/Heatwave (Spring-Fall 2003)", "Disaster Type": "Drought", "Beginning Date": "3/1/2003", "Ending Date": "11/30/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 6945.1, "Deaths": 35, "Description": "2003 drought across western and central portions of the U.S. with losses to agriculture. The states impacted include AZ, CO, IA, ID, IL, KS, MI, MN, MO, MT, ND, NE, NM, OR, SD, WA and WI.", "Event ID": "10145"}, {"Disaster": "Hurricane Isabel (September 2003)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/18/2003", "Ending Date": "9/19/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 7622.8, "Deaths": 55, "Description": "Category 2 hurricane makes landfall in eastern North Carolina, causing considerable storm surge damage along the coasts of NC, VA, and MD, with wind damage and some flooding due to 4-12 inch rains in NC, VA, MD, DE, WV, NJ, NY, and PA.", "Event ID": "10146"}, {"Disaster": "Severe Weather (July 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "7/21/2003", "Ending Date": "7/23/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 1401.2, "Deaths": 7, "Description": "Severe storms impact states across the South, Southeast, Midwest and Northeast regions. The states most impacted include AR, AL, MS, GA, FL, SC, TN, KY, MI, NY, OH, PA and VT.", "Event ID": "10147"}, {"Disaster": "Midwest/Plains Severe Weather (July 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "7/4/2003", "Ending Date": "7/9/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 1192.6, "Deaths": 7, "Description": "Severe storms affect the states IA, IL, IN, MI, MN, OH, VA, WV across the Midwest and Plains.", "Event ID": "10148"}, {"Disaster": "Severe Storms/Tornadoes (May 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "5/3/2003", "Ending Date": "5/10/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 5738.5, "Deaths": 51, "Description": "Numerous tornadoes over the midwest, Mississippi valley, OH/TN valleys, and portions of the southeast, with a modern record one-week total of approximately 400 tornadoes reported", "Event ID": "10149"}, {"Disaster": "Severe Storms/Hail (April 2003)", "Disaster Type": "Severe Storm", "Beginning Date": "4/4/2003", "Ending Date": "4/7/2003", "Total CPI-Adjusted Cost (Millions of Dollars)": 2788.8, "Deaths": 3, "Description": "Severe storms and large hail over the southern plains and lower MS valley, with Texas hardest hit, and much of the monetary losses due to hail.", "Event ID": "10150"}, {"Disaster": "Western Fire Season (Fall 2002)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/2002", "Ending Date": "11/30/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 1878.4, "Deaths": 21, "Description": "Major wildfires over 11 western states from the Rockies to the west coast due to drought and periodic high winds, with over 7.1 million acres burned.", "Event ID": "10151"}, {"Disaster": "U.S. Drought (Spring-Fall 2002)", "Disaster Type": "Drought", "Beginning Date": "3/1/2002", "Ending Date": "11/30/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 12775.8, "Deaths": 0, "Description": "Moderate to extreme drought over large portions of 30 states, including the western states, the Great Plains, and much of the eastern U.S.", "Event ID": "10152"}, {"Disaster": "Hurricane Lili (October 2002)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/1/2002", "Ending Date": "8/5/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 1568.4, "Deaths": 2, "Description": "Category 1 hurricane makes landfall in Louisiana after causing damage across Saint Lucia, Jamaica, Haiti and Cuba.", "Event ID": "10153"}, {"Disaster": "Severe Storms and Tornadoes (April 2002)", "Disaster Type": "Severe Storm", "Beginning Date": "4/27/2002", "Ending Date": "4/28/2002", "Total CPI-Adjusted Cost (Millions of Dollars)": 2973.5, "Deaths": 7, "Description": "Numerous tornadoes and widespread hail damage over the Central and Eastern states including NC, GA, VA, TX, AR, MO, MS, TN, IL, IN, KY, PA, MD, NY, OH, WV, and KS.", "Event ID": "10154"}, {"Disaster": "Tropical Storm Allison (June 2001)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "6/5/2001", "Ending Date": "6/17/2001", "Total CPI-Adjusted Cost (Millions of Dollars)": 12271.7, "Deaths": 43, "Description": "The persistent remnants of Tropical Storm Allison produce rainfall amounts of 30-40 inches in portions of coastal Texas and Louisiana, causing severe flooding especially in the Houston area, then moves slowly northeastward; fatalities and significant damage reported in TX, LA, MS, FL, VA, and PA", "Event ID": "10155"}, {"Disaster": "Midwest/Ohio Valley Hail and Tornadoes (April 2001)", "Disaster Type": "Severe Storm", "Beginning Date": "4/6/2001", "Ending Date": "4/11/2001", "Total CPI-Adjusted Cost (Millions of Dollars)": 4456.6, "Deaths": 3, "Description": "Storms, tornadoes, and hail in the states of TX, OK, KS, NE, IA, MO, IL, IN, WI, MI, OH, KY, WV, and PA, over a 6-day period.", "Event ID": "10156"}, {"Disaster": "Western/Central/Southeast Drought/Heatwave (Spring-Fall 2000)", "Disaster Type": "Drought", "Beginning Date": "3/1/2000", "Ending Date": "11/30/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 7445.7, "Deaths": 140, "Description": "Western/Central/Southeast Drought/Heatwave. The states impacted include AZ, AL, AR, CA, CO, FL, GA, IA, KS, LA, MS, MT, NE, NM, OK, OR, SC, TN, and TX.", "Event ID": "10157"}, {"Disaster": "South Florida Flooding (October 2000)", "Disaster Type": "Flooding", "Beginning Date": "10/3/2000", "Ending Date": "10/4/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 1341.0, "Deaths": 3, "Description": "Heavy rainfall up to 15 inches affected south Florida surrounding Miami that resulted in severe flooding that damaged thousands of homes and businesses. There was also several hundred million in damage done to agriculture.", "Event ID": "10158"}, {"Disaster": "Western Fire Season (Spring-Summer 2000)", "Disaster Type": "Wildfire", "Beginning Date": "3/1/2000", "Ending Date": "8/31/2000", "Total CPI-Adjusted Cost (Millions of Dollars)": 1601.9, "Deaths": 0, "Description": "Severe wildfire season in the western states due to drought and frequent winds, with nearly 7 million acres burned.", "Event ID": "10159"}, {"Disaster": "Hurricane Floyd (September 1999)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/14/1999", "Ending Date": "9/16/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 9931.4, "Deaths": 77, "Description": "Large, category 2 hurricane makes landfall in eastern NC, causing 10-20 inch rains in 2 days, with severe flooding in NC and some flooding in SC, VA, MD, PA, NY, NJ, DE, RI, CT, MA, NH, and VT.", "Event ID": "10160"}, {"Disaster": "Eastern Drought/Heatwave (Summer 1999)", "Disaster Type": "Drought", "Beginning Date": "6/1/1999", "Ending Date": "8/31/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 3823.4, "Deaths": 502, "Description": "Very dry summer and high temperatures, mainly in eastern U.S., with extensive agricultural losses. The states impacted include AL, AR, FL, GA, KY, LA, MD, MS, NC, NJ, OH, SC, TN, VA, WV and PA.", "Event ID": "10161"}, {"Disaster": "Oklahoma and Kansas Tornadoes (May 1999)", "Disaster Type": "Severe Storm", "Beginning Date": "5/3/1999", "Ending Date": "5/6/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 3078.7, "Deaths": 55, "Description": "Outbreak of F4-F5 tornadoes hit the states of Oklahoma and Kansas, along with Texas and Tennessee, Oklahoma City area hardest hit.", "Event ID": "10162"}, {"Disaster": "Central and Eastern Winter Storm (Mid-January 1999)", "Disaster Type": "Winter Storm", "Beginning Date": "1/13/1999", "Ending Date": "1/16/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 1349.5, "Deaths": 0, "Description": "Winter storm affecting the Central and Eastern states including IL, IN, OH, MI, WV, VA, MD, PA, NJ, NY, MA, CT, VT, NH and ME.", "Event ID": "10163"}, {"Disaster": "Central and Eastern Winter Storm (January 1999)", "Disaster Type": "Winter Storm", "Beginning Date": "1/1/1999", "Ending Date": "1/4/1999", "Total CPI-Adjusted Cost (Millions of Dollars)": 1580.2, "Deaths": 25, "Description": "South, Southeast, Midwest, Northeast affected by damaging winter storm", "Event ID": "10164"}, {"Disaster": "California Freeze (December 1998)", "Disaster Type": "Freeze", "Beginning Date": "12/20/1998", "Ending Date": "12/28/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 3900.0, "Deaths": 0, "Description": "A severe freeze damaged fruit and vegetable crops in the Central and Southern San Joaquin Valley. Extended intervals of sub 27\u00b0 F temperatures occurred over an 8-day period.", "Event ID": "10165"}, {"Disaster": "Texas Flooding (October 1998)", "Disaster Type": "Flooding", "Beginning Date": "10/16/1998", "Ending Date": "10/24/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1469.7, "Deaths": 31, "Description": "Severe flooding in southeast Texas from 2 heavy rain events, with 10-20 inch rainfall totals", "Event ID": "10166"}, {"Disaster": "Hurricane Georges (September 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/20/1998", "Ending Date": "9/29/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 9336.0, "Deaths": 16, "Description": "Category 2 hurricane strikes Puerto Rico, Virgin Islands, Florida Keys, and Gulf coasts of Louisiana, Mississippi, Alabama, and Florida panhandle, 15-30 inch 2-day rain totals in parts of Alabama and Florida", "Event ID": "10167"}, {"Disaster": "Southern Drought/Heat Wave (Summer 1998)", "Disaster Type": "Drought", "Beginning Date": "6/1/1998", "Ending Date": "8/31/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 5503.9, "Deaths": 200, "Description": "Severe drought and heat wave from Texas/Oklahoma eastward to the Carolinas. The states impacted include AL, AR, FL, GA, LA, MS, NC, OK, SC, TN, TX, and VA.", "Event ID": "10168"}, {"Disaster": "Hurricane Bonnie (August 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/27/1998", "Ending Date": "8/29/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1528.8, "Deaths": 3, "Description": "Category 3 hurricane strikes eastern North Carolina and Virginia, extensive agricultural damage due to winds and flooding, with 10-inch rains in 2 days in some locations.", "Event ID": "10169"}, {"Disaster": "Tropical Storm Frances (September 1998)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/8/1998", "Ending Date": "8/13/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1092.0, "Deaths": 2, "Description": "Tropical Storm Frances caused extensive flooding in Texas and Louisiana. The rainfall totals from Frances were 10 to 20 inches across eastern Texas into southern Louisiana.", "Event ID": "10170"}, {"Disaster": "Severe Storms, Tornadoes (June 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "5/30/1998", "Ending Date": "6/2/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1775.9, "Deaths": 20, "Description": "Severe storms in late May through early June hit the Midwest, North, Northeast, and Southeast", "Event ID": "10171"}, {"Disaster": "Minnesota Severe Storms/Hail (May 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "5/15/1998", "Ending Date": "5/15/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 2544.8, "Deaths": 1, "Description": "Very damaging severe thunderstorms with large hail over wide areas of Minnesota", "Event ID": "10172"}, {"Disaster": "Western/Eastern Severe Weather and Flooding (Winter-Spring 1998)", "Disaster Type": "Severe Storm", "Beginning Date": "12/1/1997", "Ending Date": "2/28/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 1587.0, "Deaths": 132, "Description": "Tornadoes and flooding cause damage across the West and Southeast. The states impacted include CA, TX, FL, AL, GA, LA, MS, NC and SC.", "Event ID": "10173"}, {"Disaster": "Northeast Ice Storm (January 1998)", "Disaster Type": "Winter Storm", "Beginning Date": "1/5/1998", "Ending Date": "1/9/1998", "Total CPI-Adjusted Cost (Millions of Dollars)": 2186.7, "Deaths": 16, "Description": "Intense ice storm hits Maine, New Hampshire, Vermont, and New York, with extensive forestry losses", "Event ID": "10174"}, {"Disaster": "Northern Plains Flooding (Spring 1997)", "Disaster Type": "Flooding", "Beginning Date": "2/3/1997", "Ending Date": "5/24/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 5809.0, "Deaths": 11, "Description": "Severe flooding in North Dakota, South Dakota and Minnesota due to heavy spring snow melt. This flooding caused widespread damage to agriculture, infrastructure, homes and businesses.", "Event ID": "10175"}, {"Disaster": "Mississippi and Ohio Valley Severe Weather and Flooding (March 1997)", "Disaster Type": "Severe Storm", "Beginning Date": "2/28/1997", "Ending Date": "3/5/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 1544.5, "Deaths": 67, "Description": "Tornadoes and severe flooding hit the states of AR, MO, MS, TN, IL, IN, KY, OH, and WV, with over 10 inches of rain in 24 hours in Louisville.", "Event ID": "10176"}, {"Disaster": "West Coast Flooding (December 1996-January 1997)", "Disaster Type": "Flooding", "Beginning Date": "1/1/1997", "Ending Date": "1/11/1997", "Total CPI-Adjusted Cost (Millions of Dollars)": 4766.9, "Deaths": 36, "Description": "Torrential rains (10-40 inches in 2 weeks) and snowmelt produce severe flooding over portions of CA, WA, OR, ID, NV, and MT.", "Event ID": "10177"}, {"Disaster": "Hurricane Fran (September 1996)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/5/1996", "Ending Date": "9/8/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 8161.5, "Deaths": 37, "Description": "Category 3 hurricane strikes North Carolina and Virginia, over 10-inch 24-hour rains in some locations and extensive agricultural and other losses.", "Event ID": "10178"}, {"Disaster": "Southern Plains Drought (Spring-Summer 1996)", "Disaster Type": "Drought", "Beginning Date": "3/1/1996", "Ending Date": "8/31/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 2920.1, "Deaths": 0, "Description": "Severe drought in agricultural regions of southern plains--Texas and Oklahoma most severely affected", "Event ID": "10179"}, {"Disaster": "Pacific Northwest Severe Flooding (February 1996)", "Disaster Type": "Flooding", "Beginning Date": "2/7/1996", "Ending Date": "2/12/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 1643.5, "Deaths": 9, "Description": "Very heavy, persistent rains (10-30 inches) and melting snow over OR, WA, ID, and western MT.", "Event ID": "10180"}, {"Disaster": "Blizzard/Floods (January 1996)", "Disaster Type": "Winter Storm", "Beginning Date": "1/1/1996", "Ending Date": "1/31/1996", "Total CPI-Adjusted Cost (Millions of Dollars)": 4895.1, "Deaths": 187, "Description": "Very heavy snowstorm (1-4 feet) over Appalachians, Mid-Atlantic, and Northeast; followed by severe flooding in parts of same area due to rain and snowmelt.", "Event ID": "10181"}, {"Disaster": "Hurricane Opal (October 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/4/1995", "Ending Date": "10/6/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 7877.5, "Deaths": 27, "Description": "Category 3 hurricane strikes Florida panhandle, Alabama, western Georgia, eastern Tennessee, and the western Carolinas, causing storm surge, wind, and flooding damage.", "Event ID": "10182"}, {"Disaster": "Hurricane Marilyn (September 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/15/1995", "Ending Date": "9/17/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 3528.0, "Deaths": 13, "Description": "Category 2 hurricane impacts the U.S. Virgin Islands and Puerto Rico with maximum sustained winds of 110 mph.", "Event ID": "10183"}, {"Disaster": "Hurricane Erin (August 1995)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/1/1995", "Ending Date": "8/7/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 1428.0, "Deaths": 6, "Description": "Hurricane Erin impacted Florida as a category 1 hurricane. Most of the damage resulted from heavy rainfall and flooding in Florida, Alabama and Mississippi.", "Event ID": "10184"}, {"Disaster": "South Plains Severe Weather (May 1995)", "Disaster Type": "Severe Storm", "Beginning Date": "5/5/1995", "Ending Date": "5/7/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 9217.2, "Deaths": 32, "Description": "Torrential rains, hail, and tornadoes across Texas-Oklahoma and southeast Louisiana-southern Mississippi, with Dallas and New Orleans areas (10-25 inch rains in 5 days) hardest hit.", "Event ID": "10185"}, {"Disaster": "California Flooding (January-March 1995)", "Disaster Type": "Flooding", "Beginning Date": "1/1/1995", "Ending Date": "3/31/1995", "Total CPI-Adjusted Cost (Millions of Dollars)": 4200.0, "Deaths": 27, "Description": "Frequent winter storms cause 20-70 inch rainfall and periodic flooding across much of California", "Event ID": "10186"}, {"Disaster": "Western Fire Season (Summer-Fall 1994)", "Disaster Type": "Wildfire", "Beginning Date": "6/1/1994", "Ending Date": "11/30/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1247.0, "Deaths": 0, "Description": "Severe wildfire season in the western states due to dry weather conditions. The states most impacted include CA, AZ, OR, WA, CO, UT, NV, NM and TX.", "Event ID": "10187"}, {"Disaster": "Texas Flooding (October 1994)", "Disaster Type": "Flooding", "Beginning Date": "10/16/1994", "Ending Date": "10/25/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1720.0, "Deaths": 19, "Description": "Torrential rain (10-25 inches in 5 days) and thunderstorms cause flooding across much of southeast Texas", "Event ID": "10188"}, {"Disaster": "Tropical Storm Alberto (July 1994)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "7/7/1994", "Ending Date": "7/10/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1717.4, "Deaths": 32, "Description": "Remnants of slow-moving Alberto bring torrential 10-25 inch rains in 3 days, widespread flooding and agricultural damage in parts of Georgia, Alabama, and panhandle of Florida.", "Event ID": "10189"}, {"Disaster": "Midwest/Plains Tornadoes (April 1994)", "Disaster Type": "Severe Storm", "Beginning Date": "4/25/1994", "Ending Date": "4/27/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1694.6, "Deaths": 3, "Description": "Tornadoes and severe storms cause damage in states across the South, Southeast and Midwest. The states impacted include TX, OK, AR, CO, KS, NE, IA, SD, IL, IN, MN and MO.", "Event ID": "10190"}, {"Disaster": "Southeast Ice Storm (February 1994)", "Disaster Type": "Winter Storm", "Beginning Date": "2/8/1994", "Ending Date": "2/13/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 5155.5, "Deaths": 9, "Description": "Intense ice storm with extensive damage in portions of TX, OK, AR, LA, MS, AL, TN, GA, SC, NC, and VA.", "Event ID": "10191"}, {"Disaster": "Winter Storm, Cold Wave (January 1994)", "Disaster Type": "Winter Storm", "Beginning Date": "1/17/1994", "Ending Date": "1/20/1994", "Total CPI-Adjusted Cost (Millions of Dollars)": 1788.7, "Deaths": 70, "Description": "Winter storm affects the Southeast and Northeast regions. The states impacted include CT, DE, IL, IN, KY, MA, MD, ME, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA, VT and WV.", "Event ID": "10192"}, {"Disaster": "California Wildfires (Fall 1993)", "Disaster Type": "Wildfire", "Beginning Date": "9/1/1993", "Ending Date": "11/30/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 2427.6, "Deaths": 4, "Description": "Dry weather, high winds and wildfires in Southern California", "Event ID": "10193"}, {"Disaster": "Southeast Drought/Heat Wave (Summer 1993)", "Disaster Type": "Drought", "Beginning Date": "6/1/1993", "Ending Date": "8/31/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 2226.6, "Deaths": 16, "Description": "Drought and heat wave across Southeastern U.S. The states most impacted include AL, FL, GA, MD, NC, SC, TN, and VA.", "Event ID": "10194"}, {"Disaster": "Midwest Flooding (Summer 1993)", "Disaster Type": "Flooding", "Beginning Date": "6/27/1993", "Ending Date": "8/15/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 37100.8, "Deaths": 48, "Description": "Severe, widespread flooding in central U.S. due to persistent heavy rains and thunderstorms. There was extensive damage to agriculture, infrastructure, homes and businesses in many areas across several states. Many river stations also established new records for historical flood heights. This is the most costly non-tropical, inland flood event to affect the United States on record.", "Event ID": "10195"}, {"Disaster": "East Coast Blizzard and Severe Weather (March 1993)", "Disaster Type": "Winter Storm", "Beginning Date": "3/11/1993", "Ending Date": "3/14/1993", "Total CPI-Adjusted Cost (Millions of Dollars)": 9782.7, "Deaths": 270, "Description": "\"The \"\"Storm of the Century\"\" impacts the entire Eastern seaboard from Florida to Maine. This historic storm dumped 2-4 feet of snow and caused hurricane force winds across many Eastern and Northeastern states. This caused power outages to over 10 million households. Additional impacts included numerous tornadoes across Florida causing substantial damage. This is the most destructive and costly winter storm to affect the United States since at least 1980.\"", "Event ID": "10196"}, {"Disaster": "Northeast Winter Storm (December 1992)", "Disaster Type": "Winter Storm", "Beginning Date": "12/10/1992", "Ending Date": "12/13/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 4544.0, "Deaths": 19, "Description": "Slow-moving winter storm batters northeast U.S. coast, with the New England region hardest hit. The states impacted include VA, MD, DE, PA, NJ, NY, CT, RI, MA and WV.", "Event ID": "10197"}, {"Disaster": "Southeast Severe Weather (November 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "11/21/1992", "Ending Date": "11/23/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1202.3, "Deaths": 26, "Description": "Three-day tornado outbreak strikes many Central and Eastern states including TX, LA, AL, MS, GA, AR, IN, OH, KY, TN, and NC. Major damage was reported across many areas, as more than 100 tornadoes were reported. This event remains one of the most prolific Fall season tornado outbreaks on record.", "Event ID": "10198"}, {"Disaster": "Hurricane Iniki (September 1992)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/11/1992", "Ending Date": "9/12/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 5673.0, "Deaths": 7, "Description": "Category 4 hurricane causes severe damage to the Hawaiian island of Kauai. Hurricane Iniki is the costliest and deadliest hurricane to affect Hawaii since 1900.", "Event ID": "10199"}, {"Disaster": "Hurricane Andrew (August 1992)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/23/1992", "Ending Date": "8/27/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 49410.0, "Deaths": 61, "Description": "Category 5 hurricane hits Florida and later impacts Louisiana as a category 3. High winds damage or destroy over 125,000 homes and leave at least 160,000 people homeless in Dade County, Florida alone. Initially rated as a category 4, Andrew was later upgraded to a category 5 upon further analysis. Andrew joins Hurricane Camille (1969) and the Labor Day Hurricane (1935), as the only land falling category 5 hurricanes on record to affect the U.S. mainland. Adjusted to present-day dollars, Andrew is the 6th most costly hurricane to impact the U.S. since 1980, after Katrina (2005), Harvey (2017), Maria (2017), Sandy (2012) and Irma (2017).", "Event ID": "10200"}, {"Disaster": "Severe Storms, Hail (June 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "6/19/1992", "Ending Date": "6/20/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1368.9, "Deaths": 0, "Description": "Severe storms with hail hit Kansas and Oklahoma", "Event ID": "10201"}, {"Disaster": "Hail, Tornadoes (April 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "4/28/1992", "Ending Date": "4/29/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1746.6, "Deaths": 0, "Description": "Severe Storms hit Oklahoma and Texas with tornadoes and hail", "Event ID": "10202"}, {"Disaster": "Severe Storms (March 1992)", "Disaster Type": "Severe Storm", "Beginning Date": "3/24/1992", "Ending Date": "3/25/1992", "Total CPI-Adjusted Cost (Millions of Dollars)": 1471.9, "Deaths": 0, "Description": "Severe storms affect the South, Southeast. The states most impacted include Texas, Louisiana and Florida.", "Event ID": "10203"}, {"Disaster": "Oakland Firestorm (October 1991)", "Disaster Type": "Wildfire", "Beginning Date": "10/1/1991", "Ending Date": "10/31/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 6171.0, "Deaths": 25, "Description": "Oakland, California firestorm due to low humidity and high winds burned over 3,000 homes. This is the costliest urban wildfire to affect the United States since 1980.", "Event ID": "10204"}, {"Disaster": "U.S. Drought (Spring-Summer 1991)", "Disaster Type": "Drought", "Beginning Date": "3/1/1991", "Ending Date": "8/31/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 5625.9, "Deaths": 0, "Description": "Drought conditions over parts of the West, Central and eastern U.S. most affected the states IL, IN, KS, MN, OH, OR, PA, SD, and WA.", "Event ID": "10205"}, {"Disaster": "Hurricane Bob (August 1991)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/18/1991", "Ending Date": "8/20/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 2810.4, "Deaths": 18, "Description": "Category 2 hurricane brushes the Outer Banks of North Carolina before making landfall in Rhode Island. Its impacts were felt from North Carolina to Long Island and into New England.", "Event ID": "10206"}, {"Disaster": "Severe Storms, Tornadoes (March 1991)", "Disaster Type": "Severe Storm", "Beginning Date": "3/26/1991", "Ending Date": "3/29/1991", "Total CPI-Adjusted Cost (Millions of Dollars)": 1206.0, "Deaths": 0, "Description": "Severe storms hit the Midwest, Southeast, Northeast. The states impacted include KS, IL, MI, IN, MS, TN, KY, OH, AL, PA, NY, GA, SC and NC.", "Event ID": "10207"}, {"Disaster": "California Freeze (December 1990)", "Disaster Type": "Freeze", "Beginning Date": "12/18/1990", "Ending Date": "12/25/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 6732.0, "Deaths": 0, "Description": "Severe freeze in the Central and Southern San Joaquin Valley caused the loss of citrus, avocado trees, and other crops in many areas. Several days of subfreezing temperatures occurred, with some valley locations in the teens.", "Event ID": "10208"}, {"Disaster": "Colorado Hail Storm (July 1990)", "Disaster Type": "Severe Storm", "Beginning Date": "7/11/1990", "Ending Date": "7/11/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 1623.7, "Deaths": 0, "Description": "Denver, CO (including airport) hit by severe hail storm. This was the costliest hail storm on record for Colorado when it occurred.", "Event ID": "10209"}, {"Disaster": "Southern Flooding (May 1990)", "Disaster Type": "Flooding", "Beginning Date": "5/11/1990", "Ending Date": "5/19/1990", "Total CPI-Adjusted Cost (Millions of Dollars)": 1993.6, "Deaths": 13, "Description": "Torrential rains cause flooding along the Trinity, Red, and Arkansas Rivers in TX, OK, LA, and AR", "Event ID": "10210"}, {"Disaster": "Winter Storm, Cold Wave (December 1989)", "Disaster Type": "Winter Storm", "Beginning Date": "12/21/1989", "Ending Date": "12/26/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 1414.1, "Deaths": 100, "Description": "Winter storm and deep cold impacts the Northeast, South and Southeast. The states impacted include AL, AR, CT, FL, GA, IL, IN, KY, LA, ME, MO, MS, NC, NH, NY, OH, OK, PA, SC, TN, TX, VA, VT and WV.", "Event ID": "10211"}, {"Disaster": "Florida Freeze (December 1989)", "Disaster Type": "Freeze", "Beginning Date": "12/23/1989", "Ending Date": "12/25/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 4160.0, "Deaths": 10, "Description": "Severe freeze damages citrus crops across central/northern Florida.", "Event ID": "10212"}, {"Disaster": "Northern Plains Drought (Summer-Fall 1989)", "Disaster Type": "Drought", "Beginning Date": "6/1/1989", "Ending Date": "11/30/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 6246.5, "Deaths": 0, "Description": "Severe summer drought over much of the northern plains with significant losses to agriculture. The states impacted include CO, IA, IL, KS, MO, ND, NE, NV, SD, TX and UT.", "Event ID": "10213"}, {"Disaster": "Hurricane Hugo (September 1989)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/21/1989", "Ending Date": "9/22/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 18719.8, "Deaths": 86, "Description": "Category 4 hurricane devastates South and North Carolina with ~20 foot storm surge and severe wind damage after hitting Puerto Rico and the U.S. Virgin Islands", "Event ID": "10214"}, {"Disaster": "Severe Storms (May 1989)", "Disaster Type": "Severe Storm", "Beginning Date": "5/1/1989", "Ending Date": "5/6/1989", "Total CPI-Adjusted Cost (Millions of Dollars)": 1147.0, "Deaths": 21, "Description": "Severe storms cause damage in states across the South and Southeast. The states impacted include OK, TX, LA, MS, GA, SC, NC and VA.", "Event ID": "10215"}, {"Disaster": "U.S. Drought/Heatwave (Summer 1988)", "Disaster Type": "Drought", "Beginning Date": "6/1/1988", "Ending Date": "8/31/1988", "Total CPI-Adjusted Cost (Millions of Dollars)": 43608.7, "Deaths": 454, "Description": "1988 drought across a large portion of the U.S. with very severe losses to agriculture and related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 5,000.", "Event ID": "10216"}, {"Disaster": "Southeast Drought/Heatwave (Summer 1986)", "Disaster Type": "Drought", "Beginning Date": "6/1/1986", "Ending Date": "8/31/1986", "Total CPI-Adjusted Cost (Millions of Dollars)": 4148.3, "Deaths": 100, "Description": "Severe summer drought in parts of the southeastern U.S. with severe losses to agriculture. The states impacted include AL, AR, GA, LA, MS, NC, SC, TN and VA.", "Event ID": "10217"}, {"Disaster": "Western Severe Storms and Flooding (February 1986)", "Disaster Type": "Severe Storm", "Beginning Date": "2/14/1986", "Ending Date": "2/16/1986", "Total CPI-Adjusted Cost (Millions of Dollars)": 1218.4, "Deaths": 13, "Description": "Severe storms and flooding affect the states CA, CO, NV, OR, WY across the West.", "Event ID": "10218"}, {"Disaster": "Hurricane Juan (October 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "10/27/1985", "Ending Date": "10/31/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 3577.1, "Deaths": 63, "Description": "Category 1 hurricane makes landfall near Morgan City, Louisiana. Hurricane Juan's slow movement causes severe flooding in Louisiana, Mississippi, Alabama and Florida. Southern Louisiana was most severely affected due to widespread rainfall of 10-15 inches that caused substantial flooding.", "Event ID": "10219"}, {"Disaster": "Hurricane Gloria (September 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "9/26/1985", "Ending Date": "9/28/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2046.2, "Deaths": 11, "Description": "Category 2 hurricane makes several landfalls along the eastern seaboard, affecting states from North Carolina to Maine.", "Event ID": "10220"}, {"Disaster": "Hurricane Elena (September 1985)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/30/1985", "Ending Date": "9/3/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 3100.8, "Deaths": 4, "Description": "Category 3 hurricane approaches the Florida Panhandle prior to landfall near Biloxi, Mississippi. Considerable wind and rain impacts were felt from Florida to Louisiana.", "Event ID": "10221"}, {"Disaster": "Florida Freeze (January 1985)", "Disaster Type": "Freeze", "Beginning Date": "1/20/1985", "Ending Date": "1/22/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2868.0, "Deaths": 0, "Description": "Severe freeze over central/northern Florida damages citrus crops.", "Event ID": "10222"}, {"Disaster": "Winter Storm, Cold Wave (January 1985)", "Disaster Type": "Winter Storm", "Beginning Date": "1/19/1985", "Ending Date": "1/22/1985", "Total CPI-Adjusted Cost (Millions of Dollars)": 2000.5, "Deaths": 150, "Description": "Extreme cold and winter storms in the Southeast, South, Southwest, Northeast, Midwest, and North", "Event ID": "10223"}, {"Disaster": "Severe Storms and Hail (June 1984)", "Disaster Type": "Severe Storm", "Beginning Date": "6/13/1984", "Ending Date": "6/17/1984", "Total CPI-Adjusted Cost (Millions of Dollars)": 1102.1, "Deaths": 1, "Description": "Severe storms and hail impact Colorado, South Dakota and Nebraska.", "Event ID": "10224"}, {"Disaster": "Tornadoes, Severe Storms, Floods (Spring 1984)", "Disaster Type": "Severe Storm", "Beginning Date": "3/27/1984", "Ending Date": "4/7/1984", "Total CPI-Adjusted Cost (Millions of Dollars)": 1489.6, "Deaths": 80, "Description": "States in the Southeast and Northeast regions are impacted by tornadoes, severe storms, and flooding. The states impacted include GA, FL, SC, NC, VA, MD, DE, NJ, NY, PA, CT, MA and RI.", "Event ID": "10225"}, {"Disaster": "Freeze, Cold Wave (December 1983)", "Disaster Type": "Freeze", "Beginning Date": "12/15/1983", "Ending Date": "12/25/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 5175.0, "Deaths": 151, "Description": "Severe freeze damages citrus crops across central/northern Florida. Associated cold wave over much of the U.S. causes over 100 deaths and additional damages.", "Event ID": "10226"}, {"Disaster": "Southeast Drought (Summer 1983)", "Disaster Type": "Drought", "Beginning Date": "6/1/1983", "Ending Date": "8/31/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 7647.4, "Deaths": 0, "Description": "1983 flash drought in the southeastern U.S. with losses to agriculture, most notably corn and soybeans. The states impacted include AL, AR, GA, KY, LA, MO, MS, NC, SC, TN and VA.", "Event ID": "10227"}, {"Disaster": "Hurricane Alicia (August 1983)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/17/1983", "Ending Date": "8/20/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 7740.0, "Deaths": 21, "Description": "Category 3 hurricane makes landfall near Galveston, Texas with maximum sustained winds 115 mph. Hurricane Alicia was the first hurricane to hit the United States mainland since Hurricane Allen in August 1980.", "Event ID": "10228"}, {"Disaster": "Western Storms & Flooding (December 1982-March 1983)", "Disaster Type": "Flooding", "Beginning Date": "12/13/1982", "Ending Date": "3/31/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 4004.0, "Deaths": 50, "Description": "Severe storms and flooding, especially in the states of WA, OR, CA, AZ, NV, ID, UT, and MT", "Event ID": "10229"}, {"Disaster": "Gulf States Storms and Flooding (December 1982-January 1983)", "Disaster Type": "Flooding", "Beginning Date": "12/1/1982", "Ending Date": "1/15/1983", "Total CPI-Adjusted Cost (Millions of Dollars)": 4101.3, "Deaths": 45, "Description": "Severe storms and flooding, especially in the states of TX, AR, LA, MS, AL, GA, and FL", "Event ID": "10230"}, {"Disaster": "Severe storms (June 1982)", "Disaster Type": "Severe Storm", "Beginning Date": "5/31/1982", "Ending Date": "6/10/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1281.7, "Deaths": 30, "Description": "Severe storms cause damage across the South, Southeast and Central regions. The states impacted include AR, IL, KY, IN, SC, GA and OH.", "Event ID": "10231"}, {"Disaster": "Midwest/Plains/Southeast Tornadoes (April 1982)", "Disaster Type": "Severe Storm", "Beginning Date": "4/2/1982", "Ending Date": "4/4/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1290.3, "Deaths": 33, "Description": "Tornadoes and severe weather affect the states (AL, AR, CO, IA, IL, IN, KS, KY, LA, MI, MN, MO, MS, NE, OH, OK, PA, TN, TX, WI, WV) across the Midwest, Plains and Southeast.", "Event ID": "10232"}, {"Disaster": "Midwest/Southeast/Northeast Winter Storm, Cold Wave (January 1982)", "Disaster Type": "Winter Storm", "Beginning Date": "1/8/1982", "Ending Date": "1/16/1982", "Total CPI-Adjusted Cost (Millions of Dollars)": 1767.6, "Deaths": 85, "Description": "Winter storm and coldwave affect numerous states (AL, AR, CT, DE, FL, GA, IA, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MO, MS, NC, ND, NH, NJ, NY, OH, OK, PA, RI, SC, TN, TX, VA, VT, WI, WV) across the Midwest, Southeast and Northeast.", "Event ID": "10233"}, {"Disaster": "Severe Storms, Flash Floods, Hail, Tornadoes (May 1981)", "Disaster Type": "Severe Storm", "Beginning Date": "5/5/1981", "Ending Date": "5/10/1981", "Total CPI-Adjusted Cost (Millions of Dollars)": 1164.2, "Deaths": 20, "Description": "Severe storms cause damage across the Midwest and South. The states most impacted include TX, OK, KS, AL and LA.", "Event ID": "10234"}, {"Disaster": "Florida Freeze (January 1981)", "Disaster Type": "Freeze", "Beginning Date": "1/12/1981", "Ending Date": "1/14/1981", "Total CPI-Adjusted Cost (Millions of Dollars)": 1658.8, "Deaths": 0, "Description": "Severe freeze heavily damaged fruit crops across Florida. Over 25,000 Florida farms were impacted and sustained losses.", "Event ID": "10235"}, {"Disaster": "Central/Eastern Drought/Heatwave (Summer-Fall 1980)", "Disaster Type": "Drought", "Beginning Date": "6/1/1980", "Ending Date": "11/30/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 32464.8, "Deaths": 1260, "Description": "Central and eastern U.S. drought/heat wave caused damage to agriculture and other related industries. Combined direct and indirect deaths (i.e., excess mortality) due to heat stress estimated at 10,000.", "Event ID": "10236"}, {"Disaster": "Hurricane Allen (August 1980)", "Disaster Type": "Tropical Cyclone", "Beginning Date": "8/7/1980", "Ending Date": "8/11/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 1911.6, "Deaths": 13, "Description": "Category 3 hurricane makes landfall north of Brownsville, Texas with maximum sustained winds of 115 mph. Hurricane Allen causes rainfall up to 20 inches in southern Texas and storm surge as high as 12 feet along the coast.", "Event ID": "10237"}, {"Disaster": "Southern Severe Storms and Flooding (April 1980)", "Disaster Type": "Flooding", "Beginning Date": "4/10/1980", "Ending Date": "4/17/1980", "Total CPI-Adjusted Cost (Millions of Dollars)": 2289.9, "Deaths": 7, "Description": "Severe storms and flooding affect several states (AR, LA, MS) across the South.", "Event ID": "10238"}], "stage_runningstate": "executed", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "65daa6ebc55b7f0042d67ca6", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/DisasterCleanedAgainTotest.csv", "in": ["65daa6ebc55b7f0042d67ca5"], "out": [], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "RegressioModel_AutoML", "comment": "", "pipeline_id": "65daa6ebc55b7f0042d67ca1", "sub_type": "Automl", "stage_type": "ml", "mlCategory": "Regression", "stage_attributes": {"model_type": "regression", "label": "Total CPI-Adjusted Cost (Millions of Dollars)", "features": ["Deaths", "Disaster_stringindexer", "Disaster Type_stringindexer", "Beginning Date_stringindexer", "Ending Date_stringindexer", "Description_stringindexer", "Event ID_stringindexer"], "percentage": "80", "executionTime": "10", "sampling": "1", "sampling_value": "", "optimizeBy": "r2", "run_id": "", "server_url": "/numtraPlatform/NumtraPlatformV3/uploads/platform/"}, "status": "new", "position": {"x": 187, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/ml-engine/regression.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "aml", "text": "Regression-AutoML", "slug": "auto-ml", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"model_type": "", "label": "", "features": []}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf4", "field": "Total CPI-Adjusted Cost (Millions of Dollars)", "alias": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf5", "field": "Deaths", "alias": "Deaths", "type": "numeric", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf6", "field": "Disaster_stringindexer", "alias": "Disaster_stringindexer", "type": "real", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf7", "field": "Disaster Type_stringindexer", "alias": "Disaster Type_stringindexer", "type": "real", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf8", "field": "Beginning Date_stringindexer", "alias": "Beginning Date_stringindexer", "type": "real", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf9", "field": "Ending Date_stringindexer", "alias": "Ending Date_stringindexer", "type": "real", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cfa", "field": "Description_stringindexer", "alias": "Description_stringindexer", "type": "real", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cfb", "field": "Event ID_stringindexer", "alias": "Event ID_stringindexer", "type": "real", "position": "7"}], "actual_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cec", "field": "Disaster", "alias": "Disaster", "type": "String", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67ced", "field": "Disaster Type", "alias": "Disaster Type", "type": "String", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cee", "field": "Beginning Date", "alias": "Beginning Date", "type": "date", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cef", "field": "Ending Date", "alias": "Ending Date", "type": "date", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf0", "field": "Total CPI-Adjusted Cost (Millions of Dollars)", "alias": "Total CPI-Adjusted Cost (Millions of Dollars)", "type": "real", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf1", "field": "Deaths", "alias": "Deaths", "type": "numeric", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf2", "field": "Description", "alias": "Description", "type": "String", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "65daa850c55b7f0042d67cf3", "field": "Event ID", "alias": "Event ID", "type": "String", "position": "7"}], "selected_schema": [], "created_at": "2024-02-25 02:33:15.207000", "originalcount": 238, "samplecount": 238, "samplefile": "/FileStore/platform/sampleData/65daa6ebc55b7f0042d67ca4/part-00000-84c46422-b3f8-4c91-9701-47a5d45a96e1-c000.csv", "joinSchema": [], "updated_at": "2024-02-25 02:39:52.051000", "__v": 0, "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": {}}}]